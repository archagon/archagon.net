<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archagon Was Here (Jekyll Test)</title>
    <description>Archagon was here... or was he? Yes, he was. This is Alexei Baboulevitch&#39;s personal blog webspacehomepage, featuring writing on software development, travel, photography, and more.
</description>
    <link>http://beta-blog.archagon.net/</link>
    <atom:link href="http://beta-blog.archagon.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 23 Aug 2016 13:04:48 -0700</pubDate>
    <lastBuildDate>Tue, 23 Aug 2016 13:04:48 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Indie App Reliance</title>
        <description>&lt;p&gt;Today, &lt;a href=&quot;https://twitter.com/brentsimmons/status/767461318538383360&quot;&gt;with a single tweet&lt;/a&gt;, the note-taking app &lt;a href=&quot;http://vesperapp.co&quot;&gt;Vesper&lt;/a&gt; has officially been shuttered. At its release, Vesper was &lt;a href=&quot;https://marco.org/2013/06/06/vesper&quot;&gt;widely promoted&lt;/a&gt; by the &lt;a href=&quot;https://www.macstories.net/reviews/vesper-review-collect-your-thoughts/&quot;&gt;Apple indie developer communtiy&lt;/a&gt; as the hot new thing to try. More than anything else, it had an excellent pedigree, with influential blogger John Gruber of &lt;a href=&quot;http://daringfireball.net&quot;&gt;Daring Fireball&lt;/a&gt; at the helm. Many hopeful users switched to it for their primary note-taking needs, expecting that features like Mac support would arrive in short order. If any app from this circle was destined to be a breakaway hit, it was this one. And now, with barely a mention, it’s all but swept away, years after langishing with barely an update.&lt;/p&gt;

&lt;p&gt;This is not a post about why Vesper ultimately failed. There are plenty of others who will happily chat about the rusty economics of the App Store. Instead, I want to focus on the other end of this unfortunate feedback loop: the effect that these highly visible app shutdowns might have on App Store customers.&lt;/p&gt;

&lt;p&gt;Several bloggers have expressed curiosity as to why public interest in the App Store has waned so much. I can’t answer for everyone, but at least within myself, I’ve noticed an increasing and persistant reluctance to try new apps. It’s just that I’ve seen same pattern crop up over and over again. Somebody releases an interesting new app, touting fantastic design and improved productivity. The app gains some (but not overwhelming) traction. The app gets a few updates. The app lingers for a few years. And finally, the app untriumphantly rides off into the sunset, taking entire years of not just developer time, but thousands of users’ ingrained habits with it. The case is clear: most apps — and especially indie apps — cannot be reliably expected to continue operating.&lt;/p&gt;

&lt;p&gt;After being burned so many times by products that have been pulled out from under me, I’ve unconsciously adopted a worrying philosophy for trying new apps: unless the app I’m using is backed by a large corporation or is outright open-source, I’m not going to use it for anything particularly important in my life.  (And even then, certain corporations — ahem, Google — are put under further scrutiny.) I hate having to do this because many amazing UX advancements can be found in apps produced by smaller developers. (Apple folks love to talk about how certain categories of apps are &lt;a href=&quot;https://daringfireball.net/2009/04/twitter_clients_playground&quot;&gt;design playgrounds&lt;/a&gt;.) But at the same time, I know that with these apps, there is an inevitable sunset e-mail waiting for me in the not-too-distant future. It’s gotten so bad that I’m starting to seriously consider switching most of the (snappy, beautiful, well-designed) productivity apps on my phone over to their (ugly, clunky) open-source alternatives, just because I know that OpenWhatever will long outlive the current App Store darling for that category. (1Password is one hot spot that immediately comes to mind. Losing them would be a disaster.) I don’t want to worry every day about whether these proprietary silos will suddenly go up in flames with all my carefully-constructed workflows and data.&lt;/p&gt;

&lt;p&gt;Despite the low prices on the App Store, I now get decision fatigue whenever I go to purchase an app. How long is this product going to be around? How reliable is this developer? How easy is it to export the data? How open are all the underlying formats and APIs? The price might be insignificant, but the commitment implied by my purchase is not trivial at all! Unfortunately, developers don’t seem to care much about the mental toll that pulling an app might cause, even when they were the ones touting life-changing productivity and workflow improvements in the first place. It’s one thing I miss about Windows utility software: so much of it is terribly designed, but at least I know it’ll run more or less forever. (Both on account of the open platform and Windows’ amazing legacy support.)&lt;/p&gt;

&lt;p&gt;It’s understandable why developers shut down their apps, but I wish there was another way out of this dead-end. Maybe apps could certify that all their back-end services are provided by external vendors and can be swapped out if necessary. (This is why I’m not too worried about apps like Reeder and Pocket Casts: I know that if they go away, I can take my precious data and switch right over to another app.) Maybe developers could pledge — even with legal backing! — to open-source their software if they ever decide to stop supporting it. Or going even further into this mythical socialist utopia, how about we finally figure out a way to fund open-source software from the get-go without having to beg for donations? With services like CloudKit, it’s no longer even necessary to spend a single cent of your money on servers. What’s the point of bringing something wonderful into the world if it only lasts for as long as people are willing to buy it? I can’t help but see that as hopelessly cynical.&lt;/p&gt;

&lt;p&gt;To be clear: I’m &lt;em&gt;not&lt;/em&gt; saying that developers should be expected to support and add features to their apps indefinitely. That would be a very extreme stance. But on the other end, adopting a scorched earth policy for your app once you tire of it is also pretty extreme and poisons the market to boot.&lt;/p&gt;

&lt;p&gt;Apps — products that encapsulate &lt;em&gt;years&lt;/em&gt; of people’s lives — should never outright disappear just because a developer can’t be bothered to support them anymore. If we don’t have that assurance, and if we can’t rely on our tools, all we’re doing is playing with toys.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2016 17:01:19 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/08/21/tool-reliance/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/08/21/tool-reliance/</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Composer&#39;s Sketchpad: Adventures in Icon Design</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-icon/banner.png&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(4) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(4) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/07/16/composers-sketchpad-adventures-in-icon-design/&quot;&gt;Composer&#39;s Sketchpad: Adventures in Icon Design&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/composers-sketchpad/id978563657?mt=8&quot;&gt;Composer’s Sketchpad 1.2 is out&lt;/a&gt;! This is a major update with several new features, including audio export (via AAC), a new tool for shifting notes along the time axis, and a one-finger drawing mode. I figured this might be a good opportunity to write about something a bit more on the creative side: icon design!&lt;/p&gt;

&lt;p&gt;Having no practical design experience, I am very proud of the icon I created for Composer’s Sketchpad. A good icon is absolutely essential for marketing, so most app developers would recommend contracting out this delicate task to a real designer. But I’m stubborn: one of my higher-level goals in creating Composer’s Sketchpad was to get better at art and design, and I wanted the icon in particular — the thesis of my app! — to be my own invention.&lt;/p&gt;

&lt;p&gt;Going along with the idea that creativity flourishes under harsh constraints, these were the requirements I laid out for the icon:&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;important_list&quot;&gt;
    &lt;ul&gt;
      &lt;li&gt;It had to feature a reference to music.&lt;/li&gt;
      &lt;li&gt;It had to hint at the functionality, aesthetics, and interface of the app.&lt;/li&gt;
      &lt;li&gt;It had to roughly align within the iOS 7 icon grid while somehow subverting it.&lt;/li&gt;
      &lt;li&gt;It had to exhibit some dimensionality and flow. I didn’t want it to look flat or overly vectory.&lt;/li&gt;
      &lt;li&gt;It had to be logo-like: symbolic, bold, and simple.&lt;/li&gt;
      &lt;li&gt;But most importantly, &lt;strong&gt;it had to immediately catch the eye&lt;/strong&gt;. As a frequent App Store customer, I knew well enough that even a slightly uninteresting app icon would warrant a pass, while an interesting icon might make people peek at the app description without even knowing anything about it. The icon was &lt;em&gt;absolutely critical&lt;/em&gt; to my passive marketing. It was my calling card — the entirety of my app wrapped up in 512×512 pixels. No pressure!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Weeks before starting work on the icon, I began to keep tabs on other app icons that I found interesting. I was already following &lt;a href=&quot;http://www.musicappblog.com&quot;&gt;musicappblog.com&lt;/a&gt; religiously for music app news, so I scoured their archives for inspiration. I also carefully looked through all my home screens as well as the App Store top charts for non-music influences. In truth, even among the cream of the crop, there weren’t many icons that I outright loved. Most of the ones that caught my eye kept things relatively simple — outlines, primary colors, subtle gradients — while preserving the circular motif of the iOS 7 icon grid. (Many of these happened to be Apple icons.) There were also plenty of icons that failed at either extreme, either by cramming too much color and detail into the tiny square, or by not providing nearly enough detail to make a minimalist design stand out.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-icon/icon_inspiration.png&quot; width=&quot;498px&quot; /&gt;
&lt;p&gt;A few app icons I would consider eye-catching.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Inspiration in hand, I first made a number of rough pencil sketches, most of which depicted a prominent musical note with some embellishment. Quality was not a concern at this point: I wanted to jot down as many ideas as possible even if they didn’t seem to hold much promise. In the midst of this process, I found myself feeling fairly ambivalent towards most of the designs I came up with, though I knew they could probably be moulded into something that followed my rules. Something about them just didn’t feel right.&lt;/p&gt;

&lt;p&gt;I still didn’t have much of a sense how far my nascent design sensibilities could take me, and part of me started to give up hope of finding the perfect design. But when I came up with the sketch for the final swirly-tail icon (after running a few ideas by my folks — спасибо, мама!), everything suddenly clicked. I knew right then that this particular design would perfectly slot into the narrow niche defined by my requirements. For the first time, I thought that maybe I could pull this off!&lt;/p&gt;

&lt;p&gt;After making a few passes at the basic shape in pencil, I moved to the computer. My first attempts at a colored draft were very static. Doodling in Pixelmator with my Wacom tablet got me effectively nowhere, so I decided to just work in Illustrator directly — my first real stint with the software. As was typical with Adobe, the UI felt like a sprawling, bloated mess, but also allowed me to do some surprisingly powerful things. The most important discovery were the non-destructive transforms — particularly for the Pathfinder — in the inconspicuous “fx” menu at the bottom of the Appearance tab. With these tools, I gained the ability to perform boolean operations on sets of shapes, turn strokes into paths, and create complex gradients while still having full control over the constituent parts. Doing this across complex groups of layers wasn’t pretty, but it allowed me to freely experiment with new shapes without having to “bake” a final result and start all over again for minor adjustments.&lt;/p&gt;

&lt;p&gt;I’m sure experienced vector artists can use Illustrator to draft their ideas directly, but my process, as a beginner, was much more methodical. I started with the standard iOS 7 grid and drew a simple circle over the outer part. I typed an 8th note symbol in the center and looked through many fonts to find a pleasing shape for the flag. I rendered the note as a shape, added a scan of my freehand sketch in the background, and started dissecting the circle; it was split into several sections to make joining with the note flag a bit easier. After placing a connecting Bézier curve between the flag and the circle, fiddling with the control points to match my sketch, and adjusting the width to smoothly blend the circle and the flag, I had an outline that roughly matched my paper drawing. For this first pass, the rest of my time involved zooming out and adjusting the widths and tangents to make sure that everything looked smooth and contiguous.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-icon/early_icons.png&quot; width=&quot;594px&quot; /&gt;
&lt;p&gt;Some early experiments.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Designing the colorful swish at the tail end of the circle came next, and it turned out to be the trickiest part of the process. I knew that this segment of the icon had to have flow, levity, and dimensionality without looking too realistic or skeuomorphic — and yet I couldn’t picture it in my head. I started with a simple 3-color gradient at the end of the circle that widened towards the bottom. This looked merely OK, but it felt too static. Adding more colors to the gradient and moving the left side of the tail into the circle helped, but it wasn’t enough.&lt;/p&gt;

&lt;p&gt;The first problem was nailing the outer curve of the tail. I tried many different shapes. Some looked like paintbrushes; some evoked waves; some resembled sand dunes. But none felt perfectly right. My “aha” moment was when I realized that I was subconsciously creating an Archimedean spiral with its origin at the note flag. I borrowed a spiral from Google Images and adjusted my curves to fit it. The shape finally came together.&lt;/p&gt;

&lt;p&gt;Next came the colors. I learned that I could add more control points to the bottom of the gradient envelope, allowing me to roughly specify the curve of each vertical slice of the gradient. The next few iterations involved creating an almost cloth-like shape out of the envelope and fiddling with the blur between the gradient colors. Still, the distribution of the gradient stripes was unsatisfactory. No matter how much I adjusted the gradient distribution or the control points of the envelope, the swirls felt too busy at the origin and too lopsided further towards the bottom.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-icon/later_icons.png&quot; width=&quot;428px&quot; /&gt;
&lt;p&gt;Rough drafts closer to the final icon.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I realized that what I wanted was precise control over the “density” of the gradient envelope, top to bottom. Hoping that Illustrator contained within its multitudes the solution to my problem, I Googled around and was elated to discover that I was correct. The Gradient Mesh tool, though a bit tricky to set up, allowed you to apply a gradient to a flexible rectangle with an inner Bézier-based grid. I could now adjust the precise distribution of color throughout the entire length of my tail!&lt;/p&gt;

&lt;p&gt;There were still some shape-related questions to answer, the most important being: how do I maintain the legibility of the note and circle? The tail was supposed to be in the background; above all else, I didn’t want the shape or colors of the tail to interfere with the appearance of the note. Initially, I assumed that the left edge of the tail (touching the blue stripe) should avoid the note head entirely by going under or above it. However, both options made the tail look misshapen and unattractive, ruining the wave effect. On a whim, I tried intersecting the note head with the edge and it worked! Instead of disrupting the legibility of the note, the line drew the eye to it. I also had concerns that the gradient would make the lower part of the circle hard to see, but this was easy to fix by simply following the shape of the circle with the red stripe.&lt;/p&gt;

&lt;p&gt;Finally, I wanted to make sure that each curve in the tail — the left edge as well as each dividing color line in the gradient — “rhymed” with the overall shape of the icon. The final curves were mostly determined by trial and error. Just as with my initial sketch, I “knew” as soon as I saw the winning arrangement that I had found an inflection point for my design. There was a strong sense of motion originating from the note flag, carrying through the circle, and spiraling back around into a colorful background wave. Even though I couldn’t picture it at the time, it was exactly the effect I was hoping for when I originally came up with the design!&lt;/p&gt;

&lt;p&gt;(I wish there was more to say about color selection, but in truth, it was done quickly and somewhat haphazardly. The background blue was derived from the primary color of my app, while the gradient colors were basically chosen on a whim.)&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-icon/wave.png&quot; width=&quot;400px&quot; /&gt;
&lt;p&gt;The final curves of the gradient mesh.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;For the Lite version, I once again wanted to stick to App Store conventions while defying them just a bit. Most Lite icons have an ugly banner over the default icon that feels out of place with the rest of the design. I still wanted to have the banner for consistency, but I wanted it to work with my diffuse pastel aesthetic.&lt;/p&gt;

&lt;p&gt;First, I had to determine banner placement. I tried several of the usual positions and then quickly rejected them; they blocked off too much of the underlying icon. I then decided to give the diagonals a shot and discovered that the upper-right corner had several benefits: not only did it preserve visibility for the key parts of the icon, but it also complemented the motion of the circle while allowing some interesting colors to peek through. (Assuming some translucency, which felt likely.)&lt;/p&gt;

&lt;p&gt;Next, I had to find a good look for the banner. (This iteration was done in Photoshop, since its raster effects were far better than Illustrator’s.) A simple color fill felt too out-of-place, so I decided to try for an iOS-7-ish Gaussian blur; ideally, I wanted a bit of the white outline and some of the tail colors to show through without compromising legibility. To make it easier to pick the final position, I masked the banner onto a blurred render of the underlying icon, which allowed me to treat the banner as if it were simply a blurry window and move it around freely. It didn’t take long until I found a satisfying result.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-icon/lite_icons.png&quot; width=&quot;345px&quot; /&gt;
&lt;p&gt;Drafts for the Lite version of the icon. The final icon is on the right.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That’s about it! Against all my expectations when I started on this journey, I’m still pleased by my icon whenever I catch it on the home screen even half a year later. There are certainly changes I could still make — there’s not enough contrast, the colors aren’t perceptually balanced, the gradient divisions are still a bit lopsided and the origin of the swirl needs some work — but I would consider these nitpicks. The gestalt of the design is right.&lt;/p&gt;

&lt;p&gt;(And as an unforeseen bonus, the icon easily converted into a black-and-white stencil for the promo poster a few months later!)&lt;/p&gt;

&lt;p&gt;If there’s a foremost design lesson I took a way from all this, it’s how many moments of inspiration occurred whenever I deviated from incremental adjustments and tried something more extreme. Adding a bit more curvature to a line didn’t yield any new insights; but turning it into a semi-circle gave me a completely new perspective on the shape. Changing the brightness slightly didn’t result in a satisfactory color palate; while ramping the slider completely made me rethink my initial assumptions about the chromatic balance. It seems that if you’re stuck in a design rut, it can be a good idea to vastly overshoot and then dial down instead of trying to inch towards an optimal design with minor, conservative changes.&lt;/p&gt;

&lt;p&gt;Ultimately, it felt wonderful over the course of this project to engage with my creative side — a part of myself that I still consider a mystery. Every time a design decision “clicked”, it felt like a little miracle. No doubt this will only reinforce my stubborn desire to do all my own art in future projects!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-icon/promo_poster.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jul 2016 07:00:00 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/07/16/composers-sketchpad-adventures-in-icon-design/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/07/16/composers-sketchpad-adventures-in-icon-design/</guid>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>Headphone Jacks Are the New Power Plugs</title>
        <description>&lt;p&gt;Blog comments are out, blog responses are in — and so I thought I’d respond to John Gruber’s recent article titled &lt;a href=&quot;http://daringfireball.net/2016/06/headphone_jacks_are_the_new_floppy_drives&quot;&gt;“Headphone Jacks Are the New Floppy Drives”&lt;/a&gt;. Here’s why I think removing the headphone jack would be a bad idea at this moment in time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Poor wireless options and standards. I use Bluetooth headphones and I love them, but they’re a world of compromises. Audio quality is far from lossless, and not just because of the codecs: with the sound off, you are likely to hear noise and static from the radio right next to your ear. (This does not bother me, but would drive many people crazy.) Switching between devices is a pain. Pairing is a pain. You have to remember to charge them. There is unbearable latency for games and occasionally even movies. Few audiophile-level headphone makers bother with Bluetooth headphones, leaving us with just the consumer brands. They can only be as powerful as the battery-powered driver. Might Apple introduce a new wireless codec that tackles all of these pain points? Sure. But then we get:&lt;/li&gt;
  &lt;li&gt;Vendor lock-in. Apple Wireless or Lighning headphones wouldn’t be compatible with much else. Not a problem for cheap earbuds, but definitely a big deal for high-quality, $400+ headphones. After years of freedom, audio would be siloed. As Gruber mentions, this is in Apple’s best interests; but among all our gadgets, headphones have always been among the most universal and independent. They are a true analog path between our disparate electronics — an intuitive and surprisingly error-free technology in a world where devices routinely refuse to talk to each other. You wouldn’t find yourself spending an hour helping your mom troubleshoot the headphone jack. This change would be a major pain point, especially when it comes to:&lt;/li&gt;
  &lt;li&gt;Loss of plug-and-play. I constantly plug my headphones from my phone to my laptop and back. Bluetooth can &lt;em&gt;sort of&lt;/em&gt; do this, but it always takes me about a minute with my wireless headphones. With Lightning headphones, it wouldn’t even be a possibility. (Barring Lightning-endowed Macbooks, which would be utterly bizzarre. What else would that port be used for? How would it be differentiated from USB-C?) A once-flexible workflow would be completely subverted.&lt;/li&gt;
  &lt;li&gt;Needless complication. Headphones are a very simple thing: just a wire leading to drivers. Very few things can go wrong in this arrangement, as evidenced by the proven durability and versatility of headphones over the past few decades. Headphone makers have gotten really good at working with these few parameters to create truly world-class audio devices. Indeed, some of the most esteemed headphones in the low-end audiophile space (I’m thinking of Grados) are basically glued together by hand in a workshop. If we start shoving more electronics — Lightning circuitry or a DAC, most obviously — into headphones, we make this proven system far more brittle than it needs to be. Headphones will malfunction in frustrating ways. Noise will be introduced. Designs will become more bloated to accommodate the extra circuitry. Every headphone having its own DAC is like every monitor having its own video card: clearly putting technology on the wrong side of the divide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is all this for? What do we gain in return?&lt;/p&gt;

&lt;p&gt;In the past, every time a prominent piece of technology was removed from my Apple hardware — most recently the CD drive and the Ethernet port — my response was ambivalent because I had already been happily using the alternative for a while. Wi-Fi, despite its flaws, offered countless advantages over Ethernet, leading to rapid adoption. Steam, iTunes, and Netflix had made me almost forget that CDs were still a thing by the time I got my Retina Macbook Pro. It almost goes without saying that these technologies were standard and universal — nobody would have accepted them otherwise. But there’s no Next Best Thing in headphones. This is an entirely artificial change.&lt;/p&gt;

&lt;p&gt;Were there an existing high-quality wireless standard for headphones, I’d be somewhat on board, especially if the phone could be waterproofed in exchange. But we’re not there yet, and I fear that in this instance, Apple is looking out for their corporate interests instead of their users. When Apple removes features, I can usually envision the “better tomorrow” they’re striving for. Here, what future can we look forward to if we’re all using bloated, proprietary, and fragile headphones that sound like garbage?&lt;/p&gt;

&lt;p&gt;I can already hear the cry that “the average consumer won’t care”. Sure, maybe not. But their listening experience wouldn’t really be improved by the change, their options for audio hardware would become a lot more limited, and their lives would become riddled with new minor frustrations. The “average consumer” doesn’t care about typography, True Tone displays, or Retina graphics, either. But it all adds up. I respect Apple because they’re internally motivated to strive for quality, and a move towards pointless proprietary standards — towards profit-driven mediocrity with the “average consumer” as a scapegoat — would be a sad blow to that image.&lt;/p&gt;

&lt;p&gt;There’s a good chance I’ll keep buying iPhones without a headphone jack, but also a 100% chance I’ll end up carrying a 3.5mm adaptor wherever I go. One more thing to lose. A permanent ugly tail sticking out of Ive’s immaculately-designed round rect.&lt;/p&gt;

&lt;p&gt;Good work, team?&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 18:49:04 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/06/21/headphones/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/06/21/headphones/</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-absolute-pitch/banner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(3) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(3) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/07/16/composers-sketchpad-adventures-in-icon-design/&quot;&gt;Composer&#39;s Sketchpad: Adventures in Icon Design&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I wanted Composer’s Sketchpad to have the ability to represent musical notes at any pitch. In order to do this, I needed to solve two problems: representing arbitrary pitches internally and making them compatible with MIDI.&lt;/p&gt;

&lt;p&gt;Human perception of pitch follows a logarithmic curve, meaning that a frequency will sound an octave higher when multiplied by two. However, we tend to think of notes in a linear fashion: C4 is a fixed distance from C3 on the piano, just as C3 is from C2.&lt;/p&gt;

&lt;p&gt;The naive approach to representing pitch would be to simply store the frequency in hertz and be done with it. But this didn’t sit right with me: since my canvas depicted pitches linearly like on a piano keyboard, I’d have to be constantly taking the logarithm of my points and subsequently introducing possible floating point errors as we went up the ladder. The pitches would also have to be stored as irrational floating point numbers, making it impossible to tell whether a point is sitting precisely on a pitch gridline.&lt;/p&gt;

&lt;p&gt;So I decided to represent my pitches as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cent_(music)&quot;&gt;cents&lt;/a&gt;. Cents are the linear unit counterpart to frequency: C4 is 1200 cents from C3, and C3 is 1200 cents from C2. (Per equal temperament tuning, each piano key is 100 cents apart from the next.) This means that cents aren’t an absolute unit like pitch, but rather the function of two frequencies: in order to get the expected 1200 cents from C4 (261.6Hz) to C3 (130.8Hz) we take the base-2 logarithm of C4 divided by C3 and multiply by 1200. As convenient as these units were, I still needed to represent my points in an absolute way, and so I created an internal unit of “absolute cents”: simply the number of cents a pitch is from A440. If you peek inside a Composer’s Sketchpad JSON file, you’ll see that C4 has a value of -900, B4 a value of -1000, etc. Mathemtacially convenient and human-readable!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-absolute-pitch/cents.png&quot; /&gt;
&lt;p&gt;Different representations of pitch for the inflection points on a single note.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The second problem was a little trickier. Internally, the app was using the built-in MIDI functionality found on iOS, in the form of &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/AudioToolbox/Reference/MusicPlayerServices_Reference/index.html&quot;&gt;MusicPlayer&lt;/a&gt; and AUMIDISynth. Unfortunately, traditional MIDI — having been designed in the stone age of computing — didn’t support arbitrary pitch values. Instead, you were given a measly 128 MIDI notes, each corresponding to a note on a standard, equally-tempered (and slightly extended) piano. This was great for interfacing with hardware MIDI keyboards, but hardly appropriate for playing back arbitrary pitches.&lt;/p&gt;

&lt;p&gt;(To be clear: MIDI is simply a standard for sending instructions to a synthesizer. While the standard is very limited and fiddly, it does have the advantage of being supported ubiquitously. You can also save your MIDI packets to a file and use it with a wide variety of software. However, synthesizers themselves are usually much more robust. When interfacing with them directly, you may well be able to play arbitrary pitches and use other custom functionality. The thing you’d lose by going this route is compatibility with existing technology, which is frankly a very big hurdle.)&lt;/p&gt;

&lt;p&gt;There are several ways to alter the pitch of a MIDI note, some more widely supported than others. The most common is using the pitch-bend wheel. Another is using the &lt;a href=&quot;https://en.wikipedia.org/wiki/MIDI_Tuning_Standard&quot;&gt;MIDI Tuning “Standard”&lt;/a&gt; (which is in fact hardly supported anywhere). Yet another is using polyphonic aftertouch, but only after setting up your synthesizer to correctly parse the signals. For its ubiquity and semantic correctness, I decided to go with the pitch-bending approach. To play back an arbitrary pitch, I’d simply play the closest MIDI note and then bend it up or down to the desired frequency. However, there were two issues with this approach. First, the pitch-bend wheel applied bending to the entire keyboard range, not just individual notes. This meant that with the naive implementation, you could only play a single arbitrary pitch at a time! Second, the default range for the entire pitch-bend wheel was a measly whole tone up or down, which was simply insufficient for arbitrary bends. (For wider bends, one might consider getting around this problem by bending to a note, stopping the first note, playing the second note, and continuing the bend. However, this sounds pretty poor due to the fact that most instruments have a distinctive-sounding “attack” that appears as soon as you play a note. This makes the bend sound discontinuous at MIDI note boundaries.)&lt;/p&gt;

&lt;p&gt;I’ll get into the specifics of my MIDI architecture in a later article, but in brief, I solved the first problem using MIDI channels and multiple MIDI instruments. A MIDI instrument can often have 16 so-called channels, which are sort of like presets. Each channel has its own setting for instrument, volume, vibrato, and — conveniently — pitch bend, among many other properties. Whenever you play a MIDI note, you assign it to a channel and it plays with the corresponding properties for that channel. For my use case, this meant that if I used each MIDI channel for playing just a single note at a time (as opposed to the usual approach of playing multiple notes per channel and assigning each channel to a unique instrument), I could have 16 notes simultaneously pitch-bending at once! I wanted more polyphonic notes than that, however, so I decided to simply create a new virtual MIDI synth for each instrumental layer in my app: 16 channels per instrument, with 10 maximum instruments at once (for now). Surprisingly, even 10 maxed-out MIDI synths playing simultaneously didn’t peg my iPad 3’s CPU too hard. Kudos to a great audio architecture!&lt;/p&gt;

&lt;p&gt;The second problem — limited pitch-bend range — was solved using a so-called &lt;a href=&quot;http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/midispec/rpn.htm&quot;&gt;MIDI RPN&lt;/a&gt;, or registered parameter number. These are special, widely-supported MIDI commands that let you configure certain properties of your synth, with one of the primary ones being the range of your pitch-bend wheel. (Note that I say &lt;em&gt;widely&lt;/em&gt; supported, not universally. Only about half the software I’ve tried seems to understand the pitch-bend range RPN. Fortunately, Apple’s built-in synth does just fine.) Rather than having each tick on my virtual pitch-bend wheel correspond to 0.024 cents (as is the default), I sent an RPN command at the start of playback to make each tick equal to one cent. Completely impractical for a physical weel, but quite conveinent for our use case! (Incidentally, this makes the new pitch-bend range +/- almost 7 octaves. Except for the most esoteric use cases, it’s totally unnecessary to go any further than that, since even a pitch-bend of a single octave sounds pretty terrible on most synths.)&lt;/p&gt;

&lt;p&gt;All in all, it’s a messy, imperfect system, but it gets the job done. I can take a bunch of pitches stored as “absolute cents” in my JSON file, push them through a few conversion functions, retrieve a set of MIDI packets on the other end, send them to a bunch of virtual MIDI synths, and have them sound as the correct, precise audio frequencies through my speakers. Maybe someday a more modern standard like OSC will reign supreme and allow this sort of architecture to be radically simplified, but for now, we’re unfortunately a bit stuck in the 80’s.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 01:18:04 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/</guid>
        
        
      </item>
    
      <item>
        <title>Path Rendering in Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-rendering/rendering.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(2) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(2) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/07/16/composers-sketchpad-adventures-in-icon-design/&quot;&gt;Composer&#39;s Sketchpad: Adventures in Icon Design&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Before starting any work on Composer’s Sketchpad, I had to ask myself: was the app as I envisioned it even possible to make? My initial goals were as follows:&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;important_list&quot;&gt;
    &lt;ol&gt;
      &lt;li&gt;Have an (effectively) infinite canvas with a large number of notes visible at once.&lt;/li&gt;
      &lt;li&gt;Allow the canvas to zoom and pan with without any lag.&lt;/li&gt;
      &lt;li&gt;Allow the canvas to zoom without the notes losing any sharpness.&lt;/li&gt;
      &lt;li&gt;Have notes belonging to the current layer blur or fade when the layer switches.&lt;/li&gt;
      &lt;li&gt;Allow the notes to stretch and skew when the grid scale changes without distorting their appearance. (I ended up dropping this for the release version.)&lt;/li&gt;
      &lt;li&gt;Have the whole thing run at 60fps on my iPad 3.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had barely done any graphics programming up to this point, so I had to feel out the limits of OpenGL as I blindly barged ahead — always a painful way to develop a project.&lt;/p&gt;

&lt;p&gt;At first, I briefly considered implementing drawing using Photoshop-like brushes: that is to say, directly toggling pixels on a bitmap as the user moved their fingers around the screen. This seemed appropriate for something that behaved so much like a drawing application. However, I quickly realized that the representation of my notes should really be separate from their rendering (as with any good MVC design), which meant that I couldn’t just save the bitmap and be done with it. Furthermore, the finite resolution of the bitmap presented a number of problems. How could I implement high-quality zoom without having to re-render everything? How would it be possible to have an infinite canvas without having to implement a complex tiled rendering system? (I was aiming for maximum possible simplicity in my architecture at this point.) How could I switch layers seamlessly without storing a bitmap for each layer? It just wasn’t a good fit given the dynamic features of my app.&lt;/p&gt;

&lt;p&gt;So I decided try for a &lt;a href=&quot;https://developer.nvidia.com/nv-path-rendering&quot;&gt;path rendering&lt;/a&gt; approach instead. My musical notes would be stored as points in time/pitch space, and then the renderer would convert them into pleasing, smooth curves to draw on the screen.&lt;/p&gt;

&lt;p&gt;There were two obvious techniques that came to mind. The first was to use the CoreGraphics path renderer in the form of &lt;code&gt;UIBezierCurve&lt;/code&gt;. This approach was compelling because CoreGraphics’ path drawing support was very robust, to the point of being the foundation of heavyweight applications like &lt;a href=&quot;http://www.pixelmator.com/&quot;&gt;Pixelmator&lt;/a&gt;. Strokes, fills, and complex shapes were incredibly simple to define and draw, and it was all built-in and battle-tested by thousands of developers.&lt;/p&gt;

&lt;p&gt;The second approach that I immediately considered was to convert each curve into polygons and draw them using the GPU. My experience with hardware-accelerated vector graphics, though minor, was very positive: performance seemed smooth and stutterless compared to software rendering in the apps that used it, and the artifacts that occurred while waiting for data to load (jagged lines turning into smooth lines) felt a lot more pleasing than those in software renderers (blurry lines turning into crisp lines). Intuitively, even though I didn’t know any of the details at this point, the idea of manipulating groups of polygons on the GPU rather than plotting out curves pixel-by-pixel seemed like a very efficient approach. In addition, I knew that with polygons, scales and other translations would be effectively free.&lt;/p&gt;

&lt;p&gt;Unfortunately, there weren’t any built-in iOS frameworks that allowed me to do this. (Or — so I thought. I later learned that &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/SceneKit/Reference/SCNShape_Class/index.html&quot;&gt;SceneKit had support for path rendering&lt;/a&gt;, but it turned out to be fairly ugly, slow, and not particularly configurable.) I didn’t really feel up to the task of rolling my own solution, so I decided to hunt around for a framework. With high high-DPI displays ruling the roost and minimalist UIs being all the rage, surely somebody had a stable framework for hardware-accelerated path rendering on iOS?&lt;/p&gt;

&lt;p&gt;During my search, I learned of &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenVG&quot;&gt;OpenVG&lt;/a&gt;, the Khronos Group’s standard for hardware-accelerated path rendering. It seemed to be exactly what I was looking for! Unfortunately, the standard appeared to be all but abandoned&lt;sup id=&quot;fnref:why_no_hw_vectors&quot;&gt;&lt;a href=&quot;#fn:why_no_hw_vectors&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, with Nvidia’s &lt;a href=&quot;https://developer.nvidia.com/nv-path-rendering&quot;&gt;NV_path_rendering&lt;/a&gt; being the only other standard trying to take up the mantle. (Naturally, this was not an extension that iOS OpenGL ES supported.) However, I did manage to find an OpenGL ES framework called &lt;a href=&quot;https://github.com/micahpearlman/MonkVG&quot;&gt;MonkVG&lt;/a&gt; that incorporated a subset of OpenVG suitable for my project. Looking at the terrifying, twisted, OpenGL-ES-2-wrapping-OpenGL-ES-1-code, I feared that I might have great difficulty using the framework on iOS. Fortunately, it turned out that MonkVG only handled shaders and polygon drawing, not setting up the context or any other platform-specific technical details. After creating my GL &lt;code&gt;UIView&lt;/code&gt; and fixing a couple of minor errors, I was good to go.&lt;/p&gt;

&lt;p&gt;(Quick aside: over the course of my research, I learned that there were several ways to hardware-accelerate path rendering. MonkVG’s tessellation approach worked fairly efficiently, but it was also imprecise on account of the fact that you ended up with polygon strips in the end. It also required the actual tessellation step to be done on the CPU. In contrast, there are newer approaches that can render the paths directly using shaders. These tend to have high accuracy and detail, and they only require a single bounding-box polygon for the entire shape. Unfortunately, in my limited testing, I found the performance of this approach to be lacking on my iPad 3. Additionally, as I further discuss below, the polygon strip approach turned out to be ideal in the case where shapes needed to be generated once and then cached for future reuse and transformation. From what I can tell, it’s far more difficult to cache rendered curves using the shader approach.)&lt;/p&gt;

&lt;p&gt;Having figured out how to use both frameworks, I made a quick performance prototype: a simple draw loop at 60fps with a set of full-screen, randomly generated Bézier curves in each frame. (I considered this my worst-case scenario, as in the case of changing the width or height scales of my grid.) There were two rendering paths: one for CoreGraphics and one for MonkVG.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/stresstest.png&quot; /&gt;
&lt;p&gt;A randomly-generated scene from the stress test. CoreGraphics couldn&#39;t handle it while MonkVG passed with flying colors.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Sadly, as much as I wanted to stick with the battle-hardened CoreGraphics approach, it wasn’t even able to draw a single animating curve at a solid 60fps on my iPad 3. MonkVG, on the other hand, tore through 10+ curves without breaking a sweat. Graphically, the results of both approaches looked quite similar to me — or at least good enough for the app I was trying to make.&lt;/p&gt;

&lt;p&gt;After closely examining the technical underpinnings of both technologies, I learned that CoreGraphics was doing all of its work on the CPU, while MonkVG was tessellating its curves into polygon strips CPU-side and then sending them to VBOs on the GPU — one per curve. Interestingly, the performance difference still applied even when accounting for the tessellation step. Presumably, this is because drawing multiple polygons is a very fast and parallelizable operation on the GPU, even if they number in the thousands, while generating a Retina-sized Bézier curve on the CPU requires you to touch tens of thousands of pixels by “hand”. (But don’t quote me on that — I am definitely still a novice in this area.) It also helps that MonkVG is much less precise than CoreGraphics in its tessellation.&lt;/p&gt;

&lt;p&gt;Despite these finds, I really wanted to work with CoreGraphics, and so I attempted to return to the technology a number of times during my project. (Perhaps I missed something that would account for the massive performance difference?) Notably, I tried using it together with &lt;code&gt;CATiledLayer&lt;/code&gt;, hoping that this particular optimization would offset the inefficiencies of the software render. But even though I could now pan and zoom at 60fps, the chunks loaded far, &lt;em&gt;far&lt;/em&gt; too slowly for realtime use — I’m talking on the order of several seconds whenever you zoomed in. So that was that.&lt;/p&gt;

&lt;p&gt;For much of the project, owing to my inexperience, I was burdened with the question of the framerate cap. If everything was done perfectly, how high could I go? After getting caching and draw call batching working correctly, my MonkVG implementation yielded an acceptable framerate of 30-60fps in the general case, but I still wondered if I was an order of magnitude off on account of my incompetence. How did Apple Maps manage to work so smoothly with so many shapes on screen? How did web browsers manage to display thousands of character paths — possibly with transforms! — and still attain smooth performance? In truth, the geometry I was showing on screen was fairly complex: each quarter-measure note had about 300 triangles once you included the outline and endcaps, leading to an upper bound of almost 400,000 triangles on screen for a dense piece (12 notes, or 4 chords, per measure per layer, with 10 full layers and 10 measures on screen). Surely a breeze for modern machines, but quite a lot to handle for an old iPad! It’s always important to be able to answer the question, “where is all that performance going?”, and in my case it was going towards the multitude of dynamic features in my app.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/curves.png&quot; /&gt;
&lt;p&gt;The mesh structure of a note. Each blue dot is a recorded time/pitch sample. Having a screen full of these can be surprisingly performance-intensive!&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In retrospect, it was quite fortunate that I just happened to fall into the optimal rendering implementation for my project. My path rendering requirements were a little different from the norm: after eliminating point #5 from my initial goal list, I no longer needed most of my curves to be dynamic. The only curves that actually changed their structure from frame to frame were those belonging to the notes currently being drawn or erased — and even those were localized to the point of editing, since my notes were comprised of multiple tiny Bézier segments chained together. (I’ll talk details in a later article.) Instead, my highest priority was to translate and scale my notes at a constant 60fps while still preserving their sharpness, and polygons happened to be uniquely qualified for this task. At the expense of jaggedness on close zoom — fine by me — polygon tessellation effectively gave me infinite resolution along with free transforms. They were also perfectly suited for caching: once tessellated, I could store the vertices of the generated polygons for all my note objects without wasting too much space, wheareas doing the same with textures would have quickly filled up my memory. (To say nothing of looking terribly ugly when scaled.) Better yet, I eventually learned from profiling that it was the tessellation step — not drawing — that was the biggest roadblock in my path rendering implementation, so caching was absolutely critical to getting the performance I needed! Had I used a shader-based approach, I would have had to write a ton of additional code to enable caching, and it &lt;em&gt;still&lt;/em&gt; probably wouldn’t have gotten close to my 60fps benchmark for large scenes.&lt;/p&gt;

&lt;p&gt;For convenience, I decided to use &lt;a href=&quot;http://cocos2d.spritebuilder.com&quot;&gt;Cocos2d&lt;/a&gt; as the graphical core of my project, so I had to figure out a way to wedge MonkVG in there somehow. 
Fortunately, it was fairly simple to write a Cocos2d &lt;code&gt;CCNode&lt;/code&gt; wrapper around MonkVG’s rendering functions, since each &lt;code&gt;CCNode&lt;/code&gt; in Cocos2d had a lovely overridable &lt;code&gt;draw&lt;/code&gt; method that allowed you to call OpenGL functions directly. (One reason why you might want to use it over SpriteKit!) Still, especially as the project moved forward, the framework was becoming a massive cognitive burden. MonkVG had a fairly old and creaky codebase, and as the hacks I made to enable unsupported features such as real-time color changes piled on, I realized that it would take me forever to actually fix everything up and integrate it into my project in a sensible and modern way. Additionally, the one-VBO-per-curve approach was quickly becoming unwieldily. Already I had to synchronize a ton of state between MonkVG and the rest of my app in order to cache previously-tessellated curves for performance reasons; far more daunting was the idea of cycling VBOs in and out of GPU memory while retaining the underlying geometry client-side, which I wasn’t doing yet. Unfortunately, this was going to be necessary to enable my potentially-infinite canvas, and MonkVG didn’t natively support it.&lt;/p&gt;

&lt;p&gt;At this point, I realized that even though writing my own hardware-accelerated path renderer was probably too much work, my path rendering needs were actually very simple. I didn’t need to create unions of shapes, arbitrary curves, or even strokes! All my note shapes were simple Bézier “tubes” with round endcaps and outlines, and so creating a super-simple note renderer for direct use in Cocos2d would require minimal effort. Better yet, most of the work was done already: for the purpose of creating better outlines, I was already interpolating all of my Bézier curves myself and only using MonkVG to draw and tessellate the final polygon tubes from the perimeter vertices. The only thing I needed to do was to create polygon strips from my points and send them through Cocos2d’s native rendering system, as well as to write a bit of code for the round endcaps. Sure, it bummed me out that this would preclude me from creating more complex and dynamic shapes in the future, but I was on a deadline and the project needed to be shipped. Despite my initial trepidation, the process was extremely quick and only took a couple of days of work.&lt;/p&gt;

&lt;p&gt;As I dove deeper into Cocos2d’s architecture, I was struck by the beauty of its rendering pipeline. Unlike MonkVG, there was no VBO juggling here at all: the geometry for each object in the entire scene graph was sent to the GPU anew in every frame. (I soon learned that this was called “geometry streaming”.) This approach completely eliminated the need to track the mapping between tessellated curves and their corresponding VBOs, eliminating hundreds, if not thousands, of lines of brittle complexity in my app. What’s more, Cocos2d batched draw calls automatically, meaning that all your geometry would automatically coalesce into just a couple of draw calls without having to do any extra work, even if it resided in completely separate &lt;code&gt;CCNode&lt;/code&gt;s. This was a massive benefit I was not expecting!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/pipeline.png&quot; /&gt;
&lt;p&gt;The final path rendering pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;There was a new problem, though. With the new path rendering system (now using geometry streaming), my performance hovered at around 50%-70% of what I was getting in MonkVG. Intuitively, I feared that a fix was impossible: wouldn’t uploading thousands of polygons in every frame be naturally more resource-intensive than storing polygons in VBOs for later reuse? But after some digging, I learned something very interesting: OpenGL ES actually allowed you to map GPU memory directly into a shared application-space buffer, eliminating the need to “upload” your geometry at all! I did a sanity check and realized that there was &lt;em&gt;no way&lt;/em&gt; that copying even hundreds of thousands of polygons to a buffer could be the roadblock. But Cocos2d was already using memory mapping in its renderer! So what was the problem?&lt;/p&gt;

&lt;p&gt;There was another issue with the Cocos2d renderer. If I opened a project with lots of notes, my performance was usually 60fps at the default zoom level. But if I zoomed out (getting lots of notes on screen) and then zoomed back in, the performance dropped to 30fps or lower and then never actually recovered, no matter how closely I zoomed! This didn’t make any sense since my notes were always culled to the current viewport, meaning that performance should have always been identical for any given view. This also never happened in MonkVG.&lt;/p&gt;

&lt;p&gt;I decided to dig even deeper. After several hours of Googling keywords related to geometry streaming versus VBO performance, I zeroed in on a fantastic thread in the OpenGL forums. In this thread, &lt;a href=&quot;https://www.opengl.org/discussion_boards/showthread.php/170118-VBOs-strangely-slow?p=1197780#post1197780&quot;&gt;Rob Barris provided a very clear rundown&lt;/a&gt; of exactly how OpenGL managed memory in streaming situations. As it turned out, there was a certain art to managing your geometry buffers in a way that avoided stalls in the pipeline.&lt;/p&gt;

&lt;p&gt;Digging around in Cocos2d’s renderer, it seemed that the streaming architecture had some inefficiencies and bugs. There was a single memory-mapped buffer that was used for all the geometry, but it got “orphaned” and subsequently re-allocated in every frame. This caused a continuous allocation of up to several megabytes per frame — a significant performance consideration. What’s more, if a given scene was big enough to fill up the buffer, it expanded in place, but then never actually shrank back to its original size once the extra space was no longer needed. This meant that if you happened to render a giant scene — say, requiring a 9MB buffer — you would get an allocation of 9MB in every single frame after that, regardless of its complexity!&lt;/p&gt;

&lt;p&gt;At this point, I had a solid intuition for my next course of action. Rob Barris’s advice, as well as some other references, indicated that it was possible to use the &lt;em&gt;same&lt;/em&gt; buffer over the course of several frames without having to reallocate it. You could simply keep a pointer to the last filled slot in the array and start from there for your next frame. Once you ran out of memory, you could orphan your buffer and have OpenGL allocate you a new one. If you set your sizes correctly, you’d have one large allocation every few frames instead of an allocation in every single frame. In the end, I opted for a slightly simpler (architecturally-speaking) double-buffer solution: two large buffers side-by-side, with one buffer always serving as the main buffer. Once the main buffer ran out of space (over the course of several frames), the other would become the main buffer and allow the first buffer to orphan and reallocate.&lt;/p&gt;

&lt;p&gt;Fixing the renderer required a number of very low-level changes, but it was somewhat easier than expected, largely on account of Cocos2d’s excellent code organization. After making my changes and fixing a couple of Cocos2d bugs along the way, I fired up the app and was delighted to see my old MonkVG framerate — maybe even a little better! Not only did I have my original performance back, but I also gained an immense amount of architectural simplicity along the way.&lt;/p&gt;

&lt;p&gt;In the end, all the goals I set for myself were successfully met. The app does run at 60fps much of the time on my iPad 3, though it’s naturally far more prone to dropping frames than newer devices. (An iPad Air 1 and my iPhone 5s barely dipped below 60fps even in complex scenes.) Real-time tessellation is still something I want to implement for grid scale changes; I doubt I’d be able to truly do it in real-time for a full screen of notes, but I can think of several ways to fake-transform existing tessellated notes while waiting for the correct tessellation to load.&lt;/p&gt;

&lt;p&gt;Finally, I do hope that somebody releases a stable, hardware-accelerated path rendering framework for iOS. It’s sorely needed for vector-based apps with dynamic content!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:why_no_hw_vectors&quot;&gt;
      &lt;p&gt;Curious, I asked programmers.stackexchange.com about this issue and &lt;a href=&quot;http://programmers.stackexchange.com/questions/191472/why-have-hardware-accelerated-vector-graphics-not-taken-off&quot;&gt;got some interesting answers&lt;/a&gt;. &lt;a href=&quot;#fnref:why_no_hw_vectors&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 27 Feb 2016 15:33:37 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2016/02/27/path-rendering-in-composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/02/27/path-rendering-in-composers-sketchpad/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Rethinking Musical Notation with Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad/icon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(1) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(1) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/07/16/composers-sketchpad-adventures-in-icon-design/&quot;&gt;Composer&#39;s Sketchpad: Adventures in Icon Design&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Just last month, I released my first major project for the iPad: &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer’s Sketchpad&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad is an interactive, “doodle-y” take on music sequencing and notation. When you launch the app, you’re presented with a giant canvas that can be panned around with your finger. The canvas is covered with a grid, indicating time on the horizontal axis and pitch on the vertical. To draw musical notes, you hold down the canvas with one finger and draw with another. (You can also zoom using a similar gesture.) Unlike most sequencers, the app lets you start your notes at any time and bend them to any pitch, giving you the ability to sketch out twisted solos and complex rhythms with no extra effort. You can also snap to the gridlines if you wish.&lt;/p&gt;

&lt;center&gt;
&lt;p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;iframe width=&quot;600rem&quot; height=&quot;450rem&quot; src=&quot;https://www.youtube.com/embed/ypsLgTY8NXs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/center&gt;

&lt;p&gt;In the coming months, I’m going to (try to) post a series of articles concerning the technical, design, and marketing aspects of the project. But for now, I’d like to write about the genesis of the idea.&lt;/p&gt;

&lt;p&gt;I made Composer’s Sketchpad for two reasons.&lt;/p&gt;

&lt;p&gt;The first was my inability to compose music using the tools I had at hand. Today, with the help of computers, creativity in practically all artistic mediums is blooming. Everything is digital, iterable, undoable: instead of having to buy messy paints or develop your film after every 30 shots, you can open your favorite graphics editor, grab your tablet, and tear through hundreds of sketches at a time. This reduction in creative friction must be an astounding source of growth for the arts!&lt;/p&gt;

&lt;p&gt;Unfortunately, I feel composition has not quite made the same magnitude of leap forward. While the studios of the past can now be entirely replaced by powerful tools running on our computers, most of them are dreadnoughts aimed at heavy production or performance use. The rhetorical art of composition — the process of taking musical notes and putting them in an order that sounds good and meaningful to our ears — has yet to see the equivalent of a Word or a Photoshop. To put it another way, there’s very little music software out there with a tight creative feedback loop specifically tuned to plonking down a few notes, playing them back, and repeating the process until you get something that sounds good. You could certainly use a DAW sequencer, Finale, or even a tracker for that purpose — many composers successfully do! — but I’ve found that the delay between editing and playback is still too high in those applications, to say nothing of the often immense UX hurdles. Worse yet, barely any of these tools are optimized for touch or stylus input — surely an ideal interface for composing at the piano (or under a tree)!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/flstudio.jpg&quot; /&gt;
&lt;p&gt;DAW interfaces tend to be aimed at production, not freehand composition.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Tooling aside, many musicians write music by simply improvising on their instrument and recording the results. Sadly, this is not a tenable approach for amateurs. Whenever I’m sitting at the piano and get the flicker of an interesting idea, I always lose the thread by the time I get around to actually playing or writing it down. I’d need many more years of practice to actually be able to compose anything interesting using this approach.&lt;/p&gt;

&lt;p&gt;It was clear that my musical life was missing a tool that allowed for the rapid entry and immediate playback of notes — a kind of interactive, audible sheet music. Whenever inspiration struck, I wanted the ability to pull out my tablet or phone and jot down my musical thoughts in a matter of seconds.&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad fulfills this demand by heavily prioritizing navigation and note entry above all else. There’s no mode for moving around the canvas: you simply swipe like in a mapping app. To make a note, you hold down the canvas with one finger and draw with another, as if applying pressure to a particularly slippery piece of paper. Undo/redo and erase are right there in the corners, and the playback controls are within easy reach at the bottom of the screen. (Your current viewport is also your playback position.) A piece is divided into several layers of notes — each with their own instrument or percussion set — and the active layer can be changed with a simple swipe of the instrument box at the top of the screen. Doing this brightens the active layer and dims any background layers, allowing you to edit the current layer exclusively while still having a sense of what all the other instruments are doing. In short, there’s barely any cognitive overhead: every tool you need to rapidly sketch out music is right there in front of you.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/ui.png&quot; /&gt;
&lt;p&gt;The UI in Composer&#39;s Sketchpad is carefully tuned to enable a tight creative feedback loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The other problem I wanted to tackle was the antiquated nature of sheet music.&lt;/p&gt;

&lt;p&gt;I love classical and popular music alike. Unfortunately, popular music differs enough from classical to make traditional notation simply the wrong tool for the job. For one, practically every piece of popular music uses syncopated rhythm. Most classical music is fairly on-the-beat, and notation is designed with that in mind. With syncopated music, you usually end up with a mess of rests, ties, and dotted notes that is hard to read and write. Modern music is also irreverent when it comes to duration and pitch. Solos are a great example: they’re fluid and expressive, and each note only lasts and remains on pitch as long as the performer wishes. Once again, notating them is an incredible pain.&lt;/p&gt;

&lt;p&gt;What about music from other cultures? The scales for many musical traditions differ vastly from our own. Simply put, their notes fit between our notes! Composers shouldn’t have to switch their system of notation just to play around with different kinds of music.&lt;/p&gt;

&lt;p&gt;What about our own (Western) myriad of different scales and tunings? We’re so used to Equal Temperament that we’ve completely forgotten the incredible polyculture of tunings in early music, to say nothing of the microtonal experimentation of the 20th century. Indeed, the &lt;a href=&quot;http://www.huygens-fokker.org/scala/&quot;&gt;Scala microtonal tuning archive&lt;/a&gt; has over 4000 scales! All impossible to convey with traditional notation.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/solo.png&quot; /&gt;
&lt;p&gt;An excerpt from &quot;Comfortably Numb&quot;. Solos are cumbersome to write out using traditional notation.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Instead of trying to shoehorn all music into a Western style of notation invented several centuries ago, it occurred to me that maybe an entirely new approach was needed. In fact, why encode the music at all? The barest, most obvious form of notation is a graph of time and pitch. This system would have been too difficult for musicians to read from and write to back in the day, but that’s not really an issue when the music can play itself and your musical canvas is tactile and effectively infinite. It seemed like the best shot at covering all bases.&lt;/p&gt;

&lt;p&gt;In Composer’s Sketchpad, each “note” is a simple array of times and pitches. Note names, measures, and time signatures still exist, but only as a grid or stencil over the absolute time/pitch graph — a feature of the tooling, not an intrinsic part of the piece. You use the current scale and meter grid to align and snap your notes, but you can also change them up for use in later sections without having to worry about your existing music. Under the hood, it’s all the same: scattered little point clouds of absolute time and pitch.&lt;/p&gt;

&lt;p&gt;As a result, writing out complicated and expressive sections of music in Composer’s Section no longer feels like caging a canary. The grid is your friend, not an oppressive bureaucrat. If you want to write more conventional music, snapping to time or pitch works just as it did with traditional notation. But turn snapping off and you can bend your notes or extend them out to the exact length of time needed. Because the shape of your notes corresponds exactly to their time and pitch, a quick glance at your music tells you exactly how it’s going to sound without having to decode a mess of symbols in your head. And you can edit any part of any section or overlap as many notes as you like without having to worry about fulfilling the “note quota” of a measure, as you constantly have to do in sheet music apps like Finale.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/melody.png&quot; /&gt;
&lt;p&gt;&quot;Comfortably Numb&quot; again in Composer&#39;s Sketchpad, transcribed by ear. This style of notation is great for conveying expressive melodic lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now, a bit of a pretentious digression, as well as a few words about the future of the project!&lt;/p&gt;

&lt;p&gt;Most programmers today are very excited about building for the web. Each day, the front page of Hacker News is filled with stories of up-and-coming web-based startups as well as new Javascript frameworks and libraries. There’s also a lot of related talk about how pay-to-own software is going away, and about how subscriptions, in-app purchases, and advertising are going to replace them.&lt;/p&gt;

&lt;p&gt;Speaking strictly for myself, I can’t stand the idea of my software residing permanently on other people’s servers or relying on money from other people’s products. For every new and exciting startup that I read about, there’s a related story of yet another acquisition or shutdown flushing years of work down the drain. What were all those man-hours, well-intentioned ideas, and midnight flashes of inspiration good for in the end? No, that style of development is not for me. I don’t want to create services, networks, or support organizations; I want to create beautiful &lt;em&gt;objects&lt;/em&gt;, little bits of clockwork that are both lovely and useful in their whole. Once they’re made, I want to be able to take my hands off them and let them live without my further involvement. I’m not interested in running servers or providing exciting new content patches week after week. You pay once — you get the object. There is certainly room for updates, but only in the interest of making the object better.&lt;/p&gt;

&lt;p&gt;I’m still far from that ideal — for example, in-app purchases might be tempting down the line — but that’s the direction I want to head with my current and future projects.&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad isn’t a profit-driven venture looking for a market or buyer. It’s one of those objects that didn’t exist in the world before I made it, and its reason for being is to help me be creative. I plan to add many new features over the years as my compositional needs develop, and I hope that eventually I’ll be able to port it to other platforms and release the source code for everyone to use. It’s a tool from my own personal toolbox that I’m happy to put out into the world.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/sketches.jpg&quot; /&gt;
&lt;p&gt;Some of the many design sketches made during development.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;cloc&lt;/code&gt;, the project comes in at around 20,000 lines of code. This is a massive leap for me, and I’m incredibly excited to get started on the next 20,000!&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Feb 2016 23:35:12 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2016/02/05/composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/02/05/composers-sketchpad/</guid>
        
        
      </item>
    
      <item>
        <title>The Perfect Travel Gaiwan</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/mug_portrait.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loose-leaf tea is a bit of a finicky hobby. Unlike the boring old teabag, you can’t just dump a bunch of tea leaves in a cup of boiling water and expect good results. At the very least, you need a way to strain your tea leaves quickly and without burning yourself. Many tea geeks enjoy the use of gaiwans for this purpose — small, lidded cups whose shape and thermal properties make them useful as single-serving teapots.&lt;/p&gt;

&lt;p&gt;But what do you do when you travel?&lt;/p&gt;

&lt;p&gt;Gaiwans tend to be made of porcelain or clay, so they’re very fragile. Until recently, I assumed I’d just have to make do with makeshift mug-plus-strainer brews when on the road. But a few months ago, I discovered a wonderful product that effectively fixed this problem, as well as several I didn’t even know I had: the &lt;a href=&quot;http://amzn.to/1ShqqsP&quot;&gt;Asobu Imperial Beverage Insulated Cup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_items.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although not marketed as a travel gaiwan, this product is suited almost perfectly to this role. The lid attaches loosely with a rubber seal, allowing for quick removal and keeping the temperature stable. There’s a hook on the back of the lid that can be used as a handy stopper when tilting it back for straining. The mug is vacuum insulated, allowing you to hold it normally even with boiling hot water inside; there’s no need to perform the crazy hand gymnastics you have to use with an ordinary gaiwan.  The insulation also ensures that the temperature inside the mug remains very hot throughout the steeping process — hotter, I would imagine, than any other material, as barely any heat radiates out! Because the mug is made from steel, you can throw it in your backpack without worrying about it breaking. And brewing aside, it’s great for public transit: if you have a thermos full of hot tea or coffee, you can slowly sip from this mug without burning your hands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_pour.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure, it’s a bit ugly, while my porcelain gaiwan is beautiful. But in all honesty, I’ve been reaching for this mug every time I brew my loose-leaf tea. The practical benefits far outweigh the aesthetic concerns.&lt;/p&gt;

&lt;p&gt;There are a few issues worth mentioning. The shape is far blobbier than it looks in the marketing photos. The paint is of poor quality and has chipped away from the bottom even with fairly light use; I’d recommend getting the stainless steel model and avoiding the colors. But overall, this mug is an incredibly functional and unique product that, to my knowledge, has no rival on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_result.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Dec 2015 02:18:44 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</guid>
        
        
      </item>
    
      <item>
        <title>The Stanley 64oz Classic Vacuum Growler</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/stanley_main.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shortly after I posted my &lt;a href=&quot;/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/&quot;&gt;Klean Kanteen review&lt;/a&gt;, Stanely offered to send me one of their own bottles to play around with: the &lt;a href=&quot;http://amzn.to/1ItRmn0&quot;&gt;64oz Classic Vacuum Growler&lt;/a&gt;. I was quite happy with the build quality of the Stanleys I saw at REI, so at risk of becoming a professional growler reviewer, I figured I’d give this bottle an equally thorough look.&lt;/p&gt;

&lt;h2 id=&quot;construction&quot;&gt;Construction&lt;/h2&gt;

&lt;p&gt;There’s a lot of good things to say about the construction of this growler. The outer shell, painted in the usual Stanley enamel-matte-green, is very solid and attractive in both look and feel. There’s certainly no concern about the coating fading or chipping with use. The plastic is also very smooth and feels higher quality than the typical materials used in these kinds of bottles.&lt;/p&gt;

&lt;p&gt;The latching mechanism that encircles the neck and lid of the bottle is made entirely from plastic. This is very concerning to me. The way it works is very simple: a metal loop, attached to a plastic tab, snags around a plastic hook in the lid and then depresses with a plastic lever. Looking closely at the lower plastic hinge, &lt;a href=&quot;/images/stanley_lower_hinge.jpg&quot;&gt;there are white stress marks where the hinge attaches to the lid&lt;/a&gt;, right out of the box. Similarly, on the upper plastic hook, &lt;a href=&quot;/images/stanley_upper_hinge.jpg&quot;&gt;you can see the plastic starting to wear down and whiten from the shape of the metal loop&lt;/a&gt;. This wasn’t just my bottle, either: every Stanley growler I’ve seen at REI has had these marks. I’d love to be proven wrong, but my feeling is that these parts will be the first to fail.&lt;/p&gt;

&lt;p&gt;On the other hand, the rubber/silicone material used in the gasket feels very sturdy. I expect it to last for a long time.&lt;/p&gt;

&lt;p&gt;The Stanley logo on the side of the bottle looks like a sticker and I’m concerned it will eventually fall off. Compared to the rest of the body it looks a bit cheap.&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;The lid opens very, very smoothly — almost surprisingly so. There’s just enough friction in the joint that it stops &lt;a href=&quot;/images/stanley_cap.jpg&quot;&gt;almost parallel to the neck of the bottle without ever touching the body&lt;/a&gt;. It feels great.&lt;/p&gt;

&lt;p&gt;The latch is slightly problematic in that the lever is very easy to smack against the side of the growler — loud and a bit troubling due to the plastic construction. (But you learn to avoid this fairly quickly.) However, the design is certainly preferable to the Miir-style puzzle-latch. It’s simple and effective.&lt;/p&gt;

&lt;p&gt;This is a wide-mouth bottle, and you can read about the trade-offs in my previous article. (To summarize: I think you will find the small, rounded lip of the Klean Kanteen better for pouring and drinking, but the wide mouth of the Stanley will allow for easier fills as well as use with tea infusers, ice, etc.) This is clearly not meant to be a bottle that you drink straight out of, especially given the &lt;a href=&quot;/images/stanley_top.jpg&quot;&gt;wide ring of plastic around the lip&lt;/a&gt; (though I’ve been doing it a little bit and it’s been fine). While similar in overall design, Stanley’s neck ring looks a lot better than Miir’s. The tolerances are much tighter, though there are still some very small gaps that I fear water might get into.&lt;/p&gt;

&lt;p&gt;Pouring this bottle is very easy. The lid opens perpendicular to the handle, and due to the fact that the plastic latch ring is inset from the actual, metal lip of the bottle by a centimeter or so, you don’t get the usual problem of liquid trickling down the side of the bottle when you start pouring. Even if you pour slowly, the plastic edge acts as a spout and directs the stream right into your glass! I specifically wanted to avoid a handle when picking my previous growler, but after using this one for a while, I’ve come around to it: at 64oz, it’s really the best way to pour out the contents of your growler when full. One minor issue is that, due to the fact that the rubber/silicone on the underside of the lid has a central ring that juts out, liquid can gather and drip from this outcropping when you pour.&lt;/p&gt;

&lt;p&gt;64oz is a lot of fizzy water, so I have not yet tested how well the growler keeps liquids carbonated. However, there was a &lt;em&gt;lot&lt;/em&gt; of suction in the seal after a few hours keeping hot tea, so I think it should perform well in this regard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/stanley_govt_warning.jpg&quot;&gt;The bottom has the volume and government warning engraved&lt;/a&gt;. Hallelujah! No chance of these rubbing off.&lt;/p&gt;

&lt;p&gt;Volume-wise, the space in the neck gives you an extra 4oz or so over the base 64oz.&lt;/p&gt;

&lt;p&gt;This bottle is listed as dishwasher-safe — unusual for thermally-insulated bottles.&lt;/p&gt;

&lt;h2 id=&quot;temperature&quot;&gt;Temperature&lt;/h2&gt;

&lt;p&gt;Due to the fact that this growler holds twice as much water as my Klean Kanteen, I performed two tests: one with 64oz of water and one with 32oz. Since 64oz of water takes a lot longer to change temperature than 32oz, I figured it would be more fair to do it this way for comparison’s sake with previous results. Do note, though, that since there’s a lot more space for the heat to dissipate when filled with 32oz, performance at that level is going to be worse than in a bottle designed to hold 32oz.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;tablecontainer&quot;&gt;
&lt;div class=&quot;tablepadding&quot;&gt;
&lt;table&gt;

&lt;colgroup&gt;
&lt;col class=&quot;ch&quot; /&gt;
&lt;col span=&quot;2&quot; class=&quot;data&quot; /&gt;
&lt;/colgroup&gt;

&lt;tbody&gt;

&lt;tr class=&quot;rh&quot;&gt;
&lt;td class=&quot;corner&quot;&gt;&lt;/td&gt;
&lt;th&gt;Stanley Growler (Filled 64oz)&lt;/th&gt;
&lt;th&gt;Stanley Growler (Filled 32oz)&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;0 minutes&lt;/th&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;td&gt;94.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;8 minutes&lt;/th&gt;
&lt;td&gt;95.1 ℃&lt;/td&gt;
&lt;td&gt;92.7 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;21 minutes&lt;/th&gt;
&lt;td&gt;91.3 ℃&lt;/td&gt;
&lt;td&gt;82.4 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;35 minutes&lt;/th&gt;
&lt;td&gt;90.7 ℃&lt;/td&gt;
&lt;td&gt;80.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;56 minutes&lt;/th&gt;
&lt;td&gt;85.5 ℃&lt;/td&gt;
&lt;td&gt;68.9 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;71 minutes&lt;/th&gt;
&lt;td&gt;84.7 ℃&lt;/td&gt;
&lt;td&gt;67.6 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;98 minutes&lt;/th&gt;
&lt;td&gt;83.6 ℃&lt;/td&gt;
&lt;td&gt;66.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;220 minutes&lt;/th&gt;
&lt;td&gt;79.7 ℃&lt;/td&gt;
&lt;td&gt;61.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Results with 64oz are fantastic and great with 32oz as well, keeping in mind the temperature/volume considerations above.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’m very concerned about the durability of the plastic latch, but overall, this growler feels great. It’s also one of the most attractive 64oz growlers I’ve seen, especially in the flip-top arena. In terms of 64oz, I’d be torn between the Stanley and the Klean Kanteen, but I’d definitely pick the Stanley over the Miir and probably over the Hydro Flask. Having continuously used this growler for a few months with water, tea, and beer and receiving admirable performance in every regard, I give it a thumbs up!&lt;/p&gt;

&lt;p&gt;(Better yet: at the time I wrote this review, Stanley didn’t offer a growler in 32oz size, but it looks like they do now! Definitely worth checking out.)&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Dec 2015 00:58:32 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</guid>
        
        
      </item>
    
      <item>
        <title>iPad Pro + Pencil Slow Motion Bug</title>
        <description>&lt;p&gt;I noticed an interesting problem with the Apple Pencil while developing my app. It seems that if you’re using the Pencil while simultaneously using a gesture recognizer (as, for instance, in a scroll view), touch processing goes into slow motion. (Approximately half-speed, according to some quick measurements.) Seems there’s some sort of interference between Pencil and gesture event processing. Notably, the framerate remains stable while this is happening.&lt;/p&gt;

&lt;p&gt;&lt;iframe class=&quot;youtube&quot; width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/ioPRiHBj8l4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;I noticed that the Paper app also has this problem. Other drawing apps seem to avoid it (accidentally or intentionally) by disabling canvas navigation while drawing. In Procreate, you can adjust the brush sliders while drawing without any slow motion, but I think this has to do with the fact that Procreate uses a custom OpenGL-based implementation for their widgets, not UIGestureRecognizer.&lt;/p&gt;

&lt;p&gt;I can reproduce this bug in Apple’s TouchCanvas demo by sticking a scroll view to the left of the screen and continuously scrolling it while drawing. At first, it behaves correctly. But when the CPU usage hits a high enough level, you get the behavior described above. If you do the drawing with your finger, the problem disappears. The framerate does drop, but the touches don’t continue when you lift your finger; they simply get delivered with less frequency, and the scroll view stops scrolling immediately once you lift your finger.&lt;/p&gt;

&lt;p&gt;My hunch is that the sampling frequency of the Pencil messes up the usual touch handling behavior when under load. That would explain the 2x factor: the Pencil has a 240Hz refresh rate while touches normally get sampled at 120Hz.&lt;/p&gt;

&lt;p&gt;Regardless of whether this is an iOS bug or something I messed up on my end, I’d love to know if there’s a way to fix this! Simultaneously scrolling with your hand while drawing with the Pencil should be a given.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 16:50:30 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Backgroundifier</title>
        <description>&lt;p&gt;I made a Mac app! It’s called &lt;a href=&quot;http://backgroundifier.archagon.net&quot;&gt;Backgroundifier&lt;/a&gt;, and it turns any image into a desktop background. (But it’s better for fine art and illustration.)&lt;/p&gt;

&lt;p&gt;You can pass an image like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-1.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…through the droplet…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-2.png&quot; class=&quot;content&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…to get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-3.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I collect lots of art from websites like &lt;a href=&quot;https://www.reddit.com/r/ImaginaryCityscapes&quot;&gt;/r/imaginarycityscapes&lt;/a&gt; and artist blogs. Unfortunately, there never seems to be enough time in the day to actually sit down and look through it all. As a result, it mostly sits and gathers dust in a directory in my Dropbox — not a great place for art to be.&lt;/p&gt;

&lt;p&gt;So I’ve been thinking of ways to get it in front of my eyes. On a Mac, the desktop background seemed like the perfect place to put it, especially since OSX natively supports randomly rotating your desktop background from a directory of images. Unfortunately, since all my art was in different sizes and aspect ratios, it looked ugly with the default letterbox color that OSX added to compensate.&lt;/p&gt;

&lt;p&gt;After seeing the visual design of &lt;a href=&quot;https://news.ycombinator.com/item?id=8723120&quot;&gt;tomkinstinch’s Artful app&lt;/a&gt;, I realized that images could be framed more cleverly. By processing the image instead of using a solid color, you could create a background that hinted at contents of the image while still being subdued enough to serve as a backdrop. But Artful didn’t support local files; it pulled its art from the web. Furthermore, like many Mac users, I’m a proponent of keeping things close to the defaults. What I wanted was a basic utility that could simply input my images and output the backgrounds, allowing the OS do the background rotation for me. No need to keep any apps open; no compatibility issues; nothing but a basic command line utility with a bit of GUI attached.&lt;/p&gt;

&lt;p&gt;So that’s what I made. In addition to the GUI, the app actually supports command line mode. If you Terminal into the MacOS directory inside the package, you can run the Backgroundifier executable straight from the command line. (On my machine, I’ve even set up an Automator script to watch my input image directory and automatically convert any new arrivals.) Unfortunately, due to sandboxing restrictions, you can only read and write to the ~/Pictures directory unless you use the GUI… but check in the Resources directory in the bundle and you might find something a bit more robust!&lt;/p&gt;

&lt;p&gt;This was mostly a small side project for me, but I couldn’t help but implement a few bits of UI bling. One is the animation of the droplet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-demo2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(That shadow looks better when it’s not in a gif!)&lt;/p&gt;

&lt;p&gt;Unfortunately, doing this on OSX is a bit more tricky than on iOS. Whereas in UIKit, you can access (and transform!) each view’s layer without any issues, this is disabled by default in AppKit. And even if you do enable layer-backed views, transforming them is not officially allowed. One of the reasons UIKit feels so good is because layers are supported on the most fundamental level; I hope that we get a similar framework update for OSX sometime in the near future. Visually, the current tech stack feels like it’s stuck in the 90’s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/archagon/backgroundifier-public&quot;&gt;The app is mostly open source&lt;/a&gt;. I’ve decided to not release my one user interface nib file for now, but everything else is up for grabs. It’s written in Swift 2. (The repo is a bit out of date, but I hope to commit my latest changes in the near future.)&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 17:36:37 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/09/29/backgroundifier/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/09/29/backgroundifier/</guid>
        
        
        <category>releases</category>
        
      </item>
    
  </channel>
</rss>
