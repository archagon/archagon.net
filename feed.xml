<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archagon Was Here (Jekyll Test)</title>
    <description>Archagon was here... or was he? Yes, he was. This is Alexei Baboulevitch&#39;s personal blog webspacehomepage, featuring writing on software development, travel, photography, and more.
</description>
    <link>http://beta-blog.archagon.net/</link>
    <atom:link href="http://beta-blog.archagon.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 21 Jun 2016 19:31:53 -0700</pubDate>
    <lastBuildDate>Tue, 21 Jun 2016 19:31:53 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Headphone Jacks are the New Power Plugs</title>
        <description>&lt;p&gt;Blog comments are out, blog responses are in — and so I thought I’d respond to John Gruber’s recent article titled &lt;a href=&quot;http://daringfireball.net/2016/06/headphone_jacks_are_the_new_floppy_drives&quot;&gt;“Headphone Jacks Are the New Floppy Drives”&lt;/a&gt;. Here’s why I think removing the headphone jack would be a bad idea at this moment in time:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Poor wireless options and standards. I use Bluetooth headphones and I love them, but they’re a world of compromises. Audio quality is far from lossless, and not just because of the codecs: with the sound off, you are likely to hear noise and static from the radio right next to your ear. (This does not bother me, but would drive many people crazy.) Switching between devices is a pain. Pairing is a pain. You have to remember to charge them. There is unbearable latency for games and occasionally even movies. Few audiophile-level headphone makers bother with Bluetooth headphones, leaving us with just the consumer brands. They can only be as powerful as the battery-powered driver. Might Apple introduce a new wireless codec that tackles all of these pain points? Sure. But then we get:&lt;/li&gt;
  &lt;li&gt;Vendor lock-in. Apple Wireless or Lighning headphones wouldn’t be compatible with much else. Not a problem for cheap earbuds, but definitely a big deal for high-quality, $400+ headphones. After years of freedom, audio would be siloed. As Gruber mentions, this is in Apple’s best interests; but among all our gadgets, headphones have always been among the most universal and independent. They are a true analog path between our disparate electronics — an intuitive and surprisingly error-free technolgoy in a world where devices routinely refuse to talk to each other. You wouldn’t find yourself spending an hour helping your mom troubleshoot the headphone jack. This change would be a major pain point, especially when it comes to:&lt;/li&gt;
  &lt;li&gt;Loss of plug-and-play. I constantly plug my headphones from my phone to my laptop and back. Bluetooth can &lt;em&gt;sort of&lt;/em&gt; do this, but it always takes me about a minute with my wireless headphones. With Lightning headphones, it wouldn’t even be a possibility. (Barring Lightning-endowed Macbooks, which would be utterly bizzarre. What else would that port be used for? How would it be differentiated from USB-C?) A once-flexible workflow would be completely subverted.&lt;/li&gt;
  &lt;li&gt;Needless complication. Headphones are a very simple thing: just a wire leading to drivers. Very few things can go wrong in this arrangement, as evidenced by the proven durability and versatility of headphones over the past few decades. Headphone makers have gotten really good at working with these few parameters to create truly world-class audio devices. Indeed, some of the most esteemed headphones in the low-end audiophile space (I’m thinking of Grados) are basically glued together by hand in a workshop. If we start shoving more electronics — Lightning circuitry or a DAC, most obviously — into headphones, we make this proven system far more brittle than it needs to be. Headphones will malfunction in frustrating ways. Noise will be introduced. Designs will become more bloated to accommodate the extra circuitry. Every headphone having its own DAC is like every monitor having its own video card: clearly putting technology on the wrong side of the divide.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is all this for? What do we gain in return?&lt;/p&gt;

&lt;p&gt;In the past, every time a prominent piece of technology was removed from my Apple hardware — most recently the CD drive and the Ethernet port — my response was ambivalent because I had already been happily using the alternative for a while. Wi-Fi, despite its flaws, offered countless advantages over Ethernet, leading to rapid adoption. Steam, iTunes, and Netflix had made me almost forget that CDs were still a thing by the time I got my Retina Macbook Pro. It almost goes without saying that these technologies were standard and universal — nobody would have accepted them otherwise. But there’s no Next Best Thing in headphones. This is an entirely artificial change.&lt;/p&gt;

&lt;p&gt;Were there an existing high-quality wireless standard for headphones, I’d be somewhat on board, especially if the phone could be waterproofed in exchange. But we’re not there yet, and I fear that in this instance, Apple is looking out for their corporate interests instead of their users. When Apple removes features, I can usually envision the “better tomorrow” they’re striving for. Here, what future can we look forward to if we’re all using bloated, proprietary, and fragile headphones that sound like garbage?&lt;/p&gt;

&lt;p&gt;I can already hear the cry that “the average consumer won’t care”. Sure, maybe not. But their listening experience wouldn’t really be improved by the change, their options for audio hardware would become a lot more limited, and their lives would become riddled with new minor frustrations. The “average consumer” doesn’t care about typography, True Tone displays, or Retina graphics, either. But it all adds up. I respect Apple because they’re internally motivated to strive for quality, and a move towards pointless proprietary standards — towards profit-driven mediocrity with the “average consumer” as a scapegoat — would be a sad blow to that image.&lt;/p&gt;

&lt;p&gt;There’s a good chance I’ll keep buying iPhones without a headphone jack, but also a 100% chance I’ll end up carrying a 3.5mm adaptor wherever I go. One more thing to lose. A permanent ugly tail sticking out of Ive’s immaculately-designed round rect.&lt;/p&gt;

&lt;p&gt;Good work, team?&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 18:49:04 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/06/21/headphones/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/06/21/headphones/</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-absolute-pitch/banner.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(3) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(3) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I wanted Composer’s Sketchpad to have the ability to represent musical notes at any pitch. In order to do this, I needed to solve two problems: representing arbitrary pitches internally and making them compatible with MIDI.&lt;/p&gt;

&lt;p&gt;Human perception of pitch follows a logarithmic curve, meaning that a frequency will sound an octave higher when multiplied by two. However, we tend to think of notes in a linear fashion: C4 is a fixed distance from C3 on the piano, just as C3 is from C2.&lt;/p&gt;

&lt;p&gt;The naive approach to representing pitch would be to simply store the frequency in hertz and be done with it. But this didn’t sit right with me: since my canvas depicted pitches linearly like on a piano keyboard, I’d have to be constantly taking the logarithm of my points and subsequently introducing possible floating point errors as we went up the ladder. The pitches would also have to be stored as irrational floating point numbers, making it impossible to tell whether a point is sitting precisely on a pitch gridline.&lt;/p&gt;

&lt;p&gt;So I decided to represent my pitches as &lt;a href=&quot;https://en.wikipedia.org/wiki/Cent_(music)&quot;&gt;cents&lt;/a&gt;. Cents are the linear unit counterpart to frequency: C4 is 1200 cents from C3, and C3 is 1200 cents from C2. (Per equal temperament tuning, each piano key is 100 cents apart from the next.) This means that cents aren’t an absolute unit like pitch, but rather the function of two frequencies: in order to get the expected 1200 cents from C4 (261.6Hz) to C3 (130.8Hz) we take the base-2 logarithm of C4 divided by C3 and multiply by 1200. As convenient as these units were, I still needed to represent my points in an absolute way, and so I created an internal unit of “absolute cents”: simply the number of cents a pitch is from A440. If you peek inside a Composer’s Sketchpad JSON file, you’ll see that C4 has a value of -900, B4 a value of -1000, etc. Mathemtacially convenient and human-readable!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-absolute-pitch/cents.png&quot; /&gt;
&lt;p&gt;Different representations of pitch for the inflection points on a single note.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The second problem was a little trickier. Internally, the app was using the built-in MIDI functionality found on iOS, in the form of &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/AudioToolbox/Reference/MusicPlayerServices_Reference/index.html&quot;&gt;MusicPlayer&lt;/a&gt; and AUMIDISynth. Unfortunately, traditional MIDI — having been designed in the stone age of computing — didn’t support arbitrary pitch values. Instead, you were given a measly 128 MIDI notes, each corresponding to a note on a standard, equally-tempered (and slightly extended) piano. This was great for interfacing with hardware MIDI keyboards, but hardly appropriate for playing back arbitrary pitches.&lt;/p&gt;

&lt;p&gt;(To be clear: MIDI is simply a standard for sending instructions to a synthesizer. While the standard is very limited and fiddly, it does have the advantage of being supported ubiquitously. You can also save your MIDI packets to a file and use it with a wide variety of software. However, synthesizers themselves are usually much more robust. When interfacing with them directly, you may well be able to play arbitrary pitches and use other custom functionality. The thing you’d lose by going this route is compatibility with existing technology, which is frankly a very big hurdle.)&lt;/p&gt;

&lt;p&gt;There are several ways to alter the pitch of a MIDI note, some more widely supported than others. The most common is using the pitch-bend wheel. Another is using the &lt;a href=&quot;https://en.wikipedia.org/wiki/MIDI_Tuning_Standard&quot;&gt;MIDI Tuning “Standard”&lt;/a&gt; (which is in fact hardly supported anywhere). Yet another is using polyphonic aftertouch, but only after setting up your synthesizer to correctly parse the signals. For its ubiquity and semantic correctness, I decided to go with the pitch-bending approach. To play back an arbitrary pitch, I’d simply play the closest MIDI note and then bend it up or down to the desired frequency. However, there were two issues with this approach. First, the pitch-bend wheel applied bending to the entire keyboard range, not just individual notes. This meant that with the naive implementation, you could only play a single arbitrary pitch at a time! Second, the default range for the entire pitch-bend wheel was a measly whole tone up or down, which was simply insufficient for arbitrary bends. (For wider bends, one might consider getting around this problem by bending to a note, stopping the first note, playing the second note, and continuing the bend. However, this sounds pretty poor due to the fact that most instruments have a distinctive-sounding “attack” that appears as soon as you play a note. This makes the bend sound discontinuous at MIDI note boundaries.)&lt;/p&gt;

&lt;p&gt;I’ll get into the specifics of my MIDI architecture in a later article, but in brief, I solved the first problem using MIDI channels and multiple MIDI instruments. A MIDI instrument can often have 16 so-called channels, which are sort of like presets. Each channel has its own setting for instrument, volume, vibrato, and — conveniently — pitch bend, among many other properties. Whenever you play a MIDI note, you assign it to a channel and it plays with the corresponding properties for that channel. For my use case, this meant that if I used each MIDI channel for playing just a single note at a time (as opposed to the usual approach of playing multiple notes per channel and assigning each channel to a unique instrument), I could have 16 notes simultaneously pitch-bending at once! I wanted more polyphonic notes than that, however, so I decided to simply create a new virtual MIDI synth for each instrumental layer in my app: 16 channels per instrument, with 10 maximum instruments at once (for now). Surprisingly, even 10 maxed-out MIDI synths playing simultaneously didn’t peg my iPad 3’s CPU too hard. Kudos to a great audio architecture!&lt;/p&gt;

&lt;p&gt;The second problem — limited pitch-bend range — was solved using a so-called &lt;a href=&quot;http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/midispec/rpn.htm&quot;&gt;MIDI RPN&lt;/a&gt;, or registered parameter number. These are special, widely-supported MIDI commands that let you configure certain properties of your synth, with one of the primary ones being the range of your pitch-bend wheel. (Note that I say &lt;em&gt;widely&lt;/em&gt; supported, not universally. Only about half the software I’ve tried seems to understand the pitch-bend range RPN. Fortunately, Apple’s built-in synth does just fine.) Rather than having each tick on my virtual pitch-bend wheel correspond to 0.024 cents (as is the default), I sent an RPN command at the start of playback to make each tick equal to one cent. Completely impractical for a physical weel, but quite conveinent for our use case! (Incidentally, this makes the new pitch-bend range +/- almost 7 octaves. Except for the most esoteric use cases, it’s totally unnecessary to go any further than that, since even a pitch-bend of a single octave sounds pretty terrible on most synths.)&lt;/p&gt;

&lt;p&gt;All in all, it’s a messy, imperfect system, but it gets the job done. I can take a bunch of pitches stored as “absolute cents” in my JSON file, push them through a few conversion functions, retrieve a set of MIDI packets on the other end, send them to a bunch of virtual MIDI synths, and have them sound as the correct, precise audio frequencies through my speakers. Maybe someday a more modern standard like OSC will reign supreme and allow this sort of architecture to be radically simplified, but for now, we’re unfortunately a bit stuck in the 80’s.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 01:18:04 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/</guid>
        
        
      </item>
    
      <item>
        <title>Path Rendering in Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad-rendering/rendering.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(2) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(2) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Before starting any work on Composer’s Sketchpad, I had to ask myself: was the app as I envisioned it even possible to make? My initial goals were as follows:&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;important_list&quot;&gt;
    &lt;ol&gt;
      &lt;li&gt;Have an (effectively) infinite canvas with a large number of notes visible at once.&lt;/li&gt;
      &lt;li&gt;Allow the canvas to zoom and pan with without any lag.&lt;/li&gt;
      &lt;li&gt;Allow the canvas to zoom without the notes losing any sharpness.&lt;/li&gt;
      &lt;li&gt;Have notes belonging to the current layer blur or fade when the layer switches.&lt;/li&gt;
      &lt;li&gt;Allow the notes to stretch and skew when the grid scale changes without distorting their appearance. (I ended up dropping this for the release version.)&lt;/li&gt;
      &lt;li&gt;Have the whole thing run at 60fps on my iPad 3.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I had barely done any graphics programming up to this point, so I had to feel out the limits of OpenGL as I blindly barged ahead — always a painful way to develop a project.&lt;/p&gt;

&lt;p&gt;At first, I briefly considered implementing drawing using Photoshop-like brushes: that is to say, directly toggling pixels on a bitmap as the user moved their fingers around the screen. This seemed appropriate for something that behaved so much like a drawing application. However, I quickly realized that the representation of my notes should really be separate from their rendering (as with any good MVC design), which meant that I couldn’t just save the bitmap and be done with it. Furthermore, the finite resolution of the bitmap presented a number of problems. How could I implement high-quality zoom without having to re-render everything? How would it be possible to have an infinite canvas without having to implement a complex tiled rendering system? (I was aiming for maximum possible simplicity in my architecture at this point.) How could I switch layers seamlessly without storing a bitmap for each layer? It just wasn’t a good fit given the dynamic features of my app.&lt;/p&gt;

&lt;p&gt;So I decided try for a &lt;a href=&quot;https://developer.nvidia.com/nv-path-rendering&quot;&gt;path rendering&lt;/a&gt; approach instead. My musical notes would be stored as points in time/pitch space, and then the renderer would convert them into pleasing, smooth curves to draw on the screen.&lt;/p&gt;

&lt;p&gt;There were two obvious techniques that came to mind. The first was to use the CoreGraphics path renderer in the form of &lt;code&gt;UIBezierCurve&lt;/code&gt;. This approach was compelling because CoreGraphics’ path drawing support was very robust, to the point of being the foundation of heavyweight applications like &lt;a href=&quot;http://www.pixelmator.com/&quot;&gt;Pixelmator&lt;/a&gt;. Strokes, fills, and complex shapes were incredibly simple to define and draw, and it was all built-in and battle-tested by thousands of developers.&lt;/p&gt;

&lt;p&gt;The second approach that I immediately considered was to convert each curve into polygons and draw them using the GPU. My experience with hardware-accelerated vector graphics, though minor, was very positive: performance seemed smooth and stutterless compared to software rendering in the apps that used it, and the artifacts that occurred while waiting for data to load (jagged lines turning into smooth lines) felt a lot more pleasing than those in software renderers (blurry lines turning into crisp lines). Intuitively, even though I didn’t know any of the details at this point, the idea of manipulating groups of polygons on the GPU rather than plotting out curves pixel-by-pixel seemed like a very efficient approach. In addition, I knew that with polygons, scales and other translations would be effectively free.&lt;/p&gt;

&lt;p&gt;Unfortunately, there weren’t any built-in iOS frameworks that allowed me to do this. (Or — so I thought. I later learned that &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/SceneKit/Reference/SCNShape_Class/index.html&quot;&gt;SceneKit had support for path rendering&lt;/a&gt;, but it turned out to be fairly ugly, slow, and not particularly configurable.) I didn’t really feel up to the task of rolling my own solution, so I decided to hunt around for a framework. With high high-DPI displays ruling the roost and minimalist UIs being all the rage, surely somebody had a stable framework for hardware-accelerated path rendering on iOS?&lt;/p&gt;

&lt;p&gt;During my search, I learned of &lt;a href=&quot;https://en.wikipedia.org/wiki/OpenVG&quot;&gt;OpenVG&lt;/a&gt;, the Khronos Group’s standard for hardware-accelerated path rendering. It seemed to be exactly what I was looking for! Unfortunately, the standard appeared to be all but abandoned&lt;sup id=&quot;fnref:why_no_hw_vectors&quot;&gt;&lt;a href=&quot;#fn:why_no_hw_vectors&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, with Nvidia’s &lt;a href=&quot;https://developer.nvidia.com/nv-path-rendering&quot;&gt;NV_path_rendering&lt;/a&gt; being the only other standard trying to take up the mantle. (Naturally, this was not an extension that iOS OpenGL ES supported.) However, I did manage to find an OpenGL ES framework called &lt;a href=&quot;https://github.com/micahpearlman/MonkVG&quot;&gt;MonkVG&lt;/a&gt; that incorporated a subset of OpenVG suitable for my project. Looking at the terrifying, twisted, OpenGL-ES-2-wrapping-OpenGL-ES-1-code, I feared that I might have great difficulty using the framework on iOS. Fortunately, it turned out that MonkVG only handled shaders and polygon drawing, not setting up the context or any other platform-specific technical details. After creating my GL &lt;code&gt;UIView&lt;/code&gt; and fixing a couple of minor errors, I was good to go.&lt;/p&gt;

&lt;p&gt;(Quick aside: over the course of my research, I learned that there were several ways to hardware-accelerate path rendering. MonkVG’s tessellation approach worked fairly efficiently, but it was also imprecise on account of the fact that you ended up with polygon strips in the end. It also required the actual tessellation step to be done on the CPU. In contrast, there are newer approaches that can render the paths directly using shaders. These tend to have high accuracy and detail, and they only require a single bounding-box polygon for the entire shape. Unfortunately, in my limited testing, I found the performance of this approach to be lacking on my iPad 3. Additionally, as I further discuss below, the polygon strip approach turned out to be ideal in the case where shapes needed to be generated once and then cached for future reuse and transformation. From what I can tell, it’s far more difficult to cache rendered curves using the shader approach.)&lt;/p&gt;

&lt;p&gt;Having figured out how to use both frameworks, I made a quick performance prototype: a simple draw loop at 60fps with a set of full-screen, randomly generated Bézier curves in each frame. (I considered this my worst-case scenario, as in the case of changing the width or height scales of my grid.) There were two rendering paths: one for CoreGraphics and one for MonkVG.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/stresstest.png&quot; /&gt;
&lt;p&gt;A randomly-generated scene from the stress test. CoreGraphics couldn&#39;t handle it while MonkVG passed with flying colors.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Sadly, as much as I wanted to stick with the battle-hardened CoreGraphics approach, it wasn’t even able to draw a single animating curve at a solid 60fps on my iPad 3. MonkVG, on the other hand, tore through 10+ curves without breaking a sweat. Graphically, the results of both approaches looked quite similar to me — or at least good enough for the app I was trying to make.&lt;/p&gt;

&lt;p&gt;After closely examining the technical underpinnings of both technologies, I learned that CoreGraphics was doing all of its work on the CPU, while MonkVG was tessellating its curves into polygon strips CPU-side and then sending them to VBOs on the GPU — one per curve. Interestingly, the performance difference still applied even when accounting for the tessellation step. Presumably, this is because drawing multiple polygons is a very fast and parallelizable operation on the GPU, even if they number in the thousands, while generating a Retina-sized Bézier curve on the CPU requires you to touch tens of thousands of pixels by “hand”. (But don’t quote me on that — I am definitely still a novice in this area.) It also helps that MonkVG is much less precise than CoreGraphics in its tessellation.&lt;/p&gt;

&lt;p&gt;Despite these finds, I really wanted to work with CoreGraphics, and so I attempted to return to the technology a number of times during my project. (Perhaps I missed something that would account for the massive performance difference?) Notably, I tried using it together with &lt;code&gt;CATiledLayer&lt;/code&gt;, hoping that this particular optimization would offset the inefficiencies of the software render. But even though I could now pan and zoom at 60fps, the chunks loaded far, &lt;em&gt;far&lt;/em&gt; too slowly for realtime use — I’m talking on the order of several seconds whenever you zoomed in. So that was that.&lt;/p&gt;

&lt;p&gt;For much of the project, owing to my inexperience, I was burdened with the question of the framerate cap. If everything was done perfectly, how high could I go? After getting caching and draw call batching working correctly, my MonkVG implementation yielded an acceptable framerate of 30-60fps in the general case, but I still wondered if I was an order of magnitude off on account of my incompetence. How did Apple Maps manage to work so smoothly with so many shapes on screen? How did web browsers manage to display thousands of character paths — possibly with transforms! — and still attain smooth performance? In truth, the geometry I was showing on screen was fairly complex: each quarter-measure note had about 300 triangles once you included the outline and endcaps, leading to an upper bound of almost 400,000 triangles on screen for a dense piece (12 notes, or 4 chords, per measure per layer, with 10 full layers and 10 measures on screen). Surely a breeze for modern machines, but quite a lot to handle for an old iPad! It’s always important to be able to answer the question, “where is all that performance going?”, and in my case it was going towards the multitude of dynamic features in my app.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/curves.png&quot; /&gt;
&lt;p&gt;The mesh structure of a note. Each blue dot is a recorded time/pitch sample. Having a screen full of these can be surprisingly performance-intensive!&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In retrospect, it was quite fortunate that I just happened to fall into the optimal rendering implementation for my project. My path rendering requirements were a little different from the norm: after eliminating point #5 from my initial goal list, I no longer needed most of my curves to be dynamic. The only curves that actually changed their structure from frame to frame were those belonging to the notes currently being drawn or erased — and even those were localized to the point of editing, since my notes were comprised of multiple tiny Bézier segments chained together. (I’ll talk details in a later article.) Instead, my highest priority was to translate and scale my notes at a constant 60fps while still preserving their sharpness, and polygons happened to be uniquely qualified for this task. At the expense of jaggedness on close zoom — fine by me — polygon tessellation effectively gave me infinite resolution along with free transforms. They were also perfectly suited for caching: once tessellated, I could store the vertices of the generated polygons for all my note objects without wasting too much space, wheareas doing the same with textures would have quickly filled up my memory. (To say nothing of looking terribly ugly when scaled.) Better yet, I eventually learned from profiling that it was the tessellation step — not drawing — that was the biggest roadblock in my path rendering implementation, so caching was absolutely critical to getting the performance I needed! Had I used a shader-based approach, I would have had to write a ton of additional code to enable caching, and it &lt;em&gt;still&lt;/em&gt; probably wouldn’t have gotten close to my 60fps benchmark for large scenes.&lt;/p&gt;

&lt;p&gt;For convenience, I decided to use &lt;a href=&quot;http://cocos2d.spritebuilder.com&quot;&gt;Cocos2d&lt;/a&gt; as the graphical core of my project, so I had to figure out a way to wedge MonkVG in there somehow. 
Fortunately, it was fairly simple to write a Cocos2d &lt;code&gt;CCNode&lt;/code&gt; wrapper around MonkVG’s rendering functions, since each &lt;code&gt;CCNode&lt;/code&gt; in Cocos2d had a lovely overridable &lt;code&gt;draw&lt;/code&gt; method that allowed you to call OpenGL functions directly. (One reason why you might want to use it over SpriteKit!) Still, especially as the project moved forward, the framework was becoming a massive cognitive burden. MonkVG had a fairly old and creaky codebase, and as the hacks I made to enable unsupported features such as real-time color changes piled on, I realized that it would take me forever to actually fix everything up and integrate it into my project in a sensible and modern way. Additionally, the one-VBO-per-curve approach was quickly becoming unwieldily. Already I had to synchronize a ton of state between MonkVG and the rest of my app in order to cache previously-tessellated curves for performance reasons; far more daunting was the idea of cycling VBOs in and out of GPU memory while retaining the underlying geometry client-side, which I wasn’t doing yet. Unfortunately, this was going to be necessary to enable my potentially-infinite canvas, and MonkVG didn’t natively support it.&lt;/p&gt;

&lt;p&gt;At this point, I realized that even though writing my own hardware-accelerated path renderer was probably too much work, my path rendering needs were actually very simple. I didn’t need to create unions of shapes, arbitrary curves, or even strokes! All my note shapes were simple Bézier “tubes” with round endcaps and outlines, and so creating a super-simple note renderer for direct use in Cocos2d would require minimal effort. Better yet, most of the work was done already: for the purpose of creating better outlines, I was already interpolating all of my Bézier curves myself and only using MonkVG to draw and tessellate the final polygon tubes from the perimeter vertices. The only thing I needed to do was to create polygon strips from my points and send them through Cocos2d’s native rendering system, as well as to write a bit of code for the round endcaps. Sure, it bummed me out that this would preclude me from creating more complex and dynamic shapes in the future, but I was on a deadline and the project needed to be shipped. Despite my initial trepidation, the process was extremely quick and only took a couple of days of work.&lt;/p&gt;

&lt;p&gt;As I dove deeper into Cocos2d’s architecture, I was struck by the beauty of its rendering pipeline. Unlike MonkVG, there was no VBO juggling here at all: the geometry for each object in the entire scene graph was sent to the GPU anew in every frame. (I soon learned that this was called “geometry streaming”.) This approach completely eliminated the need to track the mapping between tessellated curves and their corresponding VBOs, eliminating hundreds, if not thousands, of lines of brittle complexity in my app. What’s more, Cocos2d batched draw calls automatically, meaning that all your geometry would automatically coalesce into just a couple of draw calls without having to do any extra work, even if it resided in completely separate &lt;code&gt;CCNode&lt;/code&gt;s. This was a massive benefit I was not expecting!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad-rendering/pipeline.png&quot; /&gt;
&lt;p&gt;The final path rendering pipeline.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;There was a new problem, though. With the new path rendering system (now using geometry streaming), my performance hovered at around 50%-70% of what I was getting in MonkVG. Intuitively, I feared that a fix was impossible: wouldn’t uploading thousands of polygons in every frame be naturally more resource-intensive than storing polygons in VBOs for later reuse? But after some digging, I learned something very interesting: OpenGL ES actually allowed you to map GPU memory directly into a shared application-space buffer, eliminating the need to “upload” your geometry at all! I did a sanity check and realized that there was &lt;em&gt;no way&lt;/em&gt; that copying even hundreds of thousands of polygons to a buffer could be the roadblock. But Cocos2d was already using memory mapping in its renderer! So what was the problem?&lt;/p&gt;

&lt;p&gt;There was another issue with the Cocos2d renderer. If I opened a project with lots of notes, my performance was usually 60fps at the default zoom level. But if I zoomed out (getting lots of notes on screen) and then zoomed back in, the performance dropped to 30fps or lower and then never actually recovered, no matter how closely I zoomed! This didn’t make any sense since my notes were always culled to the current viewport, meaning that performance should have always been identical for any given view. This also never happened in MonkVG.&lt;/p&gt;

&lt;p&gt;I decided to dig even deeper. After several hours of Googling keywords related to geometry streaming versus VBO performance, I zeroed in on a fantastic thread in the OpenGL forums. In this thread, &lt;a href=&quot;https://www.opengl.org/discussion_boards/showthread.php/170118-VBOs-strangely-slow?p=1197780#post1197780&quot;&gt;Rob Barris provided a very clear rundown&lt;/a&gt; of exactly how OpenGL managed memory in streaming situations. As it turned out, there was a certain art to managing your geometry buffers in a way that avoided stalls in the pipeline.&lt;/p&gt;

&lt;p&gt;Digging around in Cocos2d’s renderer, it seemed that the streaming architecture had some inefficiencies and bugs. There was a single memory-mapped buffer that was used for all the geometry, but it got “orphaned” and subsequently re-allocated in every frame. This caused a continuous allocation of up to several megabytes per frame — a significant performance consideration. What’s more, if a given scene was big enough to fill up the buffer, it expanded in place, but then never actually shrank back to its original size once the extra space was no longer needed. This meant that if you happened to render a giant scene — say, requiring a 9MB buffer — you would get an allocation of 9MB in every single frame after that, regardless of its complexity!&lt;/p&gt;

&lt;p&gt;At this point, I had a solid intuition for my next course of action. Rob Barris’s advice, as well as some other references, indicated that it was possible to use the &lt;em&gt;same&lt;/em&gt; buffer over the course of several frames without having to reallocate it. You could simply keep a pointer to the last filled slot in the array and start from there for your next frame. Once you ran out of memory, you could orphan your buffer and have OpenGL allocate you a new one. If you set your sizes correctly, you’d have one large allocation every few frames instead of an allocation in every single frame. In the end, I opted for a slightly simpler (architecturally-speaking) double-buffer solution: two large buffers side-by-side, with one buffer always serving as the main buffer. Once the main buffer ran out of space (over the course of several frames), the other would become the main buffer and allow the first buffer to orphan and reallocate.&lt;/p&gt;

&lt;p&gt;Fixing the renderer required a number of very low-level changes, but it was somewhat easier than expected, largely on account of Cocos2d’s excellent code organization. After making my changes and fixing a couple of Cocos2d bugs along the way, I fired up the app and was delighted to see my old MonkVG framerate — maybe even a little better! Not only did I have my original performance back, but I also gained an immense amount of architectural simplicity along the way.&lt;/p&gt;

&lt;p&gt;In the end, all the goals I set for myself were successfully met. The app does run at 60fps much of the time on my iPad 3, though it’s naturally far more prone to dropping frames than newer devices. (An iPad Air 1 and my iPhone 5s barely dipped below 60fps even in complex scenes.) Real-time tessellation is still something I want to implement for grid scale changes; I doubt I’d be able to truly do it in real-time for a full screen of notes, but I can think of several ways to fake-transform existing tessellated notes while waiting for the correct tessellation to load.&lt;/p&gt;

&lt;p&gt;Finally, I do hope that somebody releases a stable, hardware-accelerated path rendering framework for iOS. It’s sorely needed for vector-based apps with dynamic content!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:why_no_hw_vectors&quot;&gt;
      &lt;p&gt;Curious, I asked programmers.stackexchange.com about this issue and &lt;a href=&quot;http://programmers.stackexchange.com/questions/191472/why-have-hardware-accelerated-vector-graphics-not-taken-off&quot;&gt;got some interesting answers&lt;/a&gt;. &lt;a href=&quot;#fnref:why_no_hw_vectors&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 27 Feb 2016 15:33:37 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2016/02/27/path-rendering-in-composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/02/27/path-rendering-in-composers-sketchpad/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Rethinking Musical Notation with Composer&#39;s Sketchpad</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/composers-sketchpad/icon.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- TODO: move most of this to one of the global scss files --&gt;

&lt;style&gt;
.toc {
  margin-top: 2em;
  margin-bottom: 2em;
  padding: 1em;
  margin-left: auto;
  margin-right: auto;
  border-style: solid;
  border-width: 0.2em;
  border-color: #93d7ff;
  border-radius: 2em;
  width: 80%;
  background-color: #c6eaff; }

.toc_header {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row; }

.toc_header {
  text-align: left;
  margin-bottom: 0.75em !important; }

.toc_header &gt; * {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  margin-left: 0.5em !important;
  margin-right: 0.5em !important;
  padding: 0; }

.toc_header :first-child {
  margin-left: 0 !important; }

.toc_header :last-child {
  margin-right: 0 !important; }

.toc_header &gt; p {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  color: #444;
  font-weight: 500;
  /*line-height: 140%;*/ }

.toc_header &gt; a {
  min-width: 5em;
  max-width: 5em; }

.toc_links {
  /*text-align: center;*/ }

.toc_links &gt; ol {
  font-family: &#39;Avenir Next&#39;, &#39;Helvetica&#39;, &#39;Arial&#39;, sans-serif;
  font-size: 1.1em;
  font-weight: 500; }

.toc_links &gt; ol {
  margin: 0;
  list-style-position: inside;
  counter-reset: i 0; }

.toc_links li {
  padding: 0.15em 0.5em 0.15em 0.5em; }

.toc a {
  text-decoration: underline; }

&lt;/style&gt;

&lt;style&gt;
.toc_links &gt; ol li:nth-child(1) {
/*color: darkgreen;*/
color: green;
border-radius: 0.5em;
background-color: lightgreen;
/*border: 1px dashed green;*/
}
.toc_links &gt; ol li:nth-child(1) a {
text-decoration: none;
pointer-events: none;
cursor: default;
color: inherit;
text-decoration: inherit;
}
&lt;/style&gt;

&lt;p&gt;
&lt;div class=&quot;toc&quot;&gt;
    &lt;div class=&quot;toc_header&quot;&gt;
        &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;&lt;img src=&quot;/images/composers_sketchpad_icon.png&quot; /&gt;&lt;/a&gt;
        &lt;p&gt;This blog post is part of a series on the development of &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer&#39;s Sketchpad&lt;/a&gt;, a new iPad app for making musical rough drafts and doodles.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;toc_links&quot;&gt;
        &lt;ol&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/05/composers-sketchpad&quot;&gt;Rethinking Musical Notation with Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/02/27/path-rendering-in-composers-sketchpad&quot;&gt;Path Rendering in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;/2016/03/24/liberating-pitch-and-taming-midi-in-composers-sketchpad/&quot;&gt;Liberating Pitch and Taming MIDI in Composer&#39;s Sketchpad&lt;/a&gt;&lt;/li&gt;
        &lt;/ol&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Just last month, I released my first major project for the iPad: &lt;a href=&quot;http://www.composerssketchpad.com&quot;&gt;Composer’s Sketchpad&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad is an interactive, “doodle-y” take on music sequencing and notation. When you launch the app, you’re presented with a giant canvas that can be panned around with your finger. The canvas is covered with a grid, indicating time on the horizontal axis and pitch on the vertical. To draw musical notes, you hold down the canvas with one finger and draw with another. (You can also zoom using a similar gesture.) Unlike most sequencers, the app lets you start your notes at any time and bend them to any pitch, giving you the ability to sketch out twisted solos and complex rhythms with no extra effort. You can also snap to the gridlines if you wish.&lt;/p&gt;

&lt;center&gt;
&lt;p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;iframe width=&quot;600rem&quot; height=&quot;450rem&quot; src=&quot;https://www.youtube.com/embed/ypsLgTY8NXs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/center&gt;

&lt;p&gt;In the coming months, I’m going to (try to) post a series of articles concerning the technical, design, and marketing aspects of the project. But for now, I’d like to write about the genesis of the idea.&lt;/p&gt;

&lt;p&gt;I made Composer’s Sketchpad for two reasons.&lt;/p&gt;

&lt;p&gt;The first was my inability to compose music using the tools I had at hand. Today, with the help of computers, creativity in practically all artistic mediums is blooming. Everything is digital, iterable, undoable: instead of having to buy messy paints or develop your film after every 30 shots, you can open your favorite graphics editor, grab your tablet, and tear through hundreds of sketches at a time. This reduction in creative friction must be an astounding source of growth for the arts!&lt;/p&gt;

&lt;p&gt;Unfortunately, I feel composition has not quite made the same magnitude of leap forward. While the studios of the past can now be entirely replaced by powerful tools running on our computers, most of them are dreadnoughts aimed at heavy production or performance use. The rhetorical art of composition — the process of taking musical notes and putting them in an order that sounds good and meaningful to our ears — has yet to see the equivalent of a Word or a Photoshop. To put it another way, there’s very little music software out there with a tight creative feedback loop specifically tuned to plonking down a few notes, playing them back, and repeating the process until you get something that sounds good. You could certainly use a DAW sequencer, Finale, or even a tracker for that purpose — many composers successfully do! — but I’ve found that the delay between editing and playback is still too high in those applications, to say nothing of the often immense UX hurdles. Worse yet, barely any of these tools are optimized for touch or stylus input — surely an ideal interface for composing at the piano (or under a tree)!&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/flstudio.jpg&quot; /&gt;
&lt;p&gt;DAW interfaces tend to be aimed at production, not freehand composition.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Tooling aside, many musicians write music by simply improvising on their instrument and recording the results. Sadly, this is not a tenable approach for amateurs. Whenever I’m sitting at the piano and get the flicker of an interesting idea, I always lose the thread by the time I get around to actually playing or writing it down. I’d need many more years of practice to actually be able to compose anything interesting using this approach.&lt;/p&gt;

&lt;p&gt;It was clear that my musical life was missing a tool that allowed for the rapid entry and immediate playback of notes — a kind of interactive, audible sheet music. Whenever inspiration struck, I wanted the ability to pull out my tablet or phone and jot down my musical thoughts in a matter of seconds.&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad fulfills this demand by heavily prioritizing navigation and note entry above all else. There’s no mode for moving around the canvas: you simply swipe like in a mapping app. To make a note, you hold down the canvas with one finger and draw with another, as if applying pressure to a particularly slippery piece of paper. Undo/redo and erase are right there in the corners, and the playback controls are within easy reach at the bottom of the screen. (Your current viewport is also your playback position.) A piece is divided into several layers of notes — each with their own instrument or percussion set — and the active layer can be changed with a simple swipe of the instrument box at the top of the screen. Doing this brightens the active layer and dims any background layers, allowing you to edit the current layer exclusively while still having a sense of what all the other instruments are doing. In short, there’s barely any cognitive overhead: every tool you need to rapidly sketch out music is right there in front of you.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/ui.png&quot; /&gt;
&lt;p&gt;The UI in Composer&#39;s Sketchpad is carefully tuned to enable a tight creative feedback loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The other problem I wanted to tackle was the antiquated nature of sheet music.&lt;/p&gt;

&lt;p&gt;I love classical and popular music alike. Unfortunately, popular music differs enough from classical to make traditional notation simply the wrong tool for the job. For one, practically every piece of popular music uses syncopated rhythm. Most classical music is fairly on-the-beat, and notation is designed with that in mind. With syncopated music, you usually end up with a mess of rests, ties, and dotted notes that is hard to read and write. Modern music is also irreverent when it comes to duration and pitch. Solos are a great example: they’re fluid and expressive, and each note only lasts and remains on pitch as long as the performer wishes. Once again, notating them is an incredible pain.&lt;/p&gt;

&lt;p&gt;What about music from other cultures? The scales for many musical traditions differ vastly from our own. Simply put, their notes fit between our notes! Composers shouldn’t have to switch their system of notation just to play around with different kinds of music.&lt;/p&gt;

&lt;p&gt;What about our own (Western) myriad of different scales and tunings? We’re so used to Equal Temperament that we’ve completely forgotten the incredible polyculture of tunings in early music, to say nothing of the microtonal experimentation of the 20th century. Indeed, the &lt;a href=&quot;http://www.huygens-fokker.org/scala/&quot;&gt;Scala microtonal tuning archive&lt;/a&gt; has over 4000 scales! All impossible to convey with traditional notation.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/solo.png&quot; /&gt;
&lt;p&gt;An excerpt from &quot;Comfortably Numb&quot;. Solos are cumbersome to write out using traditional notation.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Instead of trying to shoehorn all music into a Western style of notation invented several centuries ago, it occurred to me that maybe an entirely new approach was needed. In fact, why encode the music at all? The barest, most obvious form of notation is a graph of time and pitch. This system would have been too difficult for musicians to read from and write to back in the day, but that’s not really an issue when the music can play itself and your musical canvas is tactile and effectively infinite. It seemed like the best shot at covering all bases.&lt;/p&gt;

&lt;p&gt;In Composer’s Sketchpad, each “note” is a simple array of times and pitches. Note names, measures, and time signatures still exist, but only as a grid or stencil over the absolute time/pitch graph — a feature of the tooling, not an intrinsic part of the piece. You use the current scale and meter grid to align and snap your notes, but you can also change them up for use in later sections without having to worry about your existing music. Under the hood, it’s all the same: scattered little point clouds of absolute time and pitch.&lt;/p&gt;

&lt;p&gt;As a result, writing out complicated and expressive sections of music in Composer’s Section no longer feels like caging a canary. The grid is your friend, not an oppressive bureaucrat. If you want to write more conventional music, snapping to time or pitch works just as it did with traditional notation. But turn snapping off and you can bend your notes or extend them out to the exact length of time needed. Because the shape of your notes corresponds exactly to their time and pitch, a quick glance at your music tells you exactly how it’s going to sound without having to decode a mess of symbols in your head. And you can edit any part of any section or overlap as many notes as you like without having to worry about fulfilling the “note quota” of a measure, as you constantly have to do in sheet music apps like Finale.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/melody.png&quot; /&gt;
&lt;p&gt;&quot;Comfortably Numb&quot; again in Composer&#39;s Sketchpad, transcribed by ear. This style of notation is great for conveying expressive melodic lines.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And now, a bit of a pretentious digression, as well as a few words about the future of the project!&lt;/p&gt;

&lt;p&gt;Most programmers today are very excited about building for the web. Each day, the front page of Hacker News is filled with stories of up-and-coming web-based startups as well as new Javascript frameworks and libraries. There’s also a lot of related talk about how pay-to-own software is going away, and about how subscriptions, in-app purchases, and advertising are going to replace them.&lt;/p&gt;

&lt;p&gt;Speaking strictly for myself, I can’t stand the idea of my software residing permanently on other people’s servers or relying on money from other people’s products. For every new and exciting startup that I read about, there’s a related story of yet another acquisition or shutdown flushing years of work down the drain. What were all those man-hours, well-intentioned ideas, and midnight flashes of inspiration good for in the end? No, that style of development is not for me. I don’t want to create services, networks, or support organizations; I want to create beautiful &lt;em&gt;objects&lt;/em&gt;, little bits of clockwork that are both lovely and useful in their whole. Once they’re made, I want to be able to take my hands off them and let them live without my further involvement. I’m not interested in running servers or providing exciting new content patches week after week. You pay once — you get the object. There is certainly room for updates, but only in the interest of making the object better.&lt;/p&gt;

&lt;p&gt;I’m still far from that ideal — for example, in-app purchases might be tempting down the line — but that’s the direction I want to head with my current and future projects.&lt;/p&gt;

&lt;p&gt;Composer’s Sketchpad isn’t a profit-driven venture looking for a market or buyer. It’s one of those objects that didn’t exist in the world before I made it, and its reason for being is to help me be creative. I plan to add many new features over the years as my compositional needs develop, and I hope that eventually I’ll be able to port it to other platforms and release the source code for everyone to use. It’s a tool from my own personal toolbox that I’m happy to put out into the world.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;caption&quot;&gt;
&lt;img src=&quot;/images/composers-sketchpad/sketches.jpg&quot; /&gt;
&lt;p&gt;Some of the many design sketches made during development.&lt;/p&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;cloc&lt;/code&gt;, the project comes in at around 20,000 lines of code. This is a massive leap for me, and I’m incredibly excited to get started on the next 20,000!&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Feb 2016 23:35:12 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2016/02/05/composers-sketchpad/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2016/02/05/composers-sketchpad/</guid>
        
        
      </item>
    
      <item>
        <title>The Perfect Travel Gaiwan</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/mug_portrait.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loose-leaf tea is a bit of a finicky hobby. Unlike the boring old teabag, you can’t just dump a bunch of tea leaves in a cup of boiling water and expect good results. At the very least, you need a way to strain your tea leaves quickly and without burning yourself. Many tea geeks enjoy the use of gaiwans for this purpose — small, lidded cups whose shape and thermal properties make them useful as single-serving teapots.&lt;/p&gt;

&lt;p&gt;But what do you do when you travel?&lt;/p&gt;

&lt;p&gt;Gaiwans tend to be made of porcelain or clay, so they’re very fragile. Until recently, I assumed I’d just have to make do with makeshift mug-plus-strainer brews when on the road. But a few months ago, I discovered a wonderful product that effectively fixed this problem, as well as several I didn’t even know I had: the &lt;a href=&quot;http://amzn.to/1ShqqsP&quot;&gt;Asobu Imperial Beverage Insulated Cup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_items.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although not marketed as a travel gaiwan, this product is suited almost perfectly to this role. The lid attaches loosely with a rubber seal, allowing for quick removal and keeping the temperature stable. There’s a hook on the back of the lid that can be used as a handy stopper when tilting it back for straining. The mug is vacuum insulated, allowing you to hold it normally even with boiling hot water inside; there’s no need to perform the crazy hand gymnastics you have to use with an ordinary gaiwan.  The insulation also ensures that the temperature inside the mug remains very hot throughout the steeping process — hotter, I would imagine, than any other material, as barely any heat radiates out! Because the mug is made from steel, you can throw it in your backpack without worrying about it breaking. And brewing aside, it’s great for public transit: if you have a thermos full of hot tea or coffee, you can slowly sip from this mug without burning your hands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_pour.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure, it’s a bit ugly, while my porcelain gaiwan is beautiful. But in all honesty, I’ve been reaching for this mug every time I brew my loose-leaf tea. The practical benefits far outweigh the aesthetic concerns.&lt;/p&gt;

&lt;p&gt;There are a few issues worth mentioning. The shape is far blobbier than it looks in the marketing photos. The paint is of poor quality and has chipped away from the bottom even with fairly light use; I’d recommend getting the stainless steel model and avoiding the colors. But overall, this mug is an incredibly functional and unique product that, to my knowledge, has no rival on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_result.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Dec 2015 02:18:44 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</guid>
        
        
      </item>
    
      <item>
        <title>The Stanley 64oz Classic Vacuum Growler</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/stanley_main.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shortly after I posted my &lt;a href=&quot;/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/&quot;&gt;Klean Kanteen review&lt;/a&gt;, Stanely offered to send me one of their own bottles to play around with: the &lt;a href=&quot;http://amzn.to/1ItRmn0&quot;&gt;64oz Classic Vacuum Growler&lt;/a&gt;. I was quite happy with the build quality of the Stanleys I saw at REI, so at risk of becoming a professional growler reviewer, I figured I’d give this bottle an equally thorough look.&lt;/p&gt;

&lt;h2 id=&quot;construction&quot;&gt;Construction&lt;/h2&gt;

&lt;p&gt;There’s a lot of good things to say about the construction of this growler. The outer shell, painted in the usual Stanley enamel-matte-green, is very solid and attractive in both look and feel. There’s certainly no concern about the coating fading or chipping with use. The plastic is also very smooth and feels higher quality than the typical materials used in these kinds of bottles.&lt;/p&gt;

&lt;p&gt;The latching mechanism that encircles the neck and lid of the bottle is made entirely from plastic. This is very concerning to me. The way it works is very simple: a metal loop, attached to a plastic tab, snags around a plastic hook in the lid and then depresses with a plastic lever. Looking closely at the lower plastic hinge, &lt;a href=&quot;/images/stanley_lower_hinge.jpg&quot;&gt;there are white stress marks where the hinge attaches to the lid&lt;/a&gt;, right out of the box. Similarly, on the upper plastic hook, &lt;a href=&quot;/images/stanley_upper_hinge.jpg&quot;&gt;you can see the plastic starting to wear down and whiten from the shape of the metal loop&lt;/a&gt;. This wasn’t just my bottle, either: every Stanley growler I’ve seen at REI has had these marks. I’d love to be proven wrong, but my feeling is that these parts will be the first to fail.&lt;/p&gt;

&lt;p&gt;On the other hand, the rubber/silicone material used in the gasket feels very sturdy. I expect it to last for a long time.&lt;/p&gt;

&lt;p&gt;The Stanley logo on the side of the bottle looks like a sticker and I’m concerned it will eventually fall off. Compared to the rest of the body it looks a bit cheap.&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;The lid opens very, very smoothly — almost surprisingly so. There’s just enough friction in the joint that it stops &lt;a href=&quot;/images/stanley_cap.jpg&quot;&gt;almost parallel to the neck of the bottle without ever touching the body&lt;/a&gt;. It feels great.&lt;/p&gt;

&lt;p&gt;The latch is slightly problematic in that the lever is very easy to smack against the side of the growler — loud and a bit troubling due to the plastic construction. (But you learn to avoid this fairly quickly.) However, the design is certainly preferable to the Miir-style puzzle-latch. It’s simple and effective.&lt;/p&gt;

&lt;p&gt;This is a wide-mouth bottle, and you can read about the trade-offs in my previous article. (To summarize: I think you will find the small, rounded lip of the Klean Kanteen better for pouring and drinking, but the wide mouth of the Stanley will allow for easier fills as well as use with tea infusers, ice, etc.) This is clearly not meant to be a bottle that you drink straight out of, especially given the &lt;a href=&quot;/images/stanley_top.jpg&quot;&gt;wide ring of plastic around the lip&lt;/a&gt; (though I’ve been doing it a little bit and it’s been fine). While similar in overall design, Stanley’s neck ring looks a lot better than Miir’s. The tolerances are much tighter, though there are still some very small gaps that I fear water might get into.&lt;/p&gt;

&lt;p&gt;Pouring this bottle is very easy. The lid opens perpendicular to the handle, and due to the fact that the plastic latch ring is inset from the actual, metal lip of the bottle by a centimeter or so, you don’t get the usual problem of liquid trickling down the side of the bottle when you start pouring. Even if you pour slowly, the plastic edge acts as a spout and directs the stream right into your glass! I specifically wanted to avoid a handle when picking my previous growler, but after using this one for a while, I’ve come around to it: at 64oz, it’s really the best way to pour out the contents of your growler when full. One minor issue is that, due to the fact that the rubber/silicone on the underside of the lid has a central ring that juts out, liquid can gather and drip from this outcropping when you pour.&lt;/p&gt;

&lt;p&gt;64oz is a lot of fizzy water, so I have not yet tested how well the growler keeps liquids carbonated. However, there was a &lt;em&gt;lot&lt;/em&gt; of suction in the seal after a few hours keeping hot tea, so I think it should perform well in this regard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/stanley_govt_warning.jpg&quot;&gt;The bottom has the volume and government warning engraved&lt;/a&gt;. Hallelujah! No chance of these rubbing off.&lt;/p&gt;

&lt;p&gt;Volume-wise, the space in the neck gives you an extra 4oz or so over the base 64oz.&lt;/p&gt;

&lt;p&gt;This bottle is listed as dishwasher-safe — unusual for thermally-insulated bottles.&lt;/p&gt;

&lt;h2 id=&quot;temperature&quot;&gt;Temperature&lt;/h2&gt;

&lt;p&gt;Due to the fact that this growler holds twice as much water as my Klean Kanteen, I performed two tests: one with 64oz of water and one with 32oz. Since 64oz of water takes a lot longer to change temperature than 32oz, I figured it would be more fair to do it this way for comparison’s sake with previous results. Do note, though, that since there’s a lot more space for the heat to dissipate when filled with 32oz, performance at that level is going to be worse than in a bottle designed to hold 32oz.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;tablecontainer&quot;&gt;
&lt;div class=&quot;tablepadding&quot;&gt;
&lt;table&gt;

&lt;colgroup&gt;
&lt;col class=&quot;ch&quot; /&gt;
&lt;col span=&quot;2&quot; class=&quot;data&quot; /&gt;
&lt;/colgroup&gt;

&lt;tbody&gt;

&lt;tr class=&quot;rh&quot;&gt;
&lt;td class=&quot;corner&quot;&gt;&lt;/td&gt;
&lt;th&gt;Stanley Growler (Filled 64oz)&lt;/th&gt;
&lt;th&gt;Stanley Growler (Filled 32oz)&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;0 minutes&lt;/th&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;td&gt;94.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;8 minutes&lt;/th&gt;
&lt;td&gt;95.1 ℃&lt;/td&gt;
&lt;td&gt;92.7 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;21 minutes&lt;/th&gt;
&lt;td&gt;91.3 ℃&lt;/td&gt;
&lt;td&gt;82.4 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;35 minutes&lt;/th&gt;
&lt;td&gt;90.7 ℃&lt;/td&gt;
&lt;td&gt;80.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;56 minutes&lt;/th&gt;
&lt;td&gt;85.5 ℃&lt;/td&gt;
&lt;td&gt;68.9 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;71 minutes&lt;/th&gt;
&lt;td&gt;84.7 ℃&lt;/td&gt;
&lt;td&gt;67.6 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;98 minutes&lt;/th&gt;
&lt;td&gt;83.6 ℃&lt;/td&gt;
&lt;td&gt;66.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;220 minutes&lt;/th&gt;
&lt;td&gt;79.7 ℃&lt;/td&gt;
&lt;td&gt;61.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Results with 64oz are fantastic and great with 32oz as well, keeping in mind the temperature/volume considerations above.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’m very concerned about the durability of the plastic latch, but overall, this growler feels great. It’s also one of the most attractive 64oz growlers I’ve seen, especially in the flip-top arena. In terms of 64oz, I’d be torn between the Stanley and the Klean Kanteen, but I’d definitely pick the Stanley over the Miir and probably over the Hydro Flask. Having continuously used this growler for a few months with water, tea, and beer and receiving admirable performance in every regard, I give it a thumbs up!&lt;/p&gt;

&lt;p&gt;(Better yet: at the time I wrote this review, Stanley didn’t offer a growler in 32oz size, but it looks like they do now! Definitely worth checking out.)&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Dec 2015 00:58:32 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</guid>
        
        
      </item>
    
      <item>
        <title>iPad Pro + Pencil Slow Motion Bug</title>
        <description>&lt;p&gt;I noticed an interesting problem with the Apple Pencil while developing my app. It seems that if you’re using the Pencil while simultaneously using a gesture recognizer (as, for instance, in a scroll view), touch processing goes into slow motion. (Approximately half-speed, according to some quick measurements.) Seems there’s some sort of interference between Pencil and gesture event processing. Notably, the framerate remains stable while this is happening.&lt;/p&gt;

&lt;p&gt;&lt;iframe class=&quot;youtube&quot; width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/ioPRiHBj8l4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;I noticed that the Paper app also has this problem. Other drawing apps seem to avoid it (accidentally or intentionally) by disabling canvas navigation while drawing. In Procreate, you can adjust the brush sliders while drawing without any slow motion, but I think this has to do with the fact that Procreate uses a custom OpenGL-based implementation for their widgets, not UIGestureRecognizer.&lt;/p&gt;

&lt;p&gt;I can reproduce this bug in Apple’s TouchCanvas demo by sticking a scroll view to the left of the screen and continuously scrolling it while drawing. At first, it behaves correctly. But when the CPU usage hits a high enough level, you get the behavior described above. If you do the drawing with your finger, the problem disappears. The framerate does drop, but the touches don’t continue when you lift your finger; they simply get delivered with less frequency, and the scroll view stops scrolling immediately once you lift your finger.&lt;/p&gt;

&lt;p&gt;My hunch is that the sampling frequency of the Pencil messes up the usual touch handling behavior when under load. That would explain the 2x factor: the Pencil has a 240Hz refresh rate while touches normally get sampled at 120Hz.&lt;/p&gt;

&lt;p&gt;Regardless of whether this is an iOS bug or something I messed up on my end, I’d love to know if there’s a way to fix this! Simultaneously scrolling with your hand while drawing with the Pencil should be a given.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 16:50:30 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Backgroundifier</title>
        <description>&lt;p&gt;I made a Mac app! It’s called &lt;a href=&quot;http://backgroundifier.archagon.net&quot;&gt;Backgroundifier&lt;/a&gt;, and it turns any image into a desktop background. (But it’s better for fine art and illustration.)&lt;/p&gt;

&lt;p&gt;You can pass an image like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-1.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…through the droplet…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-2.png&quot; class=&quot;content&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…to get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-3.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I collect lots of art from websites like &lt;a href=&quot;https://www.reddit.com/r/ImaginaryCityscapes&quot;&gt;/r/imaginarycityscapes&lt;/a&gt; and artist blogs. Unfortunately, there never seems to be enough time in the day to actually sit down and look through it all. As a result, it mostly sits and gathers dust in a directory in my Dropbox — not a great place for art to be.&lt;/p&gt;

&lt;p&gt;So I’ve been thinking of ways to get it in front of my eyes. On a Mac, the desktop background seemed like the perfect place to put it, especially since OSX natively supports randomly rotating your desktop background from a directory of images. Unfortunately, since all my art was in different sizes and aspect ratios, it looked ugly with the default letterbox color that OSX added to compensate.&lt;/p&gt;

&lt;p&gt;After seeing the visual design of &lt;a href=&quot;https://news.ycombinator.com/item?id=8723120&quot;&gt;tomkinstinch’s Artful app&lt;/a&gt;, I realized that images could be framed more cleverly. By processing the image instead of using a solid color, you could create a background that hinted at contents of the image while still being subdued enough to serve as a backdrop. But Artful didn’t support local files; it pulled its art from the web. Furthermore, like many Mac users, I’m a proponent of keeping things close to the defaults. What I wanted was a basic utility that could simply input my images and output the backgrounds, allowing the OS do the background rotation for me. No need to keep any apps open; no compatibility issues; nothing but a basic command line utility with a bit of GUI attached.&lt;/p&gt;

&lt;p&gt;So that’s what I made. In addition to the GUI, the app actually supports command line mode. If you Terminal into the MacOS directory inside the package, you can run the Backgroundifier executable straight from the command line. (On my machine, I’ve even set up an Automator script to watch my input image directory and automatically convert any new arrivals.) Unfortunately, due to sandboxing restrictions, you can only read and write to the ~/Pictures directory unless you use the GUI… but check in the Resources directory in the bundle and you might find something a bit more robust!&lt;/p&gt;

&lt;p&gt;This was mostly a small side project for me, but I couldn’t help but implement a few bits of UI bling. One is the animation of the droplet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-demo2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(That shadow looks better when it’s not in a gif!)&lt;/p&gt;

&lt;p&gt;Unfortunately, doing this on OSX is a bit more tricky than on iOS. Whereas in UIKit, you can access (and transform!) each view’s layer without any issues, this is disabled by default in AppKit. And even if you do enable layer-backed views, transforming them is not officially allowed. One of the reasons UIKit feels so good is because layers are supported on the most fundamental level; I hope that we get a similar framework update for OSX sometime in the near future. Visually, the current tech stack feels like it’s stuck in the 90’s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/archagon/backgroundifier-public&quot;&gt;The app is mostly open source&lt;/a&gt;. I’ve decided to not release my one user interface nib file for now, but everything else is up for grabs. It’s written in Swift 2. (The repo is a bit out of date, but I hope to commit my latest changes in the near future.)&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 17:36:37 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/09/29/backgroundifier/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/09/29/backgroundifier/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>The Klean Kanteen 32oz Insulated Stainless Steel Growler (With Swing Lok Cap)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Klean Kanteen Growler Train.jpg&quot; alt=&quot;Great on the train! Now with pizza!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One vital lesson I’ve been recently learning in regards to the pleasures of rampant materialism is that it’s incredibly important to surround yourself with objects that not only work well, but &lt;em&gt;feel&lt;/em&gt; good. Quality finishes; smooth hinges; great materials and top-shelf workmanship. It’s not about pretension or an abstract desire for “good design”. Rather, the aim is to get the objects in your life to radiate just a little warmth your way by virtue of their excellence. Here’s an example of what I mean. A few months ago, I needed to buy a new paper notebook. I was all set to pick up the cheapest one at the grocery like I always do, but this time I decided to peek into a stationary store just to see if something could tempt me away from the budget option. There, I discovered a &lt;a href=&quot;http://www.jennibick.com/products/paper-oh-notebook-yuko-ori&quot;&gt;stunningly beautiful notebook&lt;/a&gt; with a textured, gently undulating cover and perfect pearly pages. I immediately fell in love with it. The sticker price was a shocking $15, and while I berated myself at the time for spending so much money on basically paper, I’ve noticed over the past year that I always feel a little burst of joy whenever I leaf through its pages or run my hands over its cover. Point being, if you surround yourself with enough of these kinds of things, you’ll find yourself smiling when doing something as simple as picking up your favorite pen or putting a pot of water on the stove.&lt;/p&gt;

&lt;p&gt;Unfortunately, this therapeutic attribute is hard to quantify and review. What exactly makes an object feel good? You can have things that are incredibly sturdy but feel poor to use; but it’s also easy to manufacture something that looks great at first but exudes cheapness. No video or photo will do the trick here, and lists of stats and tech specs only confuse the matter. The only reliable way to tell is to actually handle the thing in person.&lt;/p&gt;

&lt;p&gt;Which is why I’ve been spending the past few days obsessively looking for the perfect stainless steel beer growler.&lt;/p&gt;

&lt;p&gt;Some background first. I recently went on a yearlong trip around Europe, and one of my most prized and reliable accessories was a &lt;a href=&quot;http://www.amazon.com/gp/product/B0093ISEPI/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B0093ISEPI&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=BBTYUOK7EVCHHBZD&quot;&gt;Klean Kanteen insulated 20oz bottle&lt;/a&gt;. I happily used it almost every day and I have  hard time imagining travel without it. Unfortunately, it’s gotten pretty banged up to the point where it doesn’t even stand straight, so I’ve been casually keeping an eye out for a new bottle to replace it with. I also discovered the wonders of craft beer during my trip, and I found that many stores and breweries were starting to install growler fill stations: places where you could bring your so-called “growler” (basically a large jug designed for holding beer, usually in 32 or 64 ounce sizes) and get it filled up from one of their kegs — often for lower-than-retail prices. After coming back to California, I learned that even though California law prevents grocery stores from filling growlers like they do in other states, it’s perfectly legal for breweries to do so. And we just happen to have several world-class breweries in the Bay Area that have very limited bottle distribution but happily fill outside growlers, including Cellarmaker in San Francisco, Sante Adairius Rustic Ales in Santa Cruz, and Fieldwork in Berkeley. I also discovered that thermally insulated 32oz stainless steel growlers, including a brand new one by Klean Kanteen with the same construction as my trusty 20oz, were quickly becoming a thing. All these factors, combined with the fact that 20oz of water was often not enough to get me through the day, made me start looking into making a new water bottle (slash covert beer growler) purchase.&lt;/p&gt;

&lt;p&gt;I only had a few initial requirements. The growler had to be stainless steel. It had to be thermally insulated. It had to have the volume printed somewhere on the bottle. And it had to be leak-proof. There were a few REIs around me with bottles by Hydro Flask, Klean Kanteen, Stanley, and Miir, so off I went to get my hands on them.&lt;/p&gt;

&lt;h2 id=&quot;hydro-flask&quot;&gt;Hydro Flask&lt;/h2&gt;

&lt;p&gt;My first impression of the &lt;a href=&quot;http://www.amazon.com/gp/product/B00KFTG9ZG/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00KFTG9ZG&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=NH57AFZPKAG7U7OD&quot;&gt;Hydro Flask&lt;/a&gt; was that it was a cheaper-built version of Klean Kanteen. The paint had a bumpy finish. There was a hollow sort of ring and vibration when I put the bottle down, as if the inner metal layer was thinner and less firmly attached than it should be. The cap was made of cheap plastic — particularly evident on the inside — and I was worried that I would damage the thread whenever I screwed it on tightly. (There was no obvious stopping point as with my 20oz Klean Kanteen.) But the more I handled this bottle, the more I liked it. In particular, the top-to-bottom finish looks sleek, especially in black. I got over the bumpy finish very quickly; Klean Kanteen’s glossy and matte finishes still feel much better, but this one has its own charm. The wide 2” mouth is a point in its favor, and even though the volume designation is painted on the side (where it might wear off more easily), customers on Amazon say that the paint remains perfectly intact even after a year of use. Finally, this is easily the most compact 32oz form factor out of all the bottles I handled. It’s only a little wider and actually shorter than my 20oz bottle!&lt;/p&gt;

&lt;h2 id=&quot;stanley&quot;&gt;Stanley&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B000FZX93K/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000FZX93K&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=U6ITGGSYRO5FKKKM&quot;&gt;Stanley’s bottle&lt;/a&gt; felt the best-constructed overall. I loved the solid, textured outer finish, the incredibly smooth hinges, and the the bells and whistles like the insulated cup attachment and the cap that doubles as a spout. This is a beautiful workhorse bottle. Unfortunately, the screw cap is incompatible with using the bottle as a growler. Since the cap screws &lt;em&gt;into&lt;/em&gt; the bottle and not onto and outside of it like on the Hydro Flask, you can’t fill it to the very top without wasting lots of beer. Many breweries will refuse to fill bottles designed this way. The Stanley also felt bigger and heavier than the other bottles I tried. But what sealed this bottle’s fate were all the negative reviews of the cap, claiming that recent redesigns made them far less leakproof and reliable than before. Oh well.&lt;/p&gt;

&lt;h2 id=&quot;miir&quot;&gt;Miir&lt;/h2&gt;

&lt;p&gt;I wanted to love the &lt;a href=&quot;http://www.amazon.com/gp/product/B013KZN10W/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B013KZN10W&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=PONW7ZJALVGTHYH5&quot;&gt;Miir bottle&lt;/a&gt; — it was the only 32oz swing top bottle available with a black matte finish, and the company had a great mission — but it had too many problems. (Note that I examined the 64oz bottle at REI, but it looks to have the same cap design as the 32oz.) First, the swing top. You’ll see in reviews that people have a lot of trouble opening and closing the cap. After undoing the latch, you have to kind of rotate the cap backwards over the latch at a certain angle. Is this a difficult procedure? No, of course not. But to my surprise, the extra 1-2 seconds required to figure it out went a long way towards making the bottle unenjoyable and frustrating to use. The second issue is with the way the swing top attaches to the bottle. It appears that the outer part of the neck is somehow removed and a metal ring added in its place, with holes drilled in the sides to attach the swing top mechanism. Unfortunately, this is done rather clumsily: there are jagged edges all around the lower part of the ring, and if you look down into the mouth of the bottle, you’ll see a small gap between the ring and the opening — surely an incubator of mold and errant smells. This design also makes the mouth of the bottle really thick and ugly. My final problem with this bottle is the actual seal. While the bottle does seal quite tightly and smoothly (once you work out the puzzle latch), the rubber/silicone that the seal is made from looks really cheap. Especially given the rough neck design, I’m concerned that it will deteriorate over time. On the plus side, this is the only bottle that had the volume and government warning solidly engraved on the bottom.&lt;/p&gt;

&lt;h2 id=&quot;klean-kanteen&quot;&gt;Klean Kanteen&lt;/h2&gt;

&lt;p&gt;Now, for the winner.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.amazon.com/gp/product/B00SA2VRFW/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00SA2VRFW&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=SYQ6LFSFDLH4CFQW&quot;&gt;Klean Kanteen&lt;/a&gt; felt the best in my hands out of all the bottles I tried. Geometry-wise, it’s practically perfect. There are no hard edges or jagged seams to be found. You can run your hand over the outside and feel one smooth curve, save for a small gap where the body meets the base. This is in line with my experience with Klean Kanteen as a whole: you can tell that their design and manufacturing is a step above the other players.&lt;/p&gt;

&lt;p&gt;The mouth of the bottle is about 1.75” wide. My 20oz bottle had a wide 2” mouth which (barely) fit a tea infuser, so I was reluctant to consider a smaller mouth at first. However, I quickly learned that the the narrow mouth has benefits of its own. First, the smooth curvature of the lip is very pleasant to drink from, unlike the hard edge of the 2” bottle. (A subtle but important point! I never enjoyed drinking out of the 20oz wide mouth. Add all those negative moments up over a year and what do you get?) And second, the smaller mouth makes the bottle perfect for pouring, even when filled to the brim. Whenever I tried pouring out my wide mouth bottle, I inevitably ended up spilling liquid all over the place (or myself). These two issues factor far more into my life than the ability to brew tea inside the bottle, so the decision wasn’t too agonizing. (And in any case, there are thin+long as well as flexible silicone infusers that would surely fit through the smaller opening.)&lt;/p&gt;

&lt;p&gt;The insulation of this bottle is very good. Like most thermally insulated stainless steel bottles, the Klean Kanteen features a double-walled design, harboring a layer of vacuum between the outer and inner steel layers. Some Amazon reviews claimed that this bottle wasn’t as good as other Klean Kanteens at keeping liquids hot or cold, so I put it to the test. I filled both the 32oz and 20oz bottles with boiling hot water and measured their temperature over the course of four hours — sometimes open, sometimes closed. Surprisingly, the bottles rarely varied by more than a degree or two, losing a few degrees every hour when closed (with a sharper decline at the start) and about half a degree per minute when open. One thing I did notice with the 32oz was that the neck and cap of the bottle felt warm, while the gasket actually felt hot. When filled with very cold liquid, the neck also sweat a little. But this did not seem to affect the bottle’s thermal properties.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;tablecontainer&quot;&gt;
&lt;div class=&quot;tablepadding&quot;&gt;
&lt;table&gt;

&lt;colgroup&gt;
&lt;col class=&quot;ch&quot; /&gt;
&lt;col span=&quot;2&quot; class=&quot;data&quot; /&gt;
&lt;/colgroup&gt;

&lt;tbody&gt;

&lt;tr class=&quot;rh&quot;&gt;
&lt;td class=&quot;corner&quot;&gt;&lt;/td&gt;
&lt;th&gt;Klean Kanteen Growler (32oz)&lt;/th&gt;
&lt;th&gt;Old Klean Kanteen (20oz)&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;0 minutes&lt;/th&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;8 minutes&lt;/th&gt;
&lt;td&gt;95.0 ℃&lt;/td&gt;
&lt;td&gt;94.0 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;21 minutes&lt;/th&gt;
&lt;td&gt;85.0 ℃&lt;/td&gt;
&lt;td&gt;86.5 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;35 minutes&lt;/th&gt;
&lt;td&gt;83.7 ℃&lt;/td&gt;
&lt;td&gt;84.2 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;56 minutes&lt;/th&gt;
&lt;td&gt;73.6 ℃&lt;/td&gt;
&lt;td&gt;(Mismeasured)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;71 minutes&lt;/th&gt;
&lt;td&gt;72.3 ℃&lt;/td&gt;
&lt;td&gt;73.5 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;98 minutes&lt;/th&gt;
&lt;td&gt;68.7 ℃&lt;/td&gt;
&lt;td&gt;70.6 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;220 minutes&lt;/th&gt;
&lt;td&gt;65.0 ℃&lt;/td&gt;
&lt;td&gt;63.8 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Perhaps the biggest draw of this bottle is the swing cap. At first glance, it might seem like a simple aesthetic choice. (And don’t get me wrong, the retro milk jug appearance is quite attractive!) But in fact, swing caps and screw caps have several important functional and usability differences. First, leak-proofness. Practically all modern water bottles have a rubber or silicone gasket that prevents liquids and gases from escaping. In screw top bottles, the seal is held down by the friction of the plastic or metal screw; its effectiveness is determined by how tightly you screw the cap on. Swing caps are relatively simple: the only thing pushing down the gasket is the latch. The common advice for keeping carbonated beverages fresh is to screw on the cap as tightly as possible; with a swing cap bottle, you never have to worry about this.&lt;/p&gt;

&lt;p&gt;At first, I was a little concerned that the simple design — just a loose silicone seal clamped down by metal — would be less reliable than the multiple layers of a screw cap’s thread. But the ease with which the bottle can be closed conceals the fact that there’s a lot of pressure bearing down on that cap. When I tried to push the cap down to its closed position without using the latch, I couldn’t compress it anywhere near its final position! Furthermore, a Klean Kanteen representative told me that the cap was measured to be waterproof at 35psi. You might notice that the Klean Kanteen website lists the Swing Lok cap as “non leakproof”, whereas many of the screw caps are. I don’t think this is an accurate assessment. I’ve had plenty of leaks in my screw cap Klean Kanteen when filled with hot liquid, and you can even find videos of screw caps popping off completely when the bottle is filled with hot liquid and shaken. A swing cap, by virtue of its sturdy construction, does not have this outlet. The only way that pressure can escape from the bottle is through its seal. In that sense, it &lt;em&gt;has&lt;/em&gt; to be “non leakproof”.&lt;/p&gt;

&lt;p&gt;(It should be noted that the description of the Swing Lok cap on the Klean Kanteen website indicates that it’s not designed for hot liquids. I asked the rep about it and they said that this was because they “do not want a hot beverage to spill out and leak on anyone”. My understanding is that the silicone seal will not be damaged by boiling water; as with all Klean Kanteens, you just have to make sure not to agitate the bottle too much when filled with hot water to prevent pressure from building up.)&lt;/p&gt;

&lt;p&gt;Just to make sure that 35psi was enough for my needs, I battle-tested the bottle in several different ways. I filled it with carbonated water and tilted it downwards overnight. I filled it with hot water and let it sit out for a while. I got it filled with beer and left it on its side in the fridge for 5 days. At no point could I detect any leaks. Fortunately, the (delicious) beer was still carbonated at the end of the test. And according to my research, even bottled beer — presumably under much higher pressure than growler fill beer — rarely goes past 35psi. When asked whether the screw cap or the swing cap would be better for keeping carbonated beverages fresh, the Klean Kanteen rep told me that the bottle’s Swing Lok cap would be the best. (Many people in the beer community share this opinion about swing tops in general, and a Miir representative went as far as to say that their swing top bottles were guaranteed to be better than screw top bottles at keeping beer fresh.)&lt;/p&gt;

&lt;p&gt;Swing caps have another benefit when it comes to growler fills. Although relatively few in number, there are breweries out there that will refuse to fill screw top bottles! Several reasons exist for this, including freshness concerns, being able to fill to the very top without wasting beer, and ease of use for the bartenders. Another point in the swing cap’s favor.&lt;/p&gt;

&lt;p&gt;One final benefit of this particular cap is that the mechanism isn’t built into the neck, but instead attaches around it. This means that you can take it off entirely and use a screw cap if you want a change of scenery. (The threads for the screw cap are still there.) There are also no finicky holes that can retain moisture and odor. It’s an elegant, simple construction.&lt;/p&gt;

&lt;p&gt;The Klean Kanteen has some downsides that are worth mentioning.&lt;/p&gt;

&lt;p&gt;First, the volume text. The logo on the side of my old 20oz Klean Kanteen has long ago worn off, but the text on the bottom — including the volume designation — has remained perfectly intact. As expected, the 32oz Kanteen has its volume text printed in the exact same place. (Side note: not the case for the non-insulated growlers!!) Unfortunately, it seems that the company has changed the ink it uses for this purpose sometime over the past year. Whereas the writing on the bottom of my 20oz bottle is slightly elevated and subtly textured, the writing on the 32oz bottle is perfectly flat and “inky”. I already see some of the letters showing signs of wear. For growler fills, the volume designation is very important — several breweries have told me that they need to see it on the bottle for them to fill it — and I’m worried that this new ink will wear off over time like the logo on the side of my 20oz. If so, I’ll have to figure out a way to get the text back on. (Laser etching?)&lt;/p&gt;

&lt;p&gt;Next, the cap. It’s not perfect. Several models of the growler I tried in-store at REI felt very clicky and squeaky when opened, to the point where I immediately pushed the Klean Kanteen to the bottom of my priority list. The model I got on Amazon did not have this problem — it’s a pleasure to lock and unlock and even requires far less force to close — but it’s something to look out for. A second, minor issue is that when closed, the cap has a &lt;em&gt;very&lt;/em&gt; slight tilt towards the clasp side of the bottle. Again, this was more pronounced on the REI bottles than the bottle I ordered online, but it’s still noticeable if you look for it. Finally, the silicone seal does touch the liquid inside the bottle, so you’ll have to clean it carefully to avoid residual smells.&lt;/p&gt;

&lt;p&gt;Perhaps my biggest gripe with this bottle is the paint job. It looks lovely in photos, but it’s not as great in person. Unlike the beautiful glossy and matte coatings on other Klean Kanteen bottles, this one looks and feels more like anodized or tinted steel. There’s also no paint on the neck, despite what the marketing photos may show: the body paint stops in an abrupt and somewhat blurry line towards the end of its curve. It’s clear that these are essential compromises to prevent the swing cap from damaging the paint; if you attach the Swing Lok cap to a typical colored Klean Kanteen (which — again — look and feel stunning), you &lt;em&gt;will&lt;/em&gt; get scratches and void your warranty. Still, I wish it was a little better done. On the bright side, I do like the actual tint quite a bit. It’s a very unique coppery color with a nice sheen to it.&lt;/p&gt;

&lt;p&gt;All that said, these are merely minor quibbles. This bottle is great. I love holding it. I love opening it. I love handing it off to get a growler fill, and I love the feel of its weight when I get it back. It does every job I throw at it admirably. Really, it makes me super happy — happy enough to write a 3000 word review.&lt;/p&gt;

&lt;p&gt;And really, what more could you ask for from a water bottle (slash covert beer growler)?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;update-2015-9-25&quot;&gt;Update 2015-9-25&lt;/h2&gt;

&lt;p&gt;Here are a few more pros and cons after a month of use.&lt;/p&gt;

&lt;p&gt;Pro: the seal is very good. Very, very good. Unfortunately, if the contents of the bottle are under pressure, this can result in a very loud &lt;strong&gt;POP!&lt;/strong&gt; when you open the lid. With carbonated liquids, this is merely startling, but with hot liquids, there’s a serious risk of burning yourself from the splashback. I have not had this happen to me yet, but it’s definitely something to be mindful of!&lt;/p&gt;

&lt;p&gt;Con: despite what I said about the paint job, it seems that it’s still susceptible to damage from the lid. My bottle has developed a slight chip on the side where the lid hits the body, as well as a light scratch on the other side where the latch drops down. I asked Klean Kanteen about it and they dismissed it as normal “wear and tear”. Unfortunately, unless you’re extremely careful, it seems that it’s impossible to avoid scratches with this design if you have a colored bottle. If this bothers you, I suggest getting the stainless steel model.&lt;/p&gt;

&lt;p&gt;Con: although I didn’t take photos to compare, it seems that the text on the bottom is getting more faded. I don’t think it’s going to last, alas.&lt;/p&gt;

&lt;p&gt;Despite the disappointing quality of the paint job and printing, I’d still heartily recommend this bottle for its shape, performance, and design.&lt;/p&gt;

&lt;h2 id=&quot;update-2015-11-3&quot;&gt;Update 2015-11-3&lt;/h2&gt;

&lt;p&gt;I’ve noticed that whenever I get a growler fill from Cellarmaker and let it sit for 4-5 days, it tastes a bit flat when I open it. Not outright flat, mind you, but clearly not as spritzy as when fresh. At present, I’m not entirely certain what the source of the problem is; after all, people claim that they’ve had growlers that kept carbonation for a month or longer. Here are the possibilities as I see them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Klean Kanteen is worse at preserving carbonation than other growlers. I find this just a little unlikely, since a) there have been no liquid leaks at all, b) the construction and materials are top-notch, and c) contents under pressure will “pop” (see above) even hours after the initial fill. But it’s definitely something to consider.&lt;/li&gt;
  &lt;li&gt;Cellarmaker beer goes flat quicker than beer from other breweries.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;All&lt;/em&gt; beer gets a bit flat after a few days in a growler, regardless of its construction. The people who claim otherwise either have different standards for carbonation, or are simply deluding themselves.&lt;/li&gt;
  &lt;li&gt;Only growlers that are filled absolutely, 100% to the brim will remain carbonated for long periods of time.&lt;/li&gt;
  &lt;li&gt;Only growlers filled with a counter pressure filler will remain fresh for long periods of time.&lt;/li&gt;
  &lt;li&gt;A lot depends on the width of the neck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get to the bottom of this, I am currently experimenting with filling my 3 stainless steel insulated bottles with carbonated SodaStream water and letting them sit in the fridge for 4 days. Results will be posted after testing is complete.&lt;/p&gt;

</description>
        <pubDate>Wed, 09 Sep 2015 23:12:18 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/</guid>
        
        
      </item>
    
      <item>
        <title>Who cares about the Apple Watch Edition?</title>
        <description>&lt;p&gt;It’s disappointing to see many of my &lt;a href=&quot;http://daringfireball.net/2015/02/apple_watch_pricing&quot;&gt;favorite&lt;/a&gt; Apple &lt;a href=&quot;http://www.marco.org/2015/03/04/boring-apple-watch-edition-pricing&quot;&gt;bloggers&lt;/a&gt; devote so much of their time to Apple Watch Edition gossip. How much of it is going to be solid gold? Will it be $5000, $10000, $15000? How much of them will Apple sell in their first quarter? Will they be a hit with the rich and powerful in China?&lt;/p&gt;

&lt;p&gt;My question is: why in the &lt;em&gt;least bit&lt;/em&gt; should us techies care? Sure — catering to the unfathomably well-off will make an impact on Apple’s fortunes in the long run, and spinning out into a fashion brand might make the company grow at an even more breakneck pace. But I was under the impression that we were Apple fans in the first place because they made best-in-breed products for &lt;em&gt;everyone&lt;/em&gt;, not just the elite.&lt;/p&gt;

&lt;p&gt;We loved our iPods and iPhones for their sleek design and smooth UI, even when people dismissed them as “expensive toys”. We knew our $2000 laptops were incredible for the price, even while people mocked us for not buying cheap, creaky Windows machines. When Android and Windows users poked fun at our platforms for lacking in free tools, we lauded the benefits of carefully crafted, paid-up-front software. &lt;a href=&quot;https://www.youtube.com/watch?v=5DHYe4dhjXw&quot;&gt;We let our Apple logos shine bright&lt;/a&gt; because we were &lt;em&gt;proud&lt;/em&gt; to be affiliated with one of the few companies that seemed philosophically bent on setting a new standard for mass-market products.&lt;/p&gt;

&lt;p&gt;There’s a good reason why the tech community might have a &lt;a href=&quot;http://daringfireball.net/2014/09/apple_watch&quot;&gt;“shit-fit”&lt;/a&gt; if Apple enters the realm of $10000 watches and $2000 bands. Gruber’s word choice makes it sound like a juvenile reaction by the fashion-unconscious. But that’s just the thing. We’re geeks. We believe in the intrinsic value of things. We’ve always made fun of &lt;a href=&quot;http://www.innerfidelity.com/content/monster-beats-dr-dre-solo&quot;&gt;name-dropping headphones&lt;/a&gt; and $1000 shirts when the quality couldn’t match the hype. Apple taught many of us that there’s more to the price of an item than just the cost of materials; design can be worth a lot, too. But we’ve been adamant for years that we bought Apple products because they were &lt;em&gt;good&lt;/em&gt;, not because they were fashionable. And now, with the Beats acquisition and these gold-encased watches, Apple is showing signs that they no longer want to be bound by intrinsic value.&lt;/p&gt;

&lt;p&gt;Conspicuous consumption? Veblen goods? Roped-off areas in Apple stores? Is &lt;em&gt;this&lt;/em&gt; is what the indie Mac community is going to talk about now?&lt;/p&gt;

&lt;p&gt;An Apple that sells &lt;a href=&quot;http://www.newyorker.com/magazine/2015/02/23/shape-things-come&quot;&gt;“bling”&lt;/a&gt; to billionaires is not a company that many of us could muster any passion about. Maybe Woz had the right idea all along.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Mar 2015 12:00:55 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/03/08/who-cares-about-the-apple-watch-edition/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/03/08/who-cares-about-the-apple-watch-edition/</guid>
        
        
        <category>technology</category>
        
      </item>
    
  </channel>
</rss>
