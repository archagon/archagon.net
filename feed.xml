<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Archagon Was Here (Jekyll Test)</title>
    <description>Archagon was here... or was he? Yes, he was. This is Alexei Baboulevitch&#39;s personal blog webspacehomepage, featuring writing on software development, travel, photography, and more.
</description>
    <link>http://beta-blog.archagon.net/</link>
    <atom:link href="http://beta-blog.archagon.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 27 Dec 2015 00:28:36 -0800</pubDate>
    <lastBuildDate>Sun, 27 Dec 2015 00:28:36 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>The Perfect Travel Gaiwan</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/mug_portrait.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loose-leaf tea is a bit of a finicky hobby. Unlike the boring old teabag, you can’t just dump a bunch of tea leaves in a cup of boiling water and expect good results. At the very least, you need a way to strain your tea leaves quickly and without burning yourself. Many tea geeks enjoy the use of gaiwans for this purpose — small, lidded cups whose shape and thermal properties make them useful as single-serving teapots.&lt;/p&gt;

&lt;p&gt;But what do you do when you travel?&lt;/p&gt;

&lt;p&gt;Gaiwans tend to be made of porcelain or clay, so they’re very fragile. Until recently, I assumed I’d just have to make do with makeshift mug-plus-strainer brews when on the road. But a few months ago, I discovered a wonderful product that effectively fixed this problem, as well as several I didn’t even know I had: the &lt;a href=&quot;http://amzn.to/1ShqqsP&quot;&gt;Asobu Imperial Beverage Insulated Cup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_items.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Although not marketed as a travel gaiwan, this product is suited almost perfectly to this role. The lid attaches loosely with a rubber seal, allowing for quick removal and keeping the temperature stable. There’s a hook on the back of the lid that can be used as a handy stopper when tilting it back for straining. The mug is vacuum insulated, allowing you to hold it normally even with boiling hot water inside; there’s no need to perform the crazy hand gymnastics you have to use with an ordinary gaiwan.  The insulation also ensures that the temperature inside the mug remains very hot throughout the steeping process — hotter, I would imagine, than any other material, as barely any heat radiates out! Because the mug is made from steel, you can throw it in your backpack without worrying about it breaking. And brewing aside, it’s great for public transit: if you have a thermos full of hot tea or coffee, you can slowly sip from this mug without burning your hands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_pour.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure, it’s a bit ugly, while my porcelain gaiwan is beautiful. But in all honesty, I’ve been reaching for this mug every time I brew my loose-leaf tea. The practical benefits far outweigh the aesthetic concerns.&lt;/p&gt;

&lt;p&gt;There are a few issues worth mentioning. The shape is far blobbier than it looks in the marketing photos. The paint is of poor quality and has chipped away from the bottom even with fairly light use; I’d recommend getting the stainless steel model and avoiding the colors. But overall, this mug is an incredibly functional and unique product that, to my knowledge, has no rival on Amazon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mug_result.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 26 Dec 2015 02:18:44 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/26/the-perfect-travel-gaiwan/</guid>
        
        
      </item>
    
      <item>
        <title>The Stanley 64oz Classic Vacuum Growler</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/stanley_main.JPG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Shortly after I posted my &lt;a href=&quot;/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/&quot;&gt;Klean Kanteen review&lt;/a&gt;, Stanely offered to send me one of their own bottles to play around with: the &lt;a href=&quot;http://amzn.to/1ItRmn0&quot;&gt;64oz Classic Vacuum Growler&lt;/a&gt;. I was quite happy with the build quality of the Stanleys I saw at REI, so at risk of becoming a professional growler reviewer, I figured I’d give this bottle an equally thorough look.&lt;/p&gt;

&lt;h2 id=&quot;construction&quot;&gt;Construction&lt;/h2&gt;

&lt;p&gt;There’s a lot of good things to say about the construction of this growler. The outer shell, painted in the usual Stanley enamel-matte-green, is very solid and attractive in both look and feel. There’s certainly no concern about the coating fading or chipping with use. The plastic is also very smooth and feels higher quality than the typical materials used in these kinds of bottles.&lt;/p&gt;

&lt;p&gt;The latching mechanism that encircles the neck and lid of the bottle is made entirely from plastic. This is very concerning to me. The way it works is very simple: a metal loop, attached to a plastic tab, snags around a plastic hook in the lid and then depresses with a plastic lever. Looking closely at the lower plastic hinge, &lt;a href=&quot;/images/stanley_lower_hinge.jpg&quot;&gt;there are white stress marks where the hinge attaches to the lid&lt;/a&gt;, right out of the box. Similarly, on the upper plastic hook, &lt;a href=&quot;/images/stanley_upper_hinge.jpg&quot;&gt;you can see the plastic starting to wear down and whiten from the shape of the metal loop&lt;/a&gt;. This wasn’t just my bottle, either: every Stanley growler I’ve seen at REI has had these marks. I’d love to be proven wrong, but my feeling is that these parts will be the first to fail.&lt;/p&gt;

&lt;p&gt;On the other hand, the rubber/silicone material used in the gasket feels very sturdy. I expect it to last for a long time.&lt;/p&gt;

&lt;p&gt;The Stanley logo on the side of the bottle looks like a sticker and I’m concerned it will eventually fall off. Compared to the rest of the body it looks a bit cheap.&lt;/p&gt;

&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;

&lt;p&gt;The lid opens very, very smoothly — almost surprisingly so. There’s just enough friction in the joint that it stops &lt;a href=&quot;/images/stanley_cap.jpg&quot;&gt;almost parallel to the neck of the bottle without ever touching the body&lt;/a&gt;. It feels great.&lt;/p&gt;

&lt;p&gt;The latch is slightly problematic in that the lever is very easy to smack against the side of the growler — loud and a bit troubling due to the plastic construction. (But you learn to avoid this fairly quickly.) However, the design is certainly preferable to the Miir-style puzzle-latch. It’s simple and effective.&lt;/p&gt;

&lt;p&gt;This is a wide-mouth bottle, and you can read about the trade-offs in my previous article. (To summarize: I think you will find the small, rounded lip of the Klean Kanteen better for pouring and drinking, but the wide mouth of the Stanley will allow for easier fills as well as use with tea infusers, ice, etc.) This is clearly not meant to be a bottle that you drink straight out of, especially given the &lt;a href=&quot;/images/stanley_top.jpg&quot;&gt;wide ring of plastic around the lip&lt;/a&gt; (though I’ve been doing it a little bit and it’s been fine). While similar in overall design, Stanley’s neck ring looks a lot better than Miir’s. The tolerances are much tighter, though there are still some very small gaps that I fear water might get into.&lt;/p&gt;

&lt;p&gt;Pouring this bottle is very easy. The lid opens perpendicular to the handle, and due to the fact that the plastic latch ring is inset from the actual, metal lip of the bottle by a centimeter or so, you don’t get the usual problem of liquid trickling down the side of the bottle when you start pouring. Even if you pour slowly, the plastic edge acts as a spout and directs the stream right into your glass! I specifically wanted to avoid a handle when picking my previous growler, but after using this one for a while, I’ve come around to it: at 64oz, it’s really the best way to pour out the contents of your growler when full. One minor issue is that, due to the fact that the rubber/silicone on the underside of the lid has a central ring that juts out, liquid can gather and drip from this outcropping when you pour.&lt;/p&gt;

&lt;p&gt;64oz is a lot of fizzy water, so I have not yet tested how well the growler keeps liquids carbonated. However, there was a &lt;em&gt;lot&lt;/em&gt; of suction in the seal after a few hours keeping hot tea, so I think it should perform well in this regard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/images/stanley_govt_warning.jpg&quot;&gt;The bottom has the volume and government warning engraved&lt;/a&gt;. Hallelujah! No chance of these rubbing off.&lt;/p&gt;

&lt;p&gt;Volume-wise, the space in the neck gives you an extra 4oz or so over the base 64oz.&lt;/p&gt;

&lt;p&gt;This bottle is listed as dishwasher-safe — unusual for thermally-insulated bottles.&lt;/p&gt;

&lt;h2 id=&quot;temperature&quot;&gt;Temperature&lt;/h2&gt;

&lt;p&gt;Due to the fact that this growler holds twice as much water as my Klean Kanteen, I performed two tests: one with 64oz of water and one with 32oz. Since 64oz of water takes a lot longer to change temperature than 32oz, I figured it would be more fair to do it this way for comparison’s sake with previous results. Do note, though, that since there’s a lot more space for the heat to dissipate when filled with 32oz, performance at that level is going to be worse than in a bottle designed to hold 32oz.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;tablecontainer&quot;&gt;
&lt;div class=&quot;tablepadding&quot;&gt;
&lt;table&gt;

&lt;colgroup&gt;
&lt;col class=&quot;ch&quot; /&gt;
&lt;col span=&quot;2&quot; class=&quot;data&quot; /&gt;
&lt;/colgroup&gt;

&lt;tbody&gt;

&lt;tr class=&quot;rh&quot;&gt;
&lt;td class=&quot;corner&quot;&gt;&lt;/td&gt;
&lt;th&gt;Stanley Growler (Filled 64oz)&lt;/th&gt;
&lt;th&gt;Stanley Growler (Filled 32oz)&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;0 minutes&lt;/th&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;td&gt;94.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;8 minutes&lt;/th&gt;
&lt;td&gt;95.1 ℃&lt;/td&gt;
&lt;td&gt;92.7 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;21 minutes&lt;/th&gt;
&lt;td&gt;91.3 ℃&lt;/td&gt;
&lt;td&gt;82.4 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;35 minutes&lt;/th&gt;
&lt;td&gt;90.7 ℃&lt;/td&gt;
&lt;td&gt;80.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;56 minutes&lt;/th&gt;
&lt;td&gt;85.5 ℃&lt;/td&gt;
&lt;td&gt;68.9 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;71 minutes&lt;/th&gt;
&lt;td&gt;84.7 ℃&lt;/td&gt;
&lt;td&gt;67.6 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;98 minutes&lt;/th&gt;
&lt;td&gt;83.6 ℃&lt;/td&gt;
&lt;td&gt;66.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;220 minutes&lt;/th&gt;
&lt;td&gt;79.7 ℃&lt;/td&gt;
&lt;td&gt;61.3 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Results with 64oz are fantastic and great with 32oz as well, keeping in mind the temperature/volume considerations above.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’m very concerned about the durability of the plastic latch, but overall, this growler feels great. It’s also one of the most attractive 64oz growlers I’ve seen, especially in the flip-top arena. In terms of 64oz, I’d be torn between the Stanley and the Klean Kanteen, but I’d definitely pick the Stanley over the Miir and probably over the Hydro Flask. Having continuously used this growler for a few months with water, tea, and beer and receiving admirable performance in every regard, I give it a thumbs up!&lt;/p&gt;

&lt;p&gt;(Better yet: at the time I wrote this review, Stanley didn’t offer a growler in 32oz size, but it looks like they do now! Definitely worth checking out.)&lt;/p&gt;

</description>
        <pubDate>Fri, 25 Dec 2015 00:58:32 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/25/the-stanley-64oz-classic-vacuum-growler/</guid>
        
        
      </item>
    
      <item>
        <title>iPad Pro + Pencil Slow Motion Bug</title>
        <description>&lt;p&gt;I noticed an interesting problem with the Apple Pencil while developing my app. It seems that if you’re using the Pencil while simultaneously using a gesture recognizer (as, for instance, in a scroll view), touch processing goes into slow motion. (Approximately half-speed, according to some quick measurements.) Seems there’s some sort of interference between Pencil and gesture event processing. Notably, the framerate remains stable while this is happening.&lt;/p&gt;

&lt;p&gt;&lt;iframe class=&quot;youtube&quot; width=&quot;800&quot; height=&quot;450&quot; src=&quot;https://www.youtube.com/embed/ioPRiHBj8l4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;I noticed that the Paper app also has this problem. Other drawing apps seem to avoid it (accidentally or intentionally) by disabling canvas navigation while drawing. In Procreate, you can adjust the brush sliders while drawing without any slow motion, but I think this has to do with the fact that Procreate uses a custom OpenGL-based implementation for their widgets, not UIGestureRecognizer.&lt;/p&gt;

&lt;p&gt;I can reproduce this bug in Apple’s TouchCanvas demo by sticking a scroll view to the left of the screen and continuously scrolling it while drawing. At first, it behaves correctly. But when the CPU usage hits a high enough level, you get the behavior described above. If you do the drawing with your finger, the problem disappears. The framerate does drop, but the touches don’t continue when you lift your finger; they simply get delivered with less frequency, and the scroll view stops scrolling immediately once you lift your finger.&lt;/p&gt;

&lt;p&gt;My hunch is that the sampling frequency of the Pencil messes up the usual touch handling behavior when under load. That would explain the 2x factor: the Pencil has a 240Hz refresh rate while touches normally get sampled at 120Hz.&lt;/p&gt;

&lt;p&gt;Regardless of whether this is an iOS bug or something I messed up on my end, I’d love to know if there’s a way to fix this! Simultaneously scrolling with your hand while drawing with the Pencil should be a given.&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Dec 2015 16:50:30 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/12/05/ipad-pro-plus-pencil-slow-motion-bug/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Backgroundifier</title>
        <description>&lt;p&gt;I made a Mac app! It’s called &lt;a href=&quot;http://backgroundifier.archagon.net&quot;&gt;Backgroundifier&lt;/a&gt;, and it turns any image into a desktop background. (But it’s better for fine art and illustration.)&lt;/p&gt;

&lt;p&gt;You can pass an image like this…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-1.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…through the droplet…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-2.png&quot; class=&quot;content&quot; width=&quot;600px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…to get something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-3.jpg&quot; class=&quot;content&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I collect lots of art from websites like &lt;a href=&quot;https://www.reddit.com/r/ImaginaryCityscapes&quot;&gt;/r/imaginarycityscapes&lt;/a&gt; and artist blogs. Unfortunately, there never seems to be enough time in the day to actually sit down and look through it all. As a result, it mostly sits and gathers dust in a directory in my Dropbox — not a great place for art to be.&lt;/p&gt;

&lt;p&gt;So I’ve been thinking of ways to get it in front of my eyes. On a Mac, the desktop background seemed like the perfect place to put it, especially since OSX natively supports randomly rotating your desktop background from a directory of images. Unfortunately, since all my art was in different sizes and aspect ratios, it looked ugly with the default letterbox color that OSX added to compensate.&lt;/p&gt;

&lt;p&gt;After seeing the visual design of &lt;a href=&quot;https://news.ycombinator.com/item?id=8723120&quot;&gt;tomkinstinch’s Artful app&lt;/a&gt;, I realized that images could be framed more cleverly. By processing the image instead of using a solid color, you could create a background that hinted at contents of the image while still being subdued enough to serve as a backdrop. But Artful didn’t support local files; it pulled its art from the web. Furthermore, like many Mac users, I’m a proponent of keeping things close to the defaults. What I wanted was a basic utility that could simply input my images and output the backgrounds, allowing the OS do the background rotation for me. No need to keep any apps open; no compatibility issues; nothing but a basic command line utility with a bit of GUI attached.&lt;/p&gt;

&lt;p&gt;So that’s what I made. In addition to the GUI, the app actually supports command line mode. If you Terminal into the MacOS directory inside the package, you can run the Backgroundifier executable straight from the command line. (On my machine, I’ve even set up an Automator script to watch my input image directory and automatically convert any new arrivals.) Unfortunately, due to sandboxing restrictions, you can only read and write to the ~/Pictures directory unless you use the GUI… but check in the Resources directory in the bundle and you might find something a bit more robust!&lt;/p&gt;

&lt;p&gt;This was mostly a small side project for me, but I couldn’t help but implement a few bits of UI bling. One is the animation of the droplet:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/bgify-demo2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(That shadow looks better when it’s not in a gif!)&lt;/p&gt;

&lt;p&gt;Unfortunately, doing this on OSX is a bit more tricky than on iOS. Whereas in UIKit, you can access (and transform!) each view’s layer without any issues, this is disabled by default in AppKit. And even if you do enable layer-backed views, transforming them is not officially allowed. One of the reasons UIKit feels so good is because layers are supported on the most fundamental level; I hope that we get a similar framework update for OSX sometime in the near future. Visually, the current tech stack feels like it’s stuck in the 90’s.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/archagon/backgroundifier-public&quot;&gt;The app is mostly open source&lt;/a&gt;. I’ve decided to not release my one user interface nib file for now, but everything else is up for grabs. It’s written in Swift 2. (The repo is a bit out of date, but I hope to commit my latest changes in the near future.)&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 17:36:37 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/09/29/backgroundifier/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/09/29/backgroundifier/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>The Klean Kanteen 32oz Insulated Stainless Steel Growler (With Swing Lok Cap)</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/Klean Kanteen Growler Train.jpg&quot; alt=&quot;Great on the train! Now with pizza!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One vital lesson I’ve been recently learning in regards to the pleasures of rampant materialism is that it’s incredibly important to surround yourself with objects that not only work well, but &lt;em&gt;feel&lt;/em&gt; good. Quality finishes; smooth hinges; great materials and top-shelf workmanship. It’s not about pretension or an abstract desire for “good design”. Rather, the aim is to get the objects in your life to radiate just a little warmth your way by virtue of their excellence. Here’s an example of what I mean. A few months ago, I needed to buy a new paper notebook. I was all set to pick up the cheapest one at the grocery like I always do, but this time I decided to peek into a stationary store just to see if something could tempt me away from the budget option. There, I discovered a &lt;a href=&quot;http://www.jennibick.com/products/paper-oh-notebook-yuko-ori&quot;&gt;stunningly beautiful notebook&lt;/a&gt; with a textured, gently undulating cover and perfect pearly pages. I immediately fell in love with it. The sticker price was a shocking $15, and while I berated myself at the time for spending so much money on basically paper, I’ve noticed over the past year that I always feel a little burst of joy whenever I leaf through its pages or run my hands over its cover. Point being, if you surround yourself with enough of these kinds of things, you’ll find yourself smiling when doing something as simple as picking up your favorite pen or putting a pot of water on the stove.&lt;/p&gt;

&lt;p&gt;Unfortunately, this therapeutic attribute is hard to quantify and review. What exactly makes an object feel good? You can have things that are incredibly sturdy but feel poor to use; but it’s also easy to manufacture something that looks great at first but exudes cheapness. No video or photo will do the trick here, and lists of stats and tech specs only confuse the matter. The only reliable way to tell is to actually handle the thing in person.&lt;/p&gt;

&lt;p&gt;Which is why I’ve been spending the past few days obsessively looking for the perfect stainless steel beer growler.&lt;/p&gt;

&lt;p&gt;Some background first. I recently went on a yearlong trip around Europe, and one of my most prized and reliable accessories was a &lt;a href=&quot;http://www.amazon.com/gp/product/B0093ISEPI/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B0093ISEPI&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=BBTYUOK7EVCHHBZD&quot;&gt;Klean Kanteen insulated 20oz bottle&lt;/a&gt;. I happily used it almost every day and I have  hard time imagining travel without it. Unfortunately, it’s gotten pretty banged up to the point where it doesn’t even stand straight, so I’ve been casually keeping an eye out for a new bottle to replace it with. I also discovered the wonders of craft beer during my trip, and I found that many stores and breweries were starting to install growler fill stations: places where you could bring your so-called “growler” (basically a large jug designed for holding beer, usually in 32 or 64 ounce sizes) and get it filled up from one of their kegs — often for lower-than-retail prices. After coming back to California, I learned that even though California law prevents grocery stores from filling growlers like they do in other states, it’s perfectly legal for breweries to do so. And we just happen to have several world-class breweries in the Bay Area that have very limited bottle distribution but happily fill outside growlers, including Cellarmaker in San Francisco, Sante Adairius Rustic Ales in Santa Cruz, and Fieldwork in Berkeley. I also discovered that thermally insulated 32oz stainless steel growlers, including a brand new one by Klean Kanteen with the same construction as my trusty 20oz, were quickly becoming a thing. All these factors, combined with the fact that 20oz of water was often not enough to get me through the day, made me start looking into making a new water bottle (slash covert beer growler) purchase.&lt;/p&gt;

&lt;p&gt;I only had a few initial requirements. The growler had to be stainless steel. It had to be thermally insulated. It had to have the volume printed somewhere on the bottle. And it had to be leak-proof. There were a few REIs around me with bottles by Hydro Flask, Klean Kanteen, Stanley, and Miir, so off I went to get my hands on them.&lt;/p&gt;

&lt;h2 id=&quot;hydro-flask&quot;&gt;Hydro Flask&lt;/h2&gt;

&lt;p&gt;My first impression of the &lt;a href=&quot;http://www.amazon.com/gp/product/B00KFTG9ZG/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00KFTG9ZG&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=NH57AFZPKAG7U7OD&quot;&gt;Hydro Flask&lt;/a&gt; was that it was a cheaper-built version of Klean Kanteen. The paint had a bumpy finish. There was a hollow sort of ring and vibration when I put the bottle down, as if the inner metal layer was thinner and less firmly attached than it should be. The cap was made of cheap plastic — particularly evident on the inside — and I was worried that I would damage the thread whenever I screwed it on tightly. (There was no obvious stopping point as with my 20oz Klean Kanteen.) But the more I handled this bottle, the more I liked it. In particular, the top-to-bottom finish looks sleek, especially in black. I got over the bumpy finish very quickly; Klean Kanteen’s glossy and matte finishes still feel much better, but this one has its own charm. The wide 2” mouth is a point in its favor, and even though the volume designation is painted on the side (where it might wear off more easily), customers on Amazon say that the paint remains perfectly intact even after a year of use. Finally, this is easily the most compact 32oz form factor out of all the bottles I handled. It’s only a little wider and actually shorter than my 20oz bottle!&lt;/p&gt;

&lt;h2 id=&quot;stanley&quot;&gt;Stanley&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/B000FZX93K/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B000FZX93K&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=U6ITGGSYRO5FKKKM&quot;&gt;Stanley’s bottle&lt;/a&gt; felt the best-constructed overall. I loved the solid, textured outer finish, the incredibly smooth hinges, and the the bells and whistles like the insulated cup attachment and the cap that doubles as a spout. This is a beautiful workhorse bottle. Unfortunately, the screw cap is incompatible with using the bottle as a growler. Since the cap screws &lt;em&gt;into&lt;/em&gt; the bottle and not onto and outside of it like on the Hydro Flask, you can’t fill it to the very top without wasting lots of beer. Many breweries will refuse to fill bottles designed this way. The Stanley also felt bigger and heavier than the other bottles I tried. But what sealed this bottle’s fate were all the negative reviews of the cap, claiming that recent redesigns made them far less leakproof and reliable than before. Oh well.&lt;/p&gt;

&lt;h2 id=&quot;miir&quot;&gt;Miir&lt;/h2&gt;

&lt;p&gt;I wanted to love the &lt;a href=&quot;http://www.amazon.com/gp/product/B013KZN10W/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B013KZN10W&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=PONW7ZJALVGTHYH5&quot;&gt;Miir bottle&lt;/a&gt; — it was the only 32oz swing top bottle available with a black matte finish, and the company had a great mission — but it had too many problems. (Note that I examined the 64oz bottle at REI, but it looks to have the same cap design as the 32oz.) First, the swing top. You’ll see in reviews that people have a lot of trouble opening and closing the cap. After undoing the latch, you have to kind of rotate the cap backwards over the latch at a certain angle. Is this a difficult procedure? No, of course not. But to my surprise, the extra 1-2 seconds required to figure it out went a long way towards making the bottle unenjoyable and frustrating to use. The second issue is with the way the swing top attaches to the bottle. It appears that the outer part of the neck is somehow removed and a metal ring added in its place, with holes drilled in the sides to attach the swing top mechanism. Unfortunately, this is done rather clumsily: there are jagged edges all around the lower part of the ring, and if you look down into the mouth of the bottle, you’ll see a small gap between the ring and the opening — surely an incubator of mold and errant smells. This design also makes the mouth of the bottle really thick and ugly. My final problem with this bottle is the actual seal. While the bottle does seal quite tightly and smoothly (once you work out the puzzle latch), the rubber/silicone that the seal is made from looks really cheap. Especially given the rough neck design, I’m concerned that it will deteriorate over time. On the plus side, this is the only bottle that had the volume and government warning solidly engraved on the bottom.&lt;/p&gt;

&lt;h2 id=&quot;klean-kanteen&quot;&gt;Klean Kanteen&lt;/h2&gt;

&lt;p&gt;Now, for the winner.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.amazon.com/gp/product/B00SA2VRFW/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00SA2VRFW&amp;amp;linkCode=as2&amp;amp;tag=arcwasher-20&amp;amp;linkId=SYQ6LFSFDLH4CFQW&quot;&gt;Klean Kanteen&lt;/a&gt; felt the best in my hands out of all the bottles I tried. Geometry-wise, it’s practically perfect. There are no hard edges or jagged seams to be found. You can run your hand over the outside and feel one smooth curve, save for a small gap where the body meets the base. This is in line with my experience with Klean Kanteen as a whole: you can tell that their design and manufacturing is a step above the other players.&lt;/p&gt;

&lt;p&gt;The mouth of the bottle is about 1.75” wide. My 20oz bottle had a wide 2” mouth which (barely) fit a tea infuser, so I was reluctant to consider a smaller mouth at first. However, I quickly learned that the the narrow mouth has benefits of its own. First, the smooth curvature of the lip is very pleasant to drink from, unlike the hard edge of the 2” bottle. (A subtle but important point! I never enjoyed drinking out of the 20oz wide mouth. Add all those negative moments up over a year and what do you get?) And second, the smaller mouth makes the bottle perfect for pouring, even when filled to the brim. Whenever I tried pouring out my wide mouth bottle, I inevitably ended up spilling liquid all over the place (or myself). These two issues factor far more into my life than the ability to brew tea inside the bottle, so the decision wasn’t too agonizing. (And in any case, there are thin+long as well as flexible silicone infusers that would surely fit through the smaller opening.)&lt;/p&gt;

&lt;p&gt;The insulation of this bottle is very good. Like most thermally insulated stainless steel bottles, the Klean Kanteen features a double-walled design, harboring a layer of vacuum between the outer and inner steel layers. Some Amazon reviews claimed that this bottle wasn’t as good as other Klean Kanteens at keeping liquids hot or cold, so I put it to the test. I filled both the 32oz and 20oz bottles with boiling hot water and measured their temperature over the course of four hours — sometimes open, sometimes closed. Surprisingly, the bottles rarely varied by more than a degree or two, losing a few degrees every hour when closed (with a sharper decline at the start) and about half a degree per minute when open. One thing I did notice with the 32oz was that the neck and cap of the bottle felt warm, while the gasket actually felt hot. When filled with very cold liquid, the neck also sweat a little. But this did not seem to affect the bottle’s thermal properties.&lt;/p&gt;

&lt;p&gt;
&lt;div class=&quot;tablecontainer&quot;&gt;
&lt;div class=&quot;tablepadding&quot;&gt;
&lt;table&gt;

&lt;colgroup&gt;
&lt;col class=&quot;ch&quot; /&gt;
&lt;col span=&quot;2&quot; class=&quot;data&quot; /&gt;
&lt;/colgroup&gt;

&lt;tbody&gt;

&lt;tr class=&quot;rh&quot;&gt;
&lt;td class=&quot;corner&quot;&gt;&lt;/td&gt;
&lt;th&gt;Klean Kanteen Growler (32oz)&lt;/th&gt;
&lt;th&gt;Old Klean Kanteen (20oz)&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;0 minutes&lt;/th&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;td&gt;95.7 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;8 minutes&lt;/th&gt;
&lt;td&gt;95.0 ℃&lt;/td&gt;
&lt;td&gt;94.0 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;21 minutes&lt;/th&gt;
&lt;td&gt;85.0 ℃&lt;/td&gt;
&lt;td&gt;86.5 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;35 minutes&lt;/th&gt;
&lt;td&gt;83.7 ℃&lt;/td&gt;
&lt;td&gt;84.2 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Open&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;56 minutes&lt;/th&gt;
&lt;td&gt;73.6 ℃&lt;/td&gt;
&lt;td&gt;(Mismeasured)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;td class=&quot;data&quot; colspan=&quot;2&quot;&gt;Closed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;71 minutes&lt;/th&gt;
&lt;td&gt;72.3 ℃&lt;/td&gt;
&lt;td&gt;73.5 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;98 minutes&lt;/th&gt;
&lt;td&gt;68.7 ℃&lt;/td&gt;
&lt;td&gt;70.6 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;th class=&quot;th1&quot;&gt;220 minutes&lt;/th&gt;
&lt;td&gt;65.0 ℃&lt;/td&gt;
&lt;td&gt;63.8 ℃&lt;/td&gt;
&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Perhaps the biggest draw of this bottle is the swing cap. At first glance, it might seem like a simple aesthetic choice. (And don’t get me wrong, the retro milk jug appearance is quite attractive!) But in fact, swing caps and screw caps have several important functional and usability differences. First, leak-proofness. Practically all modern water bottles have a rubber or silicone gasket that prevents liquids and gases from escaping. In screw top bottles, the seal is held down by the friction of the plastic or metal screw; its effectiveness is determined by how tightly you screw the cap on. Swing caps are relatively simple: the only thing pushing down the gasket is the latch. The common advice for keeping carbonated beverages fresh is to screw on the cap as tightly as possible; with a swing cap bottle, you never have to worry about this.&lt;/p&gt;

&lt;p&gt;At first, I was a little concerned that the simple design — just a loose silicone seal clamped down by metal — would be less reliable than the multiple layers of a screw cap’s thread. But the ease with which the bottle can be closed conceals the fact that there’s a lot of pressure bearing down on that cap. When I tried to push the cap down to its closed position without using the latch, I couldn’t compress it anywhere near its final position! Furthermore, a Klean Kanteen representative told me that the cap was measured to be waterproof at 35psi. You might notice that the Klean Kanteen website lists the Swing Lok cap as “non leakproof”, whereas many of the screw caps are. I don’t think this is an accurate assessment. I’ve had plenty of leaks in my screw cap Klean Kanteen when filled with hot liquid, and you can even find videos of screw caps popping off completely when the bottle is filled with hot liquid and shaken. A swing cap, by virtue of its sturdy construction, does not have this outlet. The only way that pressure can escape from the bottle is through its seal. In that sense, it &lt;em&gt;has&lt;/em&gt; to be “non leakproof”.&lt;/p&gt;

&lt;p&gt;(It should be noted that the description of the Swing Lok cap on the Klean Kanteen website indicates that it’s not designed for hot liquids. I asked the rep about it and they said that this was because they “do not want a hot beverage to spill out and leak on anyone”. My understanding is that the silicone seal will not be damaged by boiling water; as with all Klean Kanteens, you just have to make sure not to agitate the bottle too much when filled with hot water to prevent pressure from building up.)&lt;/p&gt;

&lt;p&gt;Just to make sure that 35psi was enough for my needs, I battle-tested the bottle in several different ways. I filled it with carbonated water and tilted it downwards overnight. I filled it with hot water and let it sit out for a while. I got it filled with beer and left it on its side in the fridge for 5 days. At no point could I detect any leaks. Fortunately, the (delicious) beer was still carbonated at the end of the test. And according to my research, even bottled beer — presumably under much higher pressure than growler fill beer — rarely goes past 35psi. When asked whether the screw cap or the swing cap would be better for keeping carbonated beverages fresh, the Klean Kanteen rep told me that the bottle’s Swing Lok cap would be the best. (Many people in the beer community share this opinion about swing tops in general, and a Miir representative went as far as to say that their swing top bottles were guaranteed to be better than screw top bottles at keeping beer fresh.)&lt;/p&gt;

&lt;p&gt;Swing caps have another benefit when it comes to growler fills. Although relatively few in number, there are breweries out there that will refuse to fill screw top bottles! Several reasons exist for this, including freshness concerns, being able to fill to the very top without wasting beer, and ease of use for the bartenders. Another point in the swing cap’s favor.&lt;/p&gt;

&lt;p&gt;One final benefit of this particular cap is that the mechanism isn’t built into the neck, but instead attaches around it. This means that you can take it off entirely and use a screw cap if you want a change of scenery. (The threads for the screw cap are still there.) There are also no finicky holes that can retain moisture and odor. It’s an elegant, simple construction.&lt;/p&gt;

&lt;p&gt;The Klean Kanteen has some downsides that are worth mentioning.&lt;/p&gt;

&lt;p&gt;First, the volume text. The logo on the side of my old 20oz Klean Kanteen has long ago worn off, but the text on the bottom — including the volume designation — has remained perfectly intact. As expected, the 32oz Kanteen has its volume text printed in the exact same place. (Side note: not the case for the non-insulated growlers!!) Unfortunately, it seems that the company has changed the ink it uses for this purpose sometime over the past year. Whereas the writing on the bottom of my 20oz bottle is slightly elevated and subtly textured, the writing on the 32oz bottle is perfectly flat and “inky”. I already see some of the letters showing signs of wear. For growler fills, the volume designation is very important — several breweries have told me that they need to see it on the bottle for them to fill it — and I’m worried that this new ink will wear off over time like the logo on the side of my 20oz. If so, I’ll have to figure out a way to get the text back on. (Laser etching?)&lt;/p&gt;

&lt;p&gt;Next, the cap. It’s not perfect. Several models of the growler I tried in-store at REI felt very clicky and squeaky when opened, to the point where I immediately pushed the Klean Kanteen to the bottom of my priority list. The model I got on Amazon did not have this problem — it’s a pleasure to lock and unlock and even requires far less force to close — but it’s something to look out for. A second, minor issue is that when closed, the cap has a &lt;em&gt;very&lt;/em&gt; slight tilt towards the clasp side of the bottle. Again, this was more pronounced on the REI bottles than the bottle I ordered online, but it’s still noticeable if you look for it. Finally, the silicone seal does touch the liquid inside the bottle, so you’ll have to clean it carefully to avoid residual smells.&lt;/p&gt;

&lt;p&gt;Perhaps my biggest gripe with this bottle is the paint job. It looks lovely in photos, but it’s not as great in person. Unlike the beautiful glossy and matte coatings on other Klean Kanteen bottles, this one looks and feels more like anodized or tinted steel. There’s also no paint on the neck, despite what the marketing photos may show: the body paint stops in an abrupt and somewhat blurry line towards the end of its curve. It’s clear that these are essential compromises to prevent the swing cap from damaging the paint; if you attach the Swing Lok cap to a typical colored Klean Kanteen (which — again — look and feel stunning), you &lt;em&gt;will&lt;/em&gt; get scratches and void your warranty. Still, I wish it was a little better done. On the bright side, I do like the actual tint quite a bit. It’s a very unique coppery color with a nice sheen to it.&lt;/p&gt;

&lt;p&gt;All that said, these are merely minor quibbles. This bottle is great. I love holding it. I love opening it. I love handing it off to get a growler fill, and I love the feel of its weight when I get it back. It does every job I throw at it admirably. Really, it makes me super happy — happy enough to write a 3000 word review.&lt;/p&gt;

&lt;p&gt;And really, what more could you ask for from a water bottle (slash covert beer growler)?&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;update-2015-9-25&quot;&gt;Update 2015-9-25&lt;/h2&gt;

&lt;p&gt;Here are a few more pros and cons after a month of use.&lt;/p&gt;

&lt;p&gt;Pro: the seal is very good. Very, very good. Unfortunately, if the contents of the bottle are under pressure, this can result in a very loud &lt;strong&gt;POP!&lt;/strong&gt; when you open the lid. With carbonated liquids, this is merely startling, but with hot liquids, there’s a serious risk of burning yourself from the splashback. I have not had this happen to me yet, but it’s definitely something to be mindful of!&lt;/p&gt;

&lt;p&gt;Con: despite what I said about the paint job, it seems that it’s still susceptible to damage from the lid. My bottle has developed a slight chip on the side where the lid hits the body, as well as a light scratch on the other side where the latch drops down. I asked Klean Kanteen about it and they dismissed it as normal “wear and tear”. Unfortunately, unless you’re extremely careful, it seems that it’s impossible to avoid scratches with this design if you have a colored bottle. If this bothers you, I suggest getting the stainless steel model.&lt;/p&gt;

&lt;p&gt;Con: although I didn’t take photos to compare, it seems that the text on the bottom is getting more faded. I don’t think it’s going to last, alas.&lt;/p&gt;

&lt;p&gt;Despite the disappointing quality of the paint job and printing, I’d still heartily recommend this bottle for its shape, performance, and design.&lt;/p&gt;

&lt;h2 id=&quot;update-2015-11-3&quot;&gt;Update 2015-11-3&lt;/h2&gt;

&lt;p&gt;I’ve noticed that whenever I get a growler fill from Cellarmaker and let it sit for 4-5 days, it tastes a bit flat when I open it. Not outright flat, mind you, but clearly not as spritzy as when fresh. At present, I’m not entirely certain what the source of the problem is; after all, people claim that they’ve had growlers that kept carbonation for a month or longer. Here are the possibilities as I see them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Klean Kanteen is worse at preserving carbonation than other growlers. I find this just a little unlikely, since a) there have been no liquid leaks at all, b) the construction and materials are top-notch, and c) contents under pressure will “pop” (see above) even hours after the initial fill. But it’s definitely something to consider.&lt;/li&gt;
  &lt;li&gt;Cellarmaker beer goes flat quicker than beer from other breweries.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;All&lt;/em&gt; beer gets a bit flat after a few days in a growler, regardless of its construction. The people who claim otherwise either have different standards for carbonation, or are simply deluding themselves.&lt;/li&gt;
  &lt;li&gt;Only growlers that are filled absolutely, 100% to the brim will remain carbonated for long periods of time.&lt;/li&gt;
  &lt;li&gt;Only growlers filled with a counter pressure filler will remain fresh for long periods of time.&lt;/li&gt;
  &lt;li&gt;A lot depends on the width of the neck.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get to the bottom of this, I am currently experimenting with filling my 3 stainless steel insulated bottles with carbonated SodaStream water and letting them sit in the fridge for 4 days. Results will be posted after testing is complete.&lt;/p&gt;

</description>
        <pubDate>Wed, 09 Sep 2015 23:12:18 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/09/09/the-klean-kanteen-32oz-insulated-stainless-steel-growler-with-swing-lok-cap/</guid>
        
        
      </item>
    
      <item>
        <title>Who cares about the Apple Watch Edition?</title>
        <description>&lt;p&gt;It’s disappointing to see many of my &lt;a href=&quot;http://daringfireball.net/2015/02/apple_watch_pricing&quot;&gt;favorite&lt;/a&gt; Apple &lt;a href=&quot;http://www.marco.org/2015/03/04/boring-apple-watch-edition-pricing&quot;&gt;bloggers&lt;/a&gt; devote so much of their time to Apple Watch Edition gossip. How much of it is going to be solid gold? Will it be $5000, $10000, $15000? How much of them will Apple sell in their first quarter? Will they be a hit with the rich and powerful in China?&lt;/p&gt;

&lt;p&gt;My question is: why in the &lt;em&gt;least bit&lt;/em&gt; should us techies care? Sure — catering to the unfathomably well-off will make an impact on Apple’s fortunes in the long run, and spinning out into a fashion brand might make the company grow at an even more breakneck pace. But I was under the impression that we were Apple fans in the first place because they made best-in-breed products for &lt;em&gt;everyone&lt;/em&gt;, not just the elite.&lt;/p&gt;

&lt;p&gt;We loved our iPods and iPhones for their sleek design and smooth UI, even when people dismissed them as “expensive toys”. We knew our $2000 laptops were incredible for the price, even while people mocked us for not buying cheap, creaky Windows machines. When Android and Windows users poked fun at our platforms for lacking in free tools, we lauded the benefits of carefully crafted, paid-up-front software. &lt;a href=&quot;https://www.youtube.com/watch?v=5DHYe4dhjXw&quot;&gt;We let our Apple logos shine bright&lt;/a&gt; because we were &lt;em&gt;proud&lt;/em&gt; to be affiliated with one of the few companies that seemed philosophically bent on setting a new standard for mass-market products.&lt;/p&gt;

&lt;p&gt;There’s a good reason why the tech community might have a &lt;a href=&quot;http://daringfireball.net/2014/09/apple_watch&quot;&gt;“shit-fit”&lt;/a&gt; if Apple enters the realm of $10000 watches and $2000 bands. Gruber’s word choice makes it sound like a juvenile reaction by the fashion-unconscious. But that’s just the thing. We’re geeks. We believe in the intrinsic value of things. We’ve always made fun of &lt;a href=&quot;http://www.innerfidelity.com/content/monster-beats-dr-dre-solo&quot;&gt;name-dropping headphones&lt;/a&gt; and $1000 shirts when the quality couldn’t match the hype. Apple taught many of us that there’s more to the price of an item than just the cost of materials; design can be worth a lot, too. But we’ve been adamant for years that we bought Apple products because they were &lt;em&gt;good&lt;/em&gt;, not because they were fashionable. And now, with the Beats acquisition and these gold-encased watches, Apple is showing signs that they no longer want to be bound by intrinsic value.&lt;/p&gt;

&lt;p&gt;Conspicuous consumption? Veblen goods? Roped-off areas in Apple stores? Is &lt;em&gt;this&lt;/em&gt; is what the indie Mac community is going to talk about now?&lt;/p&gt;

&lt;p&gt;An Apple that sells &lt;a href=&quot;http://www.newyorker.com/magazine/2015/02/23/shape-things-come&quot;&gt;“bling”&lt;/a&gt; to billionaires is not a company that many of us could muster any passion about. Maybe Woz had the right idea all along.&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Mar 2015 12:00:55 -0700</pubDate>
        <link>http://beta-blog.archagon.net/2015/03/08/who-cares-about-the-apple-watch-edition/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/03/08/who-cares-about-the-apple-watch-edition/</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>Vancouver</title>
        <description>&lt;p&gt;On August 23rd, 2013, my Seattle friends and I boarded the Amtrak Cascades and headed up north in the direction of Vancouver. I couldn’t resist bringing along a small bag of produce and dairy that I’d been using to cook in the hostels, even though it added a few pounds of heft to my already-painful load. (This pattern will be shown to repeat itself throughout my travels.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://maps.googleapis.com/maps/api/staticmap? &amp;amp;center=Victoria, BC &amp;amp;size=1000x400 &amp;amp;scale=2 &amp;amp;zoom=6 &amp;amp;markers=color:red%7CPacific Central Station, Vancouver, BC &amp;amp;path=color:blue%7CAmtrak Station, San Jose, CA|King Street Station, Seattle, WA &amp;amp;path=color:red%7CKing Street Station, Seattle, WA|Pacific Central Station, Vancouver, BC &amp;amp;key=AIzaSyCVe3O2OawYpG6wixMFLsdbmnLBsJgSuNA&quot; width=&quot;1000px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ride was clean and beautiful. We planted ourselves in the observation car for most of the 4-hour trip. Dangerous electric tea was made. I was introduced to a devious card game called Bartok, in which each player adds a new, arbitrary rule during their turn. Every time a player breaks a rule or asks a question, they draw a card. As you might expect, it gets a little bit crazy.&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;image-series&quot;&gt;
&lt;img src=&quot;/images/vancouver-2013/train1.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/train2.jpg&quot; /&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Half an hour from the border, I realized that I was woefully underprepared for my customs interview. What was I doing? Where was I going? Should I have brought some printouts of my itinerary? &lt;em&gt;Did I need to hide my butter?!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The border agent gave my slightly disheveled self a stern look before letting me through. Little did he know of my contraband!&lt;/p&gt;

&lt;p&gt;I booked into my hostel, while my friends checked into a hotel in a… slightly seedy part of town. (Given how high Vancouver is rated in terms of life satisfaction, I didn’t even know it &lt;em&gt;had&lt;/em&gt; seedy parts!) We had a good laugh observing some friendly neighborhood drug dealers from the hotel room’s 3rd story window.&lt;/p&gt;

&lt;p&gt;So… Vancouver! What’s it all about?&lt;/p&gt;

&lt;p&gt;&lt;div class=&quot;image-series&quot;&gt;
&lt;img src=&quot;/images/vancouver-2013/skylight.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/ducks.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/ships1.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/ships2.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/graffiti.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/road.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/hotel.jpg&quot; /&gt;
&lt;img src=&quot;/images/vancouver-2013/cranes.jpg&quot; /&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Well, it’s a peaceful little city. Stanley Park is lovely to walk through, and it seems like there’s a lot of interesting restaurants and other businesses. (Once place I want to give a shout-out to is &lt;a href=&quot;http://www.yelp.com/biz/fritz-european-fry-house-vancouver&quot;&gt;Fritz European Fry House&lt;/a&gt;. I don’t think the poutine there was “real” — the cheese curds were kind of melty — but it was still some of the best poutine-like stuff that I tasted during my Canadian trip.)&lt;/p&gt;

&lt;p&gt;However, much like the last time I visited, it didn’t strike me as a city I wanted to spend too much time in. The architecture was kind of drab, and the whole place had an overbearing “new development” feel. Not cozy. Didn’t warm the heart. I don’t know how else to put it.&lt;/p&gt;

&lt;p&gt;However, I’m very thankful for the company I had. The trip wouldn’t have been the same without it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vancouver-2013/group.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Onward we go… aboard the VIA Rail.&lt;/p&gt;

&lt;video width=&quot;100%&quot; controls=&quot;&quot;&gt;
	&lt;source src=&quot;/images/vancouver-2013/outbound.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 00:00:00 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/02/01/vancouver/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/02/01/vancouver/</guid>
        
        
        <category>travel</category>
        
      </item>
    
      <item>
        <title>State of the Union</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/portrait_with_silly_cat.jpg&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m sure bad at this blogging thing. Since I first set out in — technically, July 2013, but let’s say August — I’ve only gotten &lt;em&gt;one week&lt;/em&gt; into my journey before hanging up. I’d like to see if I can try again, perhaps this time with a little more success.&lt;/p&gt;

&lt;p&gt;Right now, I’m writing this from Dublin, Ireland. In the interim, since my last entry from an actual city, I’ve visited Vancouver, Toronto, Montreal, Quebec City, New York, Boston, Philadelphia, Chicago, New Orleans, Austin, Los Angeles, Barcelona, Paris, London, Cornwall, Bath, Oxford, Cambridge, York, Newcastle, Edinburgh, Amsterdam, Luxembourg, Prague, Berlin, Vienna, Ljubljana, Zagreb, Split, Bologna, Modena, Milan, Florence, Rome, and Turin — plus a number of smaller towns along the way. That’s more than a dozen different countries over the course of the past two years. To the person first setting out on this trip — the person who expected to arrive in London and cautiously venture to other countries only on rare occasion — this list would have been unimaginable. I was nervous. I’d never been alone in a place where the primary language wasn’t English. I wasn’t sure about the logistics. I didn’t even know if I’d be able to tinker with my projects in peace.&lt;/p&gt;

&lt;p&gt;But it’s all worked out. I’ve cracked the code. With some trial and error, I’ve figured out how to live affordably and comfortably in different cities around the world. I’ve gotten a lot more bold about venturing to places where I have to resort to broken apologetic phrases in a new language. I’ve discovered many breathtaking sights, incredible architectural wonders, and fascinating local tastes. I’ve pared my belongings down to a bare minimum appropriate for most climates. I’ve worked in many lovely cafés, bars, and apartments. I feel like I understand so much more about the world than when I started.&lt;/p&gt;

&lt;p&gt;On the other hand, I’ve also had to face certain facets of myself head-on, with uncertain results. I’ve learned that my impression of different cities around the world was heavily painted by my childhood imagination. The places I’d hoped would bring my soul some peace — a magical sort of quality that I faintly recall in cities like London, Barcelona, and Rome from when I was little — were found to be fairly ordinary in contrast. I’ve found it disheartening to overwrite so much impressionistic imagery in my head with reality — because I know those feelings will never be back. I’ve learned that no matter how lonely I might get at times, there is still no part of me that will seek out others for company. I’ve learned that I can swallow up entire months at a time and wake up on the other end a good chunk older, but with nothing to show for it. All the attributes I hated about myself as a young teen are still there, entrenched, and at this point as much a part of my personality as anything else. I’ve learned that there are parts of me that I constantly have to fight, lest I end up old, unfulfilled, and alone. &lt;/p&gt;

&lt;p&gt;I’ve also learned that time moves quickly, and that it’s easy to get stuck in a simple routine. I’ve developed a great, burning fear that prods me almost every waking minute. The fear of aging. The fear of death. The fear of it “being too late”. Every day, I count the fractions of my age. 26 point 0. Point 25. Point 3, repeating. Every day that I’m not doing something productive — which is most days, to be honest — I feel like I’m actively destroying my potential. Other dates have been creeping into my head, too. How old is too old to live in a house with other people? How old is too old to get married? To have kids, if I decide to have them? To have a nice house, friendly neighbors, warm dinner parties? When I was in college, I half-jokingly feared that my study habits — put it off, put it off, then half-ass it on the last day — would translate in broader strokes to the rest of my life. But now I see that this was no joke. This is exactly what happens when you let a negative aspect of your personality fester for years and years.&lt;/p&gt;

&lt;p&gt;But these dark thoughts are not a reflection on travel. My journey has neither been a negative experience nor an entirely positive one. I see it as just another page in the book of my life: many new and interesting inputs from the environment feeding into the black box of my mind, allowing me to discover new truths about the world and myself.&lt;/p&gt;

&lt;p&gt;So that’s what’s going on in my head on this day, January the 31st, 2015, in the city of Dublin. And now, let’s step back into the past, to Vancouver, as it was during the &lt;a href=&quot;/2015/02/01/vancouver/&quot;&gt;last few weeks of August of 2013&lt;/a&gt; …&lt;/p&gt;

&lt;p&gt;(Technical note: from this point on, I will be posting all my blog entries on the &lt;a href=&quot;http://beta-blog.archagon.net&quot;&gt;beta-blog&lt;/a&gt; subdomain of my website. They will be linked from the main site, but I highly suggest reading on beta-blog instead. Eventually, the main site — hosted on Squarespace — will be removed, and the beta-blog page — hosted on Github Pages using a static site generator — will replace it. I will backport all the existing entries before I do that, and all the links should still hopefully work.)&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Jan 2015 17:00:00 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2015/01/31/state_of_the_union/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2015/01/31/state_of_the_union/</guid>
        
        
      </item>
    
      <item>
        <title>What&#39;s Up with Google Maps These Days?</title>
        <description>&lt;p&gt;When Apple replaced its Google-powered maps app with a complete in-house rewrite for iOS 6, most users had little good to say about it. It was inaccurate. It lacked public transit directions. The search was paltry, as was the iconography. At best, it could be described as &lt;em&gt;slick&lt;/em&gt;, with the pixellated pop-in of previous generations replaced by crisp, swiftly scaling vector lines. But this was not enough to offset the lack of functionality compared to Google’s definitive mapping solution, and so &lt;a href=&quot;https://www.apple.com/letter-from-tim-cook-on-maps/&quot;&gt;Tim Cook apologized&lt;/a&gt; and we all went on with our lives.&lt;/p&gt;

&lt;p&gt;It’s now a couple of iOS releases later, and over the past year — especially with OSX support in tow — I’ve been frequently finding myself reaching for Apple Maps before going anywhere near a browser. Gradually, Apple has been tending to its garden: improving its data; getting better business listings; making its icons more contextually meaningful. At the same time, in lockstep, Google Maps has been driving me progressively &lt;em&gt;up the wall&lt;/em&gt;. And as someone who has had &lt;em&gt;maps.google.com&lt;/em&gt; burned into his fingertips since its inception, I can’t help but see this as building towards a major shift in the balance of power in the mobile sphere.&lt;/p&gt;

&lt;p&gt;One of the most frustrating issues with Google Maps is seemingly minor, but hits me every time I use it. When you go to open a map, it initially — silently — loads as a static image. After a few seconds, the UI appears, followed by the actual interactive map. But nothing is done to distinguish the fake image-map from the interactive Javascript map, which means that when I first go to drag the map with my mouse, I am inevitably left with a useless thumbnail dangling from my cursor. &lt;em&gt;Every time&lt;/em&gt;. Even worse, the UI widgets appear to be clickable during this image phase, but have absolutely no function! The only thing you can do to avoid driving yourself crazy is wait for the tell-tale pop-in that heralds the interactive map — assuming you didn’t miss it on initial load.&lt;/p&gt;

&lt;p&gt;The UI just doesn’t seem to work half the time. Widgets always take a long time to load. Popups frequently overlap each other. Controls often stop working, as does dragging the map, forcing me to use the arrow keys to move around. Zoom takes too long to work and behaves erratically, especially if you use the Ctrl+double-click shortcut. Embedded maps only exacerbate all these issues, breaking more stuff and confining you to a tiny, immobile box. Just trying to &lt;em&gt;use&lt;/em&gt; the map feels like a Mexican standoff between yourself, the browser, and Google’s byzantine Javascript code.&lt;/p&gt;

&lt;p&gt;Google’s own native iOS app never goes above 15 to 30 frames per second. When I first tried the app on release day on my iPhone 4, I figured the performance was a forgivable issue with the 1.0, or that my phone’s hardware simply wasn’t cutting it anymore. But no: even today, on the flagship redesigned version, with an iPhone 5S on iOS 8, everything still runs with this lag. For a while, I figured, OK, Google didn’t want to give us the full, fluid maps experience on their primary competitor’s platform; whatever. Imagine my shock when I picked up a recent Android device, opened Maps, and found that it had the same 15-30fps bottleneck! On their home turf!&lt;/p&gt;

&lt;p&gt;Apple Maps, from the start, has been running at a solid 60 frames per second. It’s no joke: you can feel the smoothness in every scroll, every pinch, every rotation. There’s no longer any pop-in, aside from the initial load: when you zoom in, street lines get more detailed and smooth out instead of reloading, indicative of the updated vector graphics. It was widely rumored that one of Apple’s reasons for moving to their own app was that Google wasn’t giving them access to their full vector data, which they were supposedly already using on Android. If true, why is Google’s native app performance so atrocious, even to this day? Why do we still see tiles? Why do streets still have to unblur as you zoom in? If Google is actually using vectors, &lt;em&gt;how are they using them in such a way that still causes these issues?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Speaking of smoothness: gestures in Apple Maps, both on iOS and via the trackpad on OSX, are a dream to use. Pinch-zooming, rotating, and panning have become so ingrained in my muscle memory that I keep trying to do it to Google Maps in my browser window — only to watch my fonts grow a size too big.&lt;/p&gt;

&lt;p&gt;When I learned that Google Maps on iOS supported caching maps for offline use, I got excited. Now &lt;em&gt;here&lt;/em&gt; was a great feature that Apple Maps would probably never offer! Well, how’s this for irony? Although Apple doesn’t explicitly allow offline caching, it does, in practice, cache large swaths of map that you’ve recently viewed. I’ve been using my phone offline for the past few months, and in every city I’ve been to, I’ve gotten beautiful offline maps of the area after peeking at the surroundings in Wi-Fi mode. There’s no blur: I can zoom in with no apparent loss of street names or any other detail. Perhaps it’s a bad idea to rely on a cache that may theoretically invalidate at any time, but in practice, it works great.&lt;/p&gt;

&lt;p&gt;In Google Maps — an app, I must remind you, that &lt;em&gt;explicitly supports offline mapping&lt;/em&gt; — saved maps don’t actually seem to work much of the time. I was unfortunate enough to discover this while walking around in a foreign city: upon opening my saved Google map, I found a blurry mess of pixels with no labels whatsoever. (Fortunately, Apple’s cache saved me from having to ask for directions.) To be fair, &lt;em&gt;sometimes&lt;/em&gt; the maps do load, but I can’t seem to trigger this behavior deterministically. Even better, offline maps sometimes “expire” at arbitrary times, rendering them unusable. (The official expiration time — why even have one? — is about a month, but I’ve seen maps expire earlier than that for no reason.) Finally, for reasons I don’t understand, &lt;em&gt;not all areas are cacheable.&lt;/em&gt; That’s right: if you try to save a map in Slovenia, you’ll be hit with an “area not available” error, even though you can save maps in Croatia by stepping over the border! What a mess.&lt;/p&gt;

&lt;p&gt;So what about the elephant in the room: public transit? The lack of public transit directions on iOS is definitely a deal-breaker for me, and Apple’s kludgy third party solution just doesn’t cut it. (To remind readers: if you select public transit directions in Apple Maps, you are given the option of sending your request to any app that supports the transit directions API, or alternatively searching the App Store for one.) However, with the release of third party extensions, I think Apple has a tremendous opportunity on their hands. Although it’s convenient to have all your public transit directions curated by a central party, it’s hard for one organization to keep tabs on every public transit system in the world. How many bus lines are out there? Thousands? Google Maps mostly works in this regard, but I have on more than one occasion run into situations where the directions were inaccurate, misleading, or missing. Even Google can’t extend its feelers to every little city around the globe.&lt;/p&gt;

&lt;p&gt;On the other hand, local transit apps are not only accurate and up-to-date, but can even offer cool features like real-time arrival times and GPS tracking. It’s also pretty easy to find them: Apple already lets you see what apps are most frequently used in an area. But these apps aren’t able to integrate with system-wide services: you have to either open them separately or load them via Apple’s kludgy Maps hook, making them inconvenient for everyday use.&lt;/p&gt;

&lt;p&gt;So here’s an idea. What if Apple &lt;em&gt;kept&lt;/em&gt; its third party transit direction support, but instead of having public transit directions open up in a separate app, brought that information directly into Maps itself?&lt;/p&gt;

&lt;p&gt;Just a year ago, this would have been inconceivable. But today, with third party extension support, it would be a perfect fit with Apple’s strategy. Extensions go through specific, resource-constrained “extension points” to avoid hogging system resources, and Apple explicitly put future extension points on the table in their keynote reveal. How about this? With &lt;strong&gt;transit extensions&lt;/strong&gt;, you could have an app transmit local, up-to-the-minute timetables, GPS markers, and other metadata for public transit services right into any native Maps view!&lt;/p&gt;

&lt;p&gt;This isn’t something that Google could implement with its centralized, web-centric approach. But it’s almost &lt;em&gt;obvious&lt;/em&gt; with Apple’s app-based infrastructure. All the pieces are already in place; all they need to do is give developers an API for it. I don’t think this would necessarily obviate the need for centralized, curated public transit directions, but it would be a great way to augment and future-proof such an offering.&lt;/p&gt;

&lt;p&gt;There are still many problems with Apple Maps. Bookmark management is a nightmare. Getting directions between arbitrary points is nearly impossible. Things like subway stations are poorly delineated. But these are not high level problems; they are easy problems to fix, and Apple has progressively been fixing them. And so, I’m crossing my fingers for an amazing future where I can open Maps, switch over to satellite view, and have a private little “supervillain” moment as I watch the bus and train pins moving around the city, slowly etching out their hard-worn routes, in real-time.&lt;/p&gt;

&lt;p&gt;All at a buttery 60fps.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Nov 2014 17:39:48 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2014/11/19/what's_up_with_google_maps_these_days/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2014/11/19/what's_up_with_google_maps_these_days/</guid>
        
        
        <category>technology</category>
        
      </item>
    
      <item>
        <title>The Trials and Tribulations of Writing a 3rd Party iOS Keyboard</title>
        <description>&lt;p&gt;I recently released my first commercial project: &lt;a href=&quot;http://translit-keyboard.archagon.net&quot;&gt;Translit Keyboard&lt;/a&gt;, a 3rd party keyboard for iPhone that lets you transliterate Latin characters into Cyrillic and some other alphabets. When I was first investigating this problem, around the time that iOS 7 came out, I discovered that I could implement an elegant solution in OSX using the lesser-known &lt;a href=&quot;https://developer.apple.com/library/Mac/documentation/Cocoa/Reference/InputMethodKitFrameworkRef/index.html&quot;&gt;Input Method Kit&lt;/a&gt;. My program sat between the keyboard and text field; the framework provided me with each raw character as it was entered, and I could either pass it along with the default behavior, or instead take control of the output and send off whatever I pleased&lt;sup id=&quot;fnref:other_translit_techniques&quot;&gt;&lt;a href=&quot;#fn:other_translit_techniques&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Sadly, iOS was off-limits: since 3rd party extensions weren’t even on the radar at the time, there was nothing anyone could do to enable this sort of behavior system-wide. The only solution was to make a nice app with a special text field that you could copy and paste from — too clunky for rapid-pace tasks like messaging.&lt;/p&gt;

&lt;p&gt;When iOS 8 was announced and unexpectedly blew open the doors on extensions, my interest was immediately piqued. Although, on initial glance, the keyboard APIs were rather crude — you were given a gray box at the bottom of the screen and practically nothing else — this gave me a roundabout “in” to making input methods work on iOS. What if I were to recreate the system keyboard from scratch? I could make it behave any way I wanted!&lt;/p&gt;

&lt;p&gt;And so, &lt;a href=&quot;https://github.com/archagon/tasty-imitation-keyboard&quot;&gt;Tasty Imitation Keyboard&lt;/a&gt; was born. If I may take a moment of vanity, the keyboard is very solid: on most phones, it looks and types very much like the system keyboard, minus the landscape side buttons on the 6 and 6+. (iPad support isn’t too high on my priority list, but it &lt;em&gt;is&lt;/em&gt; functional.) This was a satisfying project to work on, giving me great insight into Swift, autolayout (since removed), Core Graphics, and a bit of Interface Builder. But it also gave me experience with something that I had yet to encounter in my sheltered iOS development existence: the horror of undercooked Apple frameworks and tools.&lt;/p&gt;

&lt;p&gt;Below are as many of the problems I encountered during development as I can remember. I have high hopes that these will be fixed over the next few years, but until then, perhaps this article will help some poor programmer in dire straits!&lt;/p&gt;

&lt;h2 id=&quot;behavioral-bugs&quot;&gt;Behavioral Bugs&lt;/h2&gt;

&lt;p&gt;Prevalent in Apple land is the expectation that software should adhere to the conventions of its host OS. We like our apps to use common widgets, behave consistently, react smoothly, and acknowledge the current design trends; very much unlike the “anything goes” philosophy that Windows and Android have often adopted. So it surprises me that 3rd party keyboards are even a thing on iOS. To take such an essential, constantly used, frequently visible UI element and put it at the mercy of developers — many with their own twisted ideas of how a keyboard should look — seems like a very un-Apple-y thing to do.&lt;/p&gt;

&lt;p&gt;But it gets worse. 3rd party keyboards on iOS don’t just have the opportunity to look alien; they &lt;em&gt;act&lt;/em&gt; alien, and this is something that programmers can’t guard against. Consequently, all the 3rd party keyboards currently available on iOS feel like some sort of jailbreak hack.&lt;/p&gt;

&lt;h3 id=&quot;that-pop-in&quot;&gt;That Pop-In&lt;/h3&gt;

&lt;p&gt;This is the first thing you notice. Unlike the system keyboards, which smoothly slide in from the bottom of the screen, 3rd party keyboards just… pop into existence. (Most of the time. Sometimes they slide in, though it’s hard to predict when this will happen. There are also some scary bugs associated with this particular entrance. More below.) Worse, if you’re switching from a default keyboard to a 3rd party keyboard, the entire keyboard &lt;em&gt;disappears&lt;/em&gt; for a second while the 3rd party keyboard loads up.&lt;/p&gt;

&lt;h3 id=&quot;invalid-state&quot;&gt;Invalid State&lt;/h3&gt;

&lt;p&gt;And guess what? Sometimes you’ll have to wait forever!&lt;/p&gt;

&lt;p&gt;On occasion — frighteningly frequent occasion — I’ve seen the keyboard simply fail to appear, even after waiting for many seconds. When this happens, it’s hard to tell when the keyboard is going to come back. Will it happen when you hit the home button and re-open the app? (Sometimes it doesn’t.) When you switch to another app? (Sometimes it doesn’t.) One of the few sure-fire ways to fix this problem is to force-close and re-open your current app, which isn’t always possible. (Spotlight.) And until then, have fun not being able to type!&lt;/p&gt;

&lt;p&gt;There are other fun states that your keyboard can get into. For example, sometimes the keyboard view will show up, but never actually load the keyboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Missing Keyboard.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the fun is not just limited to 3rd party keyboards! If you hit the globe icon on a system keyboard, sometimes the button will run away from under your finger — and stay that way for a long time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Missing Globe.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-is-the-text-even-doing&quot;&gt;What Is the Text Even Doing?&lt;/h3&gt;

&lt;p&gt;The text entry behavior of 3rd party keyboards is a bit erratic. For example, try using SwiftKey (or any other 3rd party keyboard) to type out part of a saved URL in Safari — to the point where it starts to autocomplete the rest — and then press delete. You’d expect the highlighted part to disappear, right? No: what actually happens is that the cursor simply moves to the left, leaving the autocompleted part intact and still highlighted. This does not happen with the system keyboard.&lt;/p&gt;

&lt;h3 id=&quot;settings-what-settings&quot;&gt;Settings? What Settings?&lt;/h3&gt;

&lt;p&gt;With 3rd party keyboards, you can’t access any of the keyboard preferences that the user has set, including auto-capitalization, automatic spaces after periods, disabling the shift key, and playing clicks when typing. As a result, you either have to assume a default, or re-implement the settings entirely.&lt;/p&gt;

&lt;p&gt;(Fortunately, accessibility settings like “reduced transparency” are still available.)&lt;/p&gt;

&lt;h3 id=&quot;broken-apps&quot;&gt;Broken Apps&lt;/h3&gt;

&lt;p&gt;Some apps are downright broken with 3rd party keyboards.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Editor’s note: None of the problems below seem to happen anymore with Google’s recent Maps redesign. Still, the fact that they were happening at all is troubling, since there’s nothing an app should theoretically be able to do to influence keyboard behavior.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Google Maps, a number of strange behaviors happen with the search box. First, it’s one of the few text fields I’ve seen that have custom keyboards slide back in after they’ve been dismissed, rather than just popping in as described above. Why this particular text field and not others? I have no idea. Furthermore, if you track the &lt;code&gt;UIInputViewController&lt;/code&gt; lifecycle during this process, you’ll see that even though &lt;code&gt;viewWillAppear&lt;/code&gt; is called correctly when this happens, &lt;code&gt;viewDidAppear&lt;/code&gt; is not. This is especially odd given that the keyboard still appears to go through &lt;code&gt;init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, if you tap on the search field in portrait and then rotate to landscape, your keyboard will suddenly expand almost to the top of the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Google Maps.PNG&quot; width=&quot;568px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How about another app? &lt;em&gt;Hilariously&lt;/em&gt;, in the App Store app, if you try to write a review using a 3rd party keyboard, you’ll find that the page turns entirely blank!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/No Review.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;reloading-the-extension&quot;&gt;Reloading the Extension&lt;/h3&gt;

&lt;p&gt;If you’ve recently updated a 3rd party keyboard, your apps might still have the old keyboard bundle loaded in. This is fixed by force-closing and reopening the app.&lt;/p&gt;

&lt;h3 id=&quot;mystery-crashes&quot;&gt;Mystery Crashes&lt;/h3&gt;

&lt;p&gt;I have seen numerous mystery crashes affecting their 3rd party keyboards. Sometimes they just… close for no reason. And you don’t even necessarily see it in your crash logs!&lt;/p&gt;

&lt;h3 id=&quot;mystery-glitches&quot;&gt;Mystery Glitches&lt;/h3&gt;

&lt;p&gt;3rd party keyboards can sometimes exhibit bizarre graphical glitches. For example, this one is easy to consistently reproduce.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Graphics Glitches.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;missing-features&quot;&gt;Missing Features&lt;/h3&gt;

&lt;p&gt;There are some features that customers are used to — or even find essential! — in their keyboards, but that we cannot currently provide. One is autocorrect, including the red-squiggle variety. Another is physical keyboard support.&lt;/p&gt;

&lt;h3 id=&quot;full-access-is-almost-necessary&quot;&gt;Full Access Is Almost Necessary&lt;/h3&gt;

&lt;p&gt;There are two ways that 3rd party keyboards can run. By default, the keyboard cannot do much of anything outside its own sandbox. But if the user goes into their settings and manually flicks a carefully hidden switch, they can enable “full access” for that particular keyboard. In the process, they are greeted with this terrifying popup:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Full Access.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This totally makes sense if there’s a chance that your keyboard could send your precious keystrokes over the net. Unfortunately, there are a number of other vital features that require getting past the full access barrier. Sharing data between your keyboard and your container app. Sharing data between multiple keyboards in a single app. Having a settings bundle. Using in-app purchases with your keyboard. &lt;em&gt;Playing sounds&lt;/em&gt;, for crying out loud. Some of these are reasonable since they could allow private data to escape out of the sandbox in roundabout ways, but it’s causing many developers to &lt;em&gt;strongly encourage&lt;/em&gt; their users to enable full access.&lt;/p&gt;

&lt;p&gt;I wanted to be as secure as possible in my app, so I worked around these problems in various ways. To compensate for the demo aspects of IAP, I released my app for a fixed price, and then released a Lite version with a useless transliterator (Old Slavonic) for trial purposes. Instead of having a single keyboard with a language selector accessible from the container app, I opted to have multiple keyboards instead. The one feature in my keyboard that still requires full access is sound; this defaults to “off” in the in-keyboard settings and offers users an explanation on how to enable it.&lt;/p&gt;

&lt;h3 id=&quot;the-reviews-oh-the-reviews&quot;&gt;The Reviews; Oh, the Reviews!&lt;/h3&gt;

&lt;p&gt;As you would expect, customers have no idea that any of these behaviors are caused by the OS. Just look at these reviews for various 3rd party keyboards:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Review Broken App.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Review Full Access 2.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Review Features.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Review Disappearing Keyboard.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Review Full Access.PNG&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You’ll find it difficult to find a 3rd party keyboard with more than 3 stars. (And can you blame the customers? After seeing these behaviors, &lt;em&gt;I&lt;/em&gt; certainly wouldn’t switch to a 3rd party keyboard full-time!)&lt;/p&gt;

&lt;p&gt;What can we do about this? Nothing! We have to pay for these bugs with our precious developer cachet.&lt;/p&gt;

&lt;h2 id=&quot;programming-problems&quot;&gt;Programming Problems&lt;/h2&gt;

&lt;p&gt;In addition to the above hassles, us programmers have other things to worry about. The framework that Apple has given us is… rough around the edges.&lt;/p&gt;

&lt;h3 id=&quot;changing-the-height&quot;&gt;Changing the Height&lt;/h3&gt;

&lt;p&gt;Unlike the system keyboard, your custom keyboard is confined to the rect it was created in. There’s no drawing outside the box and no adding transparency. This becomes a problem if you want to add popups to your keys like the ones in default keyboard. How do you handle the top row when you can’t draw over the top?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Popup.png&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the early betas, you couldn’t do much at all. Your best option was to either draw sideways popups or just do nothing. Closer to release, we got the ability to expand the height of the keyboard view. Sadly, the implementation feels like an afterthought. &lt;/p&gt;

&lt;p&gt;Apple specifies in the docs that you can change the height of your keyboard by adding an autolayout constraint with a constant value to the keyboard view. However, if you actually follow these instructions, you’ll find something like this in your log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014-11-08 17:17:09.741 Keyboard[8079:3155417] Unable to simultaneously satisfy constraints.
	Probably at least one of the constraints in the following list is one you don&#39;t want. Try this: (1) look at each constraint and try to figure out which you don&#39;t expect; (2) find the code that added the unwanted constraint or constraints and fix it. (Note: If you&#39;re seeing NSAutoresizingMaskLayoutConstraints that you don&#39;t understand, refer to the documentation for the UIView property translatesAutoresizingMaskIntoConstraints) 
(
    &quot;&amp;lt;NSLayoutConstraint:0x618000096350 &#39;UIView-Encapsulated-Layout-Height&#39; V:[UIInputView:0x7fe0be909690(216)]&amp;gt;&quot;,
    &quot;&amp;lt;NSLayoutConstraint:0x608000093b50 V:[UIInputView:0x7fe0be909690(246)]&amp;gt;&quot;
)

Will attempt to recover by breaking constraint 
&amp;lt;NSLayoutConstraint:0x608000093b50 V:[UIInputView:0x7fe0be909690(246)]&amp;gt;

Make a symbolic breakpoint at UIViewAlertForUnsatisfiableConstraints to catch this in the debugger.
The methods in the UIConstraintBasedLayoutDebugging category on UIView listed in &amp;lt;UIKit/UIView.h&amp;gt; may also be helpful.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding a constraint to the keyboard view doesn’t &lt;em&gt;set&lt;/em&gt; the height; it rams against the existing autolayout height constraint created by the autoresizing mask, and overrides it in &lt;em&gt;most&lt;/em&gt; cases. This is important: if you add the constraint before the view appears on the screen (this is specified in the docs), or in certain cases where your keyboard view doesn’t contain any subviews with autolayout constraints (this is not), your height constraint will lose and the keyboard will revert to the default height. That second case is particularly mystifying: at one point, I had to create an invisible kludge view with autolayout constraints and add it to my keyboard view in order for the height to set correctly!&lt;/p&gt;

&lt;p&gt;But even with the extra height, you can’t actually make any part of your keyboard transparent. This means that if you want to implement popups for the top row, you either have to add an ugly strip to the top of your keyboard (my solution — it’s a good place to put extra UI anyway), or alternatively try increasing the height whenever you tap a key in the top row and then shrink it back down afterwards.&lt;/p&gt;

&lt;p&gt;I ran into another problem with this constraint technique. For my keyboard, I didn’t &lt;em&gt;really&lt;/em&gt; want to provide an entirely unique keyboard height; all I needed was an extra 30 points or so on top of the native keyboard height. The first idea I had was to change my height constraint from just a constant, to “equal to the keyboard height” plus 30. This did not work. Next, I tried to capture the keyboard height before I added my constraint, as well as on rotations; unfortunately, after my constraint was added, I found that this technique stopped working. (It warrants further investigation, however.) Finally, I decided to just hardcode the keyboard heights for each device and each orientation.&lt;/p&gt;

&lt;p&gt;Speaking of which: with a custom height constraint, on rotation, everything goes &lt;em&gt;nuts&lt;/em&gt;. I don’t think I’m doing anything too crazy. This is what my rotation code looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;override func willRotateToInterfaceOrientation(toInterfaceOrientation: UIInterfaceOrientation, duration: NSTimeInterval) {
    self.keyboardHeight = self.heightForOrientation(toInterfaceOrientation, withTopBanner: true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…which simply sets the height constraint’s constant to the correct height.&lt;/p&gt;

&lt;p&gt;But if you perform the rotation in the Simulator, you see things like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Glitch Portrait.png&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Glitch Landscape 1.png&quot; width=&quot;568px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And maybe this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Glitch Landscape 2.png&quot; width=&quot;568px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the process of trying to figure out what was causing this, I discovered that during certain points in this transition, the &lt;code&gt;bounds&lt;/code&gt; of the keyboard view (or its superview, or its layers) were incorrect. For example, in the second screenshot, the &lt;code&gt;bounds&lt;/code&gt; would be 320×216, even though they’re clearly 568×162 at that point.&lt;/p&gt;

&lt;p&gt;I couldn’t find a way to work around this issue, and so I was freaking out for a few days until I discovered that it didn’t happen on device unless your performance was really slow. With that said, if you don’t add the Apple-sanctioned height constraint, none of this occurs.&lt;/p&gt;

&lt;h3 id=&quot;straight-up-api-errors&quot;&gt;Straight-Up API Errors&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;UIInputViewController&lt;/code&gt; class, as an adherent to &lt;code&gt;UITextInputDelegate&lt;/code&gt;, receives several useful callbacks from the text field. You’ll notice that they’re named pretty clearly: &lt;code&gt;selectionWillChange&lt;/code&gt;, &lt;code&gt;selectionDidChange&lt;/code&gt;, &lt;code&gt;textWillChange&lt;/code&gt;, and &lt;code&gt;textDidChange&lt;/code&gt;. In fact, &lt;em&gt;none of them actually do those things&lt;/em&gt;. The &lt;code&gt;selection&lt;/code&gt; methods never gets called at all, and the &lt;code&gt;text&lt;/code&gt; methods only get called — get this — when the selection changes or the cursor is moved!&lt;/p&gt;

&lt;p&gt;(Incidentally, the &lt;code&gt;UITextInput&lt;/code&gt; object that you get back with these methods is crippled. Many of its methods don’t seem to do anything.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;viewWillTransitionToSize&lt;/code&gt; is another offender. As of iOS 8, if you use the old &lt;code&gt;willRotateToInterfaceOrientation&lt;/code&gt; method, Xcode will tell you that it’s deprecated and that you should be using &lt;code&gt;viewWillTransitionToSize&lt;/code&gt;. However, &lt;code&gt;viewWillTransitionToSize&lt;/code&gt; never actually gets called! You’re forced to use a deprecated method in one of Apple’s newest UIKit additions.&lt;/p&gt;

&lt;h3 id=&quot;uitextinputtraits-transgressions&quot;&gt;UITextInputTraits Transgressions&lt;/h3&gt;

&lt;p&gt;Your &lt;code&gt;UIInputViewController&lt;/code&gt; has a mysterious &lt;code&gt;NSObject&lt;/code&gt; called &lt;code&gt;textDocumentProxy&lt;/code&gt; that serves as the interface between the keyboard and the current text field via the &lt;code&gt;UITextDocumentProxy&lt;/code&gt; protocol. (Why is it a nebulous &lt;code&gt;NSObject&lt;/code&gt; instead of a &lt;code&gt;UITextDocumentProxy&lt;/code&gt;?) Among other things, this protocol lets you access certain attributes of the text field.&lt;/p&gt;

&lt;p&gt;Perhaps the most important of these is &lt;code&gt;keyboardAppearance&lt;/code&gt;, which tells you if your keyboard should be using dark mode or not. One would expect this value to be correct on keyboard initialization, but no: you actually have to wait for the keyboard to appear on screen before this field populates with the correct value. I have not tested, but I have a hunch this applies to the other input traits as well. To my knowledge, this is not described in the documentation.&lt;/p&gt;

&lt;p&gt;The properties of &lt;code&gt;UITextInputTraits&lt;/code&gt; may change while the keyboard is still open, if the user switches from one text field to another. This is pretty sensible, if uncommon. What’s &lt;em&gt;not&lt;/em&gt; sensible is that the &lt;code&gt;textDocumentProxy&lt;/code&gt; object is not KVO compliant, meaning that there’s no easy way for you to observe these changes! The only thing you can really do is &lt;em&gt;poll the object, 60 times a second&lt;/em&gt;. (I’m not suggesting that there’s a performance penalty for this, but still… yuck.)&lt;/p&gt;

&lt;h3 id=&quot;audio&quot;&gt;Audio&lt;/h3&gt;

&lt;p&gt;As mentioned above, you need to enable full access to get any audio going. You would think, at least, that you could call the standard &lt;code&gt;AudioServicesPlaySystemSound&lt;/code&gt; function to play the keyboard tock; but instead, you have to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), {
    AudioServicesPlaySystemSound(1104)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And yes, that &lt;code&gt;dispatch_async&lt;/code&gt; is necessary; otherwise, your keyboard will &lt;em&gt;simply stop working&lt;/em&gt; if full access is disabled.&lt;/p&gt;

&lt;h3 id=&quot;ipad-woes&quot;&gt;iPad Woes&lt;/h3&gt;

&lt;p&gt;This is more sensible than the other issues, but I still think it’s worth mentioning. If you want to sell an iPhone-only keyboard… well, you kind of can’t. True, the app won’t show up in the iPad App Store; but if you install the container app on your iPad, you’ll still be able to install the keyboard in the settings! This is especially a problem if users find your app via your product website rather than through the App Store, since they probably won’t check whether your app is “optimized” for iPad before buying.&lt;/p&gt;

&lt;h3 id=&quot;the-cruel-mockery-of-size-classes&quot;&gt;The Cruel Mockery of Size Classes&lt;/h3&gt;

&lt;p&gt;Apple strongly encourages the use of size classes in iOS 8. Seems like such an elegant solution: why worry about device dimensions or even portrait vs. landscape when you can just read the size class and show the appropriate UI? Alas, in the case of keyboards, they’re useless. Aside from the 6+ in landscape, keyboards are all strictly &lt;code&gt;Compact&lt;/code&gt;, even though the layout constants for landscape are very different from those of portrait. Even worse: like the 6+, the 6 has those handy side buttons for editing in landscape — but its size class is still &lt;code&gt;Compact&lt;/code&gt;, while the 6+ is &lt;code&gt;Regular&lt;/code&gt;! And what about the iPad? Its keyboard is sized &lt;code&gt;Regular&lt;/code&gt; in both orientations, even though it has exactly nothing in common with the 6+ keyboard in landscape.&lt;/p&gt;

&lt;h3 id=&quot;autolayout-yeah-right&quot;&gt;Autolayout? Yeah, Right&lt;/h3&gt;

&lt;p&gt;This is kind of a digression, but I think it fits in here. When I was first implementing my keyboard, I tried to be a good platform citizen. I decided to use autolayout: Apple was strongly recommending it, and multiple screen sizes were coming in quick, so why not? Well… if you’re implementing a keyboard or anything remotely like it, &lt;em&gt;don’t use autolayout!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In learning this technology, I found several places where autolayout was very appropriate. For example, if you’re making a single-screen view with a limited number of static elements — preferably in Interface Builder — it’s a great idea to use autolayout. But if you’re creating something where lots of views are generated dynamically and/or need to be laid out in an orderly fashion, just forget about it. Aside from the fact that you’ll spend your days knee-deep in &lt;code&gt;constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:&lt;/code&gt; initializers and spacer views&lt;sup id=&quot;fnref:spacer_views&quot;&gt;&lt;a href=&quot;#fn:spacer_views&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, you’ll also have to battle bizarre autolayout warnings and auto-resolutions when you decide to make even the tiniest change to your layout. It gives you zero flexibility.&lt;/p&gt;

&lt;p&gt;Autolayout can optionally use something called the “visual format language” to create multiple constraints at once. A VFL string might look something like this: &lt;code&gt;|-(2)-[myView(30)]-(2)-|&lt;/code&gt;. But every view in such a string must be named. For my implementation, this meant that all those anonymous keys and spacer views suddenly needed to have unique identifiers. It also meant that I couldn’t just write out these strings by hand, but instead had to use Swift’s string interpolation to put the correct names in place. I also had to dynamically combine multiple format substrings into one because I had no way of knowing how many keys my keyboard had ahead of time. In the end, it turned into a completely illegible, unmaintainable mess. Instead of making my life easier, all it did was increase my workload and pollute my codebase. (Again: if you have a single-screen view with just a handful of subviews, this works great. But it doesn’t scale.)&lt;/p&gt;

&lt;p&gt;On top of it all, autolayout incurs a significant performance penalty. With my setup, featuring on the order of a hundred views, autolayout took a few &lt;em&gt;seconds&lt;/em&gt; longer than just laying everything out in &lt;code&gt;layoutSubviews&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In retrospect, settling on manual layout was certainly the right decision, and I’m not sure why I even spent so long trying to get autolayout working right. With &lt;code&gt;layoutSubviews&lt;/code&gt;, there’s no worrying about priorities or inequalities, no seeking out conflicting constraints, no implicit calculations, no linear algebra. It was as if a fog had been lifted from my mind. My layout code shrunk to only a third of what it was before. And as extra validation, soon after I released my keyboard into alpha, somebody asked me if they could lay out their keys in an arc. This was the simplest of changes with &lt;code&gt;layoutSubviews&lt;/code&gt;, but made me shudder to think of the horrible contortions that would have been required had I still been using autolayout!&lt;/p&gt;

&lt;p&gt;As an aside, I recently encountered a project called &lt;a href=&quot;https://github.com/Masonry/Masonry&quot;&gt;Masonry&lt;/a&gt; that intends to be a simplified autolayout syntax. Here is an example from their docs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[view1 mas_makeConstraints:^(MASConstraintMaker *make) {
    make.edges.equalTo(superview).with.insets(padding);
}];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To me, that looks &lt;em&gt;marvelous&lt;/em&gt;, and I wish Apple would adopt something similar. Right now, even though autolayout is very powerful, it is completely unsuited for many applications, including most programmatic interface designs.&lt;/p&gt;

&lt;h3 id=&quot;the-what-under-the-hood&quot;&gt;The What…? Under the Hood&lt;/h3&gt;

&lt;p&gt;If you examine at the view hierarchy of your keyboard, you’ll find it completely baffling. A &lt;code&gt;view&lt;/code&gt;, which is the same as your &lt;code&gt;inputView&lt;/code&gt;… added on top of a view… on top of another view… on top of another view… on top of the window, maybe? What are all these views even doing?&lt;/p&gt;

&lt;p&gt;User visput on Russian site Habrahabr illustrates this with the following screenshot from his &lt;a href=&quot;http://habrahabr.ru/post/235917/&quot;&gt;excellent article on iOS keyboard development&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/View Hierarchy.png&quot; alt=&quot;View Hierarchy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In short, I give this framework a rating of NC-17.&lt;/p&gt;

&lt;h2 id=&quot;tooling-troubles&quot;&gt;Tooling Troubles&lt;/h2&gt;

&lt;p&gt;On a recent episode of ATP (was it ATP?), the gang talked about how the condition of Apple’s tools is a troubling sign that they might be barging ahead too fast. Believe me: it’s worse than you could ever imagine.&lt;/p&gt;

&lt;h3 id=&quot;xcode&quot;&gt;Xcode&lt;/h3&gt;

&lt;p&gt;Xcode quitting “unexpectedly”, stuck builds, stuck indexing, unresponsive buttons, and the never-ceasing SourceKit crash log blinking boxes of doom have become an hourly ritual for me. It’s gotten to the point where I instinctively reach for the “force quit” button if a task hasn’t completed within a few seconds. (I’ve also force-closed SourceKitService in Activity Monitor out of spite.)&lt;/p&gt;

&lt;p&gt;Code completion frequenty stops working for me. I have to perform byzantine tricks to get it working again. (Sometimes, it never really does.) This is &lt;em&gt;infuriating&lt;/em&gt; when you Command-Click on some UIKit class to see the header and Xcode tells you that it doesn’t exist, or when you try to call a particularly long method and Xcode fails to find a match.&lt;/p&gt;

&lt;p&gt;Offline documentation has been in a state of disrepair for the longest time. Apple may have fixed it in 6.1, but I am loathe to check.&lt;/p&gt;

&lt;p&gt;Slow. Scrolling is slow. Code completion is slow. Documentation is slow. Search is slow. &lt;em&gt;Typing&lt;/em&gt; is slow. Everything is dog, dog slow. I am not exaggerating when I say that it sometimes takes &lt;em&gt;half a second&lt;/em&gt; for my text to show up on the screen! (Albeit, this is with far, far too many browser tabs open, but Sublime keeps chugging on without a problem. And… &lt;em&gt;it’s freaking text entry!&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;It’s become a frequent occurrence that I load up an updated version of my keyboard, tap on my keyboard in the globe menu… and crash out back to the default keyboard. I have to either open the container app, force close the current app, press “stop” in Xcode, or do some other weird trick to get it to show up correctly.&lt;/p&gt;

&lt;p&gt;A lot of the time, when I try to run the Keyboard target directly, it’ll open up the keyboard and then just sit on “waiting to attach” for eternity. Sometimes I can’t fix this.&lt;/p&gt;

&lt;p&gt;Sometimes my dynamic frameworks won’t compile, and I have to press the run button twice in a row for everything to link up properly. Remember the old quip about how insanity is doing the same thing twice and expecting different results? &lt;em&gt;Doesn’t apply to Xcode!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It’s such a shame because I actually, unironically like Xcode. Visual Studio disturbs me on a visceral level. How can I tell people that Xcode is a better-designed IDE when &lt;em&gt;this&lt;/em&gt; kind of stuff is still going on? It’s unacceptable.&lt;/p&gt;

&lt;h3 id=&quot;the-simulator&quot;&gt;The Simulator&lt;/h3&gt;

&lt;p&gt;That smiley… that smug, mocking smiley.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Smiley.png&quot; width=&quot;320px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As of Xcode 6.1, you can no longer open 3rd party keyboards in most apps in the Simulator, &lt;em&gt;including your own&lt;/em&gt;. (And not just 3rd party keyboards: most system keyboards refuse to show up, too.) Not only does this make debugging a whole lot harder, but it also prevents you from easily making screenshots of your keyboard if you don’t own some of the newer devices. This issue is marked as a bug in Radar, and seeing as how it first appeared in the Xcode 6.1 betas, I cannot fathom how it got through to release.&lt;/p&gt;

&lt;h2 id=&quot;fin&quot;&gt;Fin&lt;/h2&gt;

&lt;p&gt;There’s no real conclusion. As of iOS 8.1, 3rd party keyboards are functional, but look and feel janky. Programming them is also a horrible pain. I hope Apple fixes this stuff soon. The end.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you’ve found this article or my keyboard project useful, please consider buying something for yourself on Amazon via &lt;a href=&quot;http://www.amazon.com/gp/product/B00KR27MD4/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=B00KR27MD4&amp;amp;linkCode=as2&amp;amp;tag=archagon-20&amp;amp;linkId=3L2N5B744PPUNYM3&quot;&gt;my affiliate link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Addendum 2014-11-9: Added paragraphs on visual format language and performance to autolayout section.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:other_translit_techniques&quot;&gt;
      &lt;p&gt;There were a number of other interesting ways to accomplish the same goal, including Quartz event taps and &lt;code&gt;.keylayout&lt;/code&gt; files. You can check out the code, in various states of completion, in &lt;a href=&quot;https://github.com/archagon/cyrillic-transliterator&quot;&gt;my Github repo&lt;/a&gt;. (Warning: gnarly code ahead!) &lt;a href=&quot;#fnref:other_translit_techniques&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:spacer_views&quot;&gt;
      &lt;p&gt;If you want to have equal spacing between a set of views, you need to add an equally-sized set of “spacer” views between them. This is the technique recommended in the official documentation. &lt;a href=&quot;#fnref:spacer_views&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 12:26:54 -0800</pubDate>
        <link>http://beta-blog.archagon.net/2014/11/08/the-trials-and-tribulations-of-writing-a-3rd-party-ios-keyboard/</link>
        <guid isPermaLink="true">http://beta-blog.archagon.net/2014/11/08/the-trials-and-tribulations-of-writing-a-3rd-party-ios-keyboard/</guid>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
